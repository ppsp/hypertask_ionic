"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_capacitor_network_dist_esm_web_js"],{

/***/ 29435:
/*!*********************************************************!*\
  !*** ./node_modules/@capacitor/network/dist/esm/web.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NetworkWeb": () => (/* binding */ NetworkWeb),
/* harmony export */   "Network": () => (/* binding */ Network)
/* harmony export */ });
/* harmony import */ var F_GIT_hypertask_ionic2_hypertask_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */ 62783);
/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @capacitor/core */ 2960);



function translatedConnection() {
  const connection = window.navigator.connection || window.navigator.mozConnection || window.navigator.webkitConnection;
  let result = 'unknown';
  const type = connection ? connection.type || connection.effectiveType : null;

  if (type && typeof type === 'string') {
    switch (type) {
      // possible type values
      case 'bluetooth':
      case 'cellular':
        result = 'cellular';
        break;

      case 'none':
        result = 'none';
        break;

      case 'ethernet':
      case 'wifi':
      case 'wimax':
        result = 'wifi';
        break;

      case 'other':
      case 'unknown':
        result = 'unknown';
        break;
      // possible effectiveType values

      case 'slow-2g':
      case '2g':
      case '3g':
        result = 'cellular';
        break;

      case '4g':
        result = 'wifi';
        break;

      default:
        break;
    }
  }

  return result;
}

class NetworkWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_1__.WebPlugin {
  constructor() {
    super();

    this.handleOnline = () => {
      const connectionType = translatedConnection();
      const status = {
        connected: true,
        connectionType: connectionType
      };
      this.notifyListeners('networkStatusChange', status);
    };

    this.handleOffline = () => {
      const status = {
        connected: false,
        connectionType: 'none'
      };
      this.notifyListeners('networkStatusChange', status);
    };

    if (typeof window !== 'undefined') {
      window.addEventListener('online', this.handleOnline);
      window.addEventListener('offline', this.handleOffline);
    }
  }

  getStatus() {
    var _this = this;

    return (0,F_GIT_hypertask_ionic2_hypertask_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!window.navigator) {
        throw _this.unavailable('Browser does not support the Network Information API');
      }

      const connected = window.navigator.onLine;
      const connectionType = translatedConnection();
      const status = {
        connected,
        connectionType: connected ? connectionType : 'none'
      };
      return status;
    })();
  }

}
const Network = new NetworkWeb();


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2NhcGFjaXRvcl9uZXR3b3JrX2Rpc3RfZXNtX3dlYl9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBLFNBQVNDLG9CQUFULEdBQWdDO0FBQzVCLFFBQU1DLFVBQVUsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCRixVQUFqQixJQUNmQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGFBREYsSUFFZkYsTUFBTSxDQUFDQyxTQUFQLENBQWlCRSxnQkFGckI7QUFHQSxNQUFJQyxNQUFNLEdBQUcsU0FBYjtBQUNBLFFBQU1DLElBQUksR0FBR04sVUFBVSxHQUFHQSxVQUFVLENBQUNNLElBQVgsSUFBbUJOLFVBQVUsQ0FBQ08sYUFBakMsR0FBaUQsSUFBeEU7O0FBQ0EsTUFBSUQsSUFBSSxJQUFJLE9BQU9BLElBQVAsS0FBZ0IsUUFBNUIsRUFBc0M7QUFDbEMsWUFBUUEsSUFBUjtBQUNJO0FBQ0EsV0FBSyxXQUFMO0FBQ0EsV0FBSyxVQUFMO0FBQ0lELFFBQUFBLE1BQU0sR0FBRyxVQUFUO0FBQ0E7O0FBQ0osV0FBSyxNQUFMO0FBQ0lBLFFBQUFBLE1BQU0sR0FBRyxNQUFUO0FBQ0E7O0FBQ0osV0FBSyxVQUFMO0FBQ0EsV0FBSyxNQUFMO0FBQ0EsV0FBSyxPQUFMO0FBQ0lBLFFBQUFBLE1BQU0sR0FBRyxNQUFUO0FBQ0E7O0FBQ0osV0FBSyxPQUFMO0FBQ0EsV0FBSyxTQUFMO0FBQ0lBLFFBQUFBLE1BQU0sR0FBRyxTQUFUO0FBQ0E7QUFDSjs7QUFDQSxXQUFLLFNBQUw7QUFDQSxXQUFLLElBQUw7QUFDQSxXQUFLLElBQUw7QUFDSUEsUUFBQUEsTUFBTSxHQUFHLFVBQVQ7QUFDQTs7QUFDSixXQUFLLElBQUw7QUFDSUEsUUFBQUEsTUFBTSxHQUFHLE1BQVQ7QUFDQTs7QUFDSjtBQUNJO0FBNUJSO0FBOEJIOztBQUNELFNBQU9BLE1BQVA7QUFDSDs7QUFDTSxNQUFNRyxVQUFOLFNBQXlCVixzREFBekIsQ0FBbUM7QUFDdENXLEVBQUFBLFdBQVcsR0FBRztBQUNWOztBQUNBLFNBQUtDLFlBQUwsR0FBb0IsTUFBTTtBQUN0QixZQUFNQyxjQUFjLEdBQUdaLG9CQUFvQixFQUEzQztBQUNBLFlBQU1hLE1BQU0sR0FBRztBQUNYQyxRQUFBQSxTQUFTLEVBQUUsSUFEQTtBQUVYRixRQUFBQSxjQUFjLEVBQUVBO0FBRkwsT0FBZjtBQUlBLFdBQUtHLGVBQUwsQ0FBcUIscUJBQXJCLEVBQTRDRixNQUE1QztBQUNILEtBUEQ7O0FBUUEsU0FBS0csYUFBTCxHQUFxQixNQUFNO0FBQ3ZCLFlBQU1ILE1BQU0sR0FBRztBQUNYQyxRQUFBQSxTQUFTLEVBQUUsS0FEQTtBQUVYRixRQUFBQSxjQUFjLEVBQUU7QUFGTCxPQUFmO0FBSUEsV0FBS0csZUFBTCxDQUFxQixxQkFBckIsRUFBNENGLE1BQTVDO0FBQ0gsS0FORDs7QUFPQSxRQUFJLE9BQU9YLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDL0JBLE1BQUFBLE1BQU0sQ0FBQ2UsZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsS0FBS04sWUFBdkM7QUFDQVQsTUFBQUEsTUFBTSxDQUFDZSxnQkFBUCxDQUF3QixTQUF4QixFQUFtQyxLQUFLRCxhQUF4QztBQUNIO0FBQ0o7O0FBQ0tFLEVBQUFBLFNBQVMsR0FBRztBQUFBOztBQUFBO0FBQ2QsVUFBSSxDQUFDaEIsTUFBTSxDQUFDQyxTQUFaLEVBQXVCO0FBQ25CLGNBQU0sS0FBSSxDQUFDZ0IsV0FBTCxDQUFpQixzREFBakIsQ0FBTjtBQUNIOztBQUNELFlBQU1MLFNBQVMsR0FBR1osTUFBTSxDQUFDQyxTQUFQLENBQWlCaUIsTUFBbkM7QUFDQSxZQUFNUixjQUFjLEdBQUdaLG9CQUFvQixFQUEzQztBQUNBLFlBQU1hLE1BQU0sR0FBRztBQUNYQyxRQUFBQSxTQURXO0FBRVhGLFFBQUFBLGNBQWMsRUFBRUUsU0FBUyxHQUFHRixjQUFILEdBQW9CO0FBRmxDLE9BQWY7QUFJQSxhQUFPQyxNQUFQO0FBVmM7QUFXakI7O0FBbENxQztBQW9DMUMsTUFBTVEsT0FBTyxHQUFHLElBQUlaLFVBQUosRUFBaEIiLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0BjYXBhY2l0b3IvbmV0d29yay9kaXN0L2VzbS93ZWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV2ViUGx1Z2luIH0gZnJvbSAnQGNhcGFjaXRvci9jb3JlJztcbmZ1bmN0aW9uIHRyYW5zbGF0ZWRDb25uZWN0aW9uKCkge1xuICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB3aW5kb3cubmF2aWdhdG9yLmNvbm5lY3Rpb24gfHxcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5tb3pDb25uZWN0aW9uIHx8XG4gICAgICAgIHdpbmRvdy5uYXZpZ2F0b3Iud2Via2l0Q29ubmVjdGlvbjtcbiAgICBsZXQgcmVzdWx0ID0gJ3Vua25vd24nO1xuICAgIGNvbnN0IHR5cGUgPSBjb25uZWN0aW9uID8gY29ubmVjdGlvbi50eXBlIHx8IGNvbm5lY3Rpb24uZWZmZWN0aXZlVHlwZSA6IG51bGw7XG4gICAgaWYgKHR5cGUgJiYgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgLy8gcG9zc2libGUgdHlwZSB2YWx1ZXNcbiAgICAgICAgICAgIGNhc2UgJ2JsdWV0b290aCc6XG4gICAgICAgICAgICBjYXNlICdjZWxsdWxhcic6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gJ2NlbGx1bGFyJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICdub25lJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2V0aGVybmV0JzpcbiAgICAgICAgICAgIGNhc2UgJ3dpZmknOlxuICAgICAgICAgICAgY2FzZSAnd2ltYXgnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICd3aWZpJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ290aGVyJzpcbiAgICAgICAgICAgIGNhc2UgJ3Vua25vd24nOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICd1bmtub3duJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIHBvc3NpYmxlIGVmZmVjdGl2ZVR5cGUgdmFsdWVzXG4gICAgICAgICAgICBjYXNlICdzbG93LTJnJzpcbiAgICAgICAgICAgIGNhc2UgJzJnJzpcbiAgICAgICAgICAgIGNhc2UgJzNnJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAnY2VsbHVsYXInO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnNGcnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICd3aWZpJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBjbGFzcyBOZXR3b3JrV2ViIGV4dGVuZHMgV2ViUGx1Z2luIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVPbmxpbmUgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb25uZWN0aW9uVHlwZSA9IHRyYW5zbGF0ZWRDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICBjb25zdCBzdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25UeXBlOiBjb25uZWN0aW9uVHlwZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm5vdGlmeUxpc3RlbmVycygnbmV0d29ya1N0YXR1c0NoYW5nZScsIHN0YXR1cyk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlT2ZmbGluZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHtcbiAgICAgICAgICAgICAgICBjb25uZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25UeXBlOiAnbm9uZScsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlMaXN0ZW5lcnMoJ25ldHdvcmtTdGF0dXNDaGFuZ2UnLCBzdGF0dXMpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCB0aGlzLmhhbmRsZU9ubGluZSk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIHRoaXMuaGFuZGxlT2ZmbGluZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0U3RhdHVzKCkge1xuICAgICAgICBpZiAoIXdpbmRvdy5uYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgIHRocm93IHRoaXMudW5hdmFpbGFibGUoJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgTmV0d29yayBJbmZvcm1hdGlvbiBBUEknKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb25uZWN0ZWQgPSB3aW5kb3cubmF2aWdhdG9yLm9uTGluZTtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvblR5cGUgPSB0cmFuc2xhdGVkQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25zdCBzdGF0dXMgPSB7XG4gICAgICAgICAgICBjb25uZWN0ZWQsXG4gICAgICAgICAgICBjb25uZWN0aW9uVHlwZTogY29ubmVjdGVkID8gY29ubmVjdGlvblR5cGUgOiAnbm9uZScsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxufVxuY29uc3QgTmV0d29yayA9IG5ldyBOZXR3b3JrV2ViKCk7XG5leHBvcnQgeyBOZXR3b3JrIH07XG4iXSwibmFtZXMiOlsiV2ViUGx1Z2luIiwidHJhbnNsYXRlZENvbm5lY3Rpb24iLCJjb25uZWN0aW9uIiwid2luZG93IiwibmF2aWdhdG9yIiwibW96Q29ubmVjdGlvbiIsIndlYmtpdENvbm5lY3Rpb24iLCJyZXN1bHQiLCJ0eXBlIiwiZWZmZWN0aXZlVHlwZSIsIk5ldHdvcmtXZWIiLCJjb25zdHJ1Y3RvciIsImhhbmRsZU9ubGluZSIsImNvbm5lY3Rpb25UeXBlIiwic3RhdHVzIiwiY29ubmVjdGVkIiwibm90aWZ5TGlzdGVuZXJzIiwiaGFuZGxlT2ZmbGluZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRTdGF0dXMiLCJ1bmF2YWlsYWJsZSIsIm9uTGluZSIsIk5ldHdvcmsiXSwic291cmNlUm9vdCI6IndlYnBhY2s6Ly8vIn0=