"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["default-node_modules_ionic_core_dist_esm_data-caf38df0_js-node_modules_ionic_core_dist_esm_th-d3ab8e"],{

/***/ 53414:
/*!************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/data-caf38df0.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": () => (/* binding */ getDayColumnData),
/* harmony export */   "B": () => (/* binding */ getYearColumnData),
/* harmony export */   "C": () => (/* binding */ isMonthFirstLocale),
/* harmony export */   "D": () => (/* binding */ getTimeColumnsData),
/* harmony export */   "E": () => (/* binding */ isLocaleDayPeriodRTL),
/* harmony export */   "F": () => (/* binding */ getDaysOfWeek),
/* harmony export */   "G": () => (/* binding */ getMonthAndYear),
/* harmony export */   "H": () => (/* binding */ getDaysOfMonth),
/* harmony export */   "I": () => (/* binding */ generateMonths),
/* harmony export */   "J": () => (/* binding */ is24Hour),
/* harmony export */   "K": () => (/* binding */ getLocalizedTime),
/* harmony export */   "L": () => (/* binding */ getMonthAndDay),
/* harmony export */   "M": () => (/* binding */ formatValue),
/* harmony export */   "N": () => (/* binding */ getNextYear),
/* harmony export */   "O": () => (/* binding */ getPreviousYear),
/* harmony export */   "P": () => (/* binding */ clampDate),
/* harmony export */   "Q": () => (/* binding */ parseAmPm),
/* harmony export */   "R": () => (/* binding */ calculateHourFromAMPM),
/* harmony export */   "S": () => (/* binding */ getLocalizedDateTime),
/* harmony export */   "T": () => (/* binding */ getMonthDayAndYear),
/* harmony export */   "a": () => (/* binding */ getDay),
/* harmony export */   "b": () => (/* binding */ isAfter),
/* harmony export */   "c": () => (/* binding */ isSameDay),
/* harmony export */   "d": () => (/* binding */ getPreviousMonth),
/* harmony export */   "e": () => (/* binding */ getNextMonth),
/* harmony export */   "f": () => (/* binding */ getPartsFromCalendarDay),
/* harmony export */   "g": () => (/* binding */ generateDayAriaLabel),
/* harmony export */   "h": () => (/* binding */ getEndOfWeek),
/* harmony export */   "i": () => (/* binding */ isBefore),
/* harmony export */   "j": () => (/* binding */ getStartOfWeek),
/* harmony export */   "k": () => (/* binding */ getPreviousDay),
/* harmony export */   "l": () => (/* binding */ getNextDay),
/* harmony export */   "m": () => (/* binding */ getPreviousWeek),
/* harmony export */   "n": () => (/* binding */ getNextWeek),
/* harmony export */   "o": () => (/* binding */ parseMaxParts),
/* harmony export */   "p": () => (/* binding */ parseMinParts),
/* harmony export */   "q": () => (/* binding */ parseDate),
/* harmony export */   "r": () => (/* binding */ convertToArrayOfNumbers),
/* harmony export */   "s": () => (/* binding */ convertDataToISO),
/* harmony export */   "t": () => (/* binding */ getToday),
/* harmony export */   "u": () => (/* binding */ getClosestValidDate),
/* harmony export */   "v": () => (/* binding */ validateParts),
/* harmony export */   "w": () => (/* binding */ warnIfValueOutOfBounds),
/* harmony export */   "x": () => (/* binding */ getNumDaysInMonth),
/* harmony export */   "y": () => (/* binding */ getCombinedDateColumnData),
/* harmony export */   "z": () => (/* binding */ getMonthColumnData)
/* harmony export */ });
/* harmony import */ var _index_c4b11676_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-c4b11676.js */ 75057);
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */


/**
 * Returns true if the selected day is equal to the reference day
 */
const isSameDay = (baseParts, compareParts) => {
  return (baseParts.month === compareParts.month && baseParts.day === compareParts.day && baseParts.year === compareParts.year);
};
/**
 * Returns true is the selected day is before the reference day.
 */
const isBefore = (baseParts, compareParts) => {
  return !!(baseParts.year < compareParts.year ||
    (baseParts.year === compareParts.year && baseParts.month < compareParts.month) ||
    (baseParts.year === compareParts.year &&
      baseParts.month === compareParts.month &&
      baseParts.day !== null &&
      baseParts.day < compareParts.day));
};
/**
 * Returns true is the selected day is after the reference day.
 */
const isAfter = (baseParts, compareParts) => {
  return !!(baseParts.year > compareParts.year ||
    (baseParts.year === compareParts.year && baseParts.month > compareParts.month) ||
    (baseParts.year === compareParts.year &&
      baseParts.month === compareParts.month &&
      baseParts.day !== null &&
      baseParts.day > compareParts.day));
};
const warnIfValueOutOfBounds = (value, min, max) => {
  const valueArray = Array.isArray(value) ? value : [value];
  for (const val of valueArray) {
    if ((min !== undefined && isBefore(val, min)) || (max !== undefined && isAfter(val, max))) {
      (0,_index_c4b11676_js__WEBPACK_IMPORTED_MODULE_0__.p)('The value provided to ion-datetime is out of bounds.\n\n' +
        `Min: ${JSON.stringify(min)}\n` +
        `Max: ${JSON.stringify(max)}\n` +
        `Value: ${JSON.stringify(value)}`);
      break;
    }
  }
};

/**
 * Determines if given year is a
 * leap year. Returns `true` if year
 * is a leap year. Returns `false`
 * otherwise.
 */
const isLeapYear = (year) => {
  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
};
const is24Hour = (locale, hourCycle) => {
  /**
   * If developer has explicitly enabled h23 time
   * then return early and do not look at the system default.
   */
  if (hourCycle !== undefined) {
    return hourCycle === 'h23';
  }
  /**
   * If hourCycle was not specified, check the locale
   * that is set on the user's device. We first check the
   * Intl.DateTimeFormat hourCycle option as developers can encode this
   * option into the locale string. Example: `en-US-u-hc-h23`
   */
  const formatted = new Intl.DateTimeFormat(locale, { hour: 'numeric' });
  const options = formatted.resolvedOptions();
  if (options.hourCycle !== undefined) {
    return options.hourCycle === 'h23';
  }
  /**
   * If hourCycle is not specified (either through lack
   * of browser support or locale information) then fall
   * back to this slower hourCycle check.
   */
  const date = new Date('5/18/2021 00:00');
  const parts = formatted.formatToParts(date);
  const hour = parts.find((p) => p.type === 'hour');
  if (!hour) {
    throw new Error('Hour value not found from DateTimeFormat');
  }
  return hour.value === '00';
};
/**
 * Given a date object, returns the number
 * of days in that month.
 * Month value begin at 1, not 0.
 * i.e. January = month 1.
 */
const getNumDaysInMonth = (month, year) => {
  return month === 4 || month === 6 || month === 9 || month === 11
    ? 30
    : month === 2
      ? isLeapYear(year)
        ? 29
        : 28
      : 31;
};
/**
 * Certain locales display month then year while
 * others display year then month.
 * We can use Intl.DateTimeFormat to determine
 * the ordering for each locale.
 * The formatOptions param can be used to customize
 * which pieces of a date to compare against the month
 * with. For example, some locales render dd/mm/yyyy
 * while others render mm/dd/yyyy. This function can be
 * used for variations of the same "month first" check.
 */
const isMonthFirstLocale = (locale, formatOptions = {
  month: 'numeric',
  year: 'numeric',
}) => {
  /**
   * By setting month and year we guarantee that only
   * month, year, and literal (slashes '/', for example)
   * values are included in the formatToParts results.
   *
   * The ordering of the parts will be determined by
   * the locale. So if the month is the first value,
   * then we know month should be shown first. If the
   * year is the first value, then we know year should be shown first.
   *
   * This ordering can be controlled by customizing the locale property.
   */
  const parts = new Intl.DateTimeFormat(locale, formatOptions).formatToParts(new Date());
  return parts[0].type === 'month';
};
/**
 * Determines if the given locale formats the day period (am/pm) to the
 * left or right of the hour.
 * @param locale The locale to check.
 * @returns `true` if the locale formats the day period to the left of the hour.
 */
const isLocaleDayPeriodRTL = (locale) => {
  const parts = new Intl.DateTimeFormat(locale, { hour: 'numeric' }).formatToParts(new Date());
  return parts[0].type === 'dayPeriod';
};

const ISO_8601_REGEXP = 
// eslint-disable-next-line no-useless-escape
/^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
// eslint-disable-next-line no-useless-escape
const TIME_REGEXP = /^((\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
/**
 * Use to convert a string of comma separated numbers or
 * an array of numbers, and clean up any user input
 */
const convertToArrayOfNumbers = (input) => {
  if (input === undefined) {
    return;
  }
  let processedInput = input;
  if (typeof input === 'string') {
    // convert the string to an array of strings
    // auto remove any whitespace and [] characters
    processedInput = input.replace(/\[|\]|\s/g, '').split(',');
  }
  let values;
  if (Array.isArray(processedInput)) {
    // ensure each value is an actual number in the returned array
    values = processedInput.map((num) => parseInt(num, 10)).filter(isFinite);
  }
  else {
    values = [processedInput];
  }
  return values;
};
/**
 * Extracts date information
 * from a .calendar-day element
 * into DatetimeParts.
 */
const getPartsFromCalendarDay = (el) => {
  return {
    month: parseInt(el.getAttribute('data-month'), 10),
    day: parseInt(el.getAttribute('data-day'), 10),
    year: parseInt(el.getAttribute('data-year'), 10),
    dayOfWeek: parseInt(el.getAttribute('data-day-of-week'), 10),
  };
};
function parseDate(val) {
  if (Array.isArray(val)) {
    return val.map((valStr) => parseDate(valStr));
  }
  // manually parse IS0 cuz Date.parse cannot be trusted
  // ISO 8601 format: 1994-12-15T13:47:20Z
  let parse = null;
  if (val != null && val !== '') {
    // try parsing for just time first, HH:MM
    parse = TIME_REGEXP.exec(val);
    if (parse) {
      // adjust the array so it fits nicely with the datetime parse
      parse.unshift(undefined, undefined);
      parse[2] = parse[3] = undefined;
    }
    else {
      // try parsing for full ISO datetime
      parse = ISO_8601_REGEXP.exec(val);
    }
  }
  if (parse === null) {
    // wasn't able to parse the ISO datetime
    return undefined;
  }
  // ensure all the parse values exist with at least 0
  for (let i = 1; i < 8; i++) {
    parse[i] = parse[i] !== undefined ? parseInt(parse[i], 10) : undefined;
  }
  let tzOffset = 0;
  if (parse[9] && parse[10]) {
    // hours
    tzOffset = parseInt(parse[10], 10) * 60;
    if (parse[11]) {
      // minutes
      tzOffset += parseInt(parse[11], 10);
    }
    if (parse[9] === '-') {
      // + or -
      tzOffset *= -1;
    }
  }
  // can also get second and millisecond from parse[6] and parse[7] if needed
  return {
    year: parse[1],
    month: parse[2],
    day: parse[3],
    hour: parse[4],
    minute: parse[5],
    tzOffset,
    ampm: parse[4] < 12 ? 'am' : 'pm',
  };
}
const clampDate = (dateParts, minParts, maxParts) => {
  if (minParts && isBefore(dateParts, minParts)) {
    return minParts;
  }
  else if (maxParts && isAfter(dateParts, maxParts)) {
    return maxParts;
  }
  return dateParts;
};
/**
 * Parses an hour and returns if the value is in the morning (am) or afternoon (pm).
 * @param hour The hour to format, should be 0-23
 * @returns `pm` if the hour is greater than or equal to 12, `am` if less than 12.
 */
const parseAmPm = (hour) => {
  return hour >= 12 ? 'pm' : 'am';
};
/**
 * Takes a max date string and creates a DatetimeParts
 * object, filling in any missing information.
 * For example, max="2012" would fill in the missing
 * month, day, hour, and minute information.
 */
const parseMaxParts = (max, todayParts) => {
  const { month, day, year, hour, minute } = parseDate(max);
  /**
   * When passing in `max` or `min`, developers
   * can pass in any ISO-8601 string. This means
   * that not all of the date/time fields are defined.
   * For example, passing max="2012" is valid even though
   * there is no month, day, hour, or minute data.
   * However, all of this data is required when clamping the date
   * so that the correct initial value can be selected. As a result,
   * we need to fill in any omitted data with the min or max values.
   */
  const yearValue = year !== null && year !== void 0 ? year : todayParts.year;
  const monthValue = month !== null && month !== void 0 ? month : 12;
  return {
    month: monthValue,
    day: day !== null && day !== void 0 ? day : getNumDaysInMonth(monthValue, yearValue),
    /**
     * Passing in "HH:mm" is a valid ISO-8601
     * string, so we just default to the current year
     * in this case.
     */
    year: yearValue,
    hour: hour !== null && hour !== void 0 ? hour : 23,
    minute: minute !== null && minute !== void 0 ? minute : 59,
  };
};
/**
 * Takes a min date string and creates a DatetimeParts
 * object, filling in any missing information.
 * For example, min="2012" would fill in the missing
 * month, day, hour, and minute information.
 */
const parseMinParts = (min, todayParts) => {
  const { month, day, year, hour, minute } = parseDate(min);
  /**
   * When passing in `max` or `min`, developers
   * can pass in any ISO-8601 string. This means
   * that not all of the date/time fields are defined.
   * For example, passing max="2012" is valid even though
   * there is no month, day, hour, or minute data.
   * However, all of this data is required when clamping the date
   * so that the correct initial value can be selected. As a result,
   * we need to fill in any omitted data with the min or max values.
   */
  return {
    month: month !== null && month !== void 0 ? month : 1,
    day: day !== null && day !== void 0 ? day : 1,
    /**
     * Passing in "HH:mm" is a valid ISO-8601
     * string, so we just default to the current year
     * in this case.
     */
    year: year !== null && year !== void 0 ? year : todayParts.year,
    hour: hour !== null && hour !== void 0 ? hour : 0,
    minute: minute !== null && minute !== void 0 ? minute : 0,
  };
};

const twoDigit = (val) => {
  return ('0' + (val !== undefined ? Math.abs(val) : '0')).slice(-2);
};
const fourDigit = (val) => {
  return ('000' + (val !== undefined ? Math.abs(val) : '0')).slice(-4);
};
function convertDataToISO(data) {
  if (Array.isArray(data)) {
    return data.map((parts) => convertDataToISO(parts));
  }
  // https://www.w3.org/TR/NOTE-datetime
  let rtn = '';
  if (data.year !== undefined) {
    // YYYY
    rtn = fourDigit(data.year);
    if (data.month !== undefined) {
      // YYYY-MM
      rtn += '-' + twoDigit(data.month);
      if (data.day !== undefined) {
        // YYYY-MM-DD
        rtn += '-' + twoDigit(data.day);
        if (data.hour !== undefined) {
          // YYYY-MM-DDTHH:mm:SS
          rtn += `T${twoDigit(data.hour)}:${twoDigit(data.minute)}:00`;
          if (data.tzOffset === undefined) {
            // YYYY-MM-DDTHH:mm:SSZ
            rtn += 'Z';
          }
          else {
            // YYYY-MM-DDTHH:mm:SS+/-HH:mm
            rtn +=
              (data.tzOffset > 0 ? '+' : '-') +
                twoDigit(Math.floor(Math.abs(data.tzOffset / 60))) +
                ':' +
                twoDigit(data.tzOffset % 60);
          }
        }
      }
    }
  }
  else if (data.hour !== undefined) {
    // HH:mm
    rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);
  }
  return rtn;
}
/**
 * Converts an 12 hour value to 24 hours.
 */
const convert12HourTo24Hour = (hour, ampm) => {
  if (ampm === undefined) {
    return hour;
  }
  /**
   * If AM and 12am
   * then return 00:00.
   * Otherwise just return
   * the hour since it is
   * already in 24 hour format.
   */
  if (ampm === 'am') {
    if (hour === 12) {
      return 0;
    }
    return hour;
  }
  /**
   * If PM and 12pm
   * just return 12:00
   * since it is already
   * in 24 hour format.
   * Otherwise add 12 hours
   * to the time.
   */
  if (hour === 12) {
    return 12;
  }
  return hour + 12;
};
const getStartOfWeek = (refParts) => {
  const { dayOfWeek } = refParts;
  if (dayOfWeek === null || dayOfWeek === undefined) {
    throw new Error('No day of week provided');
  }
  return subtractDays(refParts, dayOfWeek);
};
const getEndOfWeek = (refParts) => {
  const { dayOfWeek } = refParts;
  if (dayOfWeek === null || dayOfWeek === undefined) {
    throw new Error('No day of week provided');
  }
  return addDays(refParts, 6 - dayOfWeek);
};
const getNextDay = (refParts) => {
  return addDays(refParts, 1);
};
const getPreviousDay = (refParts) => {
  return subtractDays(refParts, 1);
};
const getPreviousWeek = (refParts) => {
  return subtractDays(refParts, 7);
};
const getNextWeek = (refParts) => {
  return addDays(refParts, 7);
};
/**
 * Given datetime parts, subtract
 * numDays from the date.
 * Returns a new DatetimeParts object
 * Currently can only go backward at most 1 month.
 */
const subtractDays = (refParts, numDays) => {
  const { month, day, year } = refParts;
  if (day === null) {
    throw new Error('No day provided');
  }
  const workingParts = {
    month,
    day,
    year,
  };
  workingParts.day = day - numDays;
  /**
   * If wrapping to previous month
   * update days and decrement month
   */
  if (workingParts.day < 1) {
    workingParts.month -= 1;
  }
  /**
   * If moving to previous year, reset
   * month to December and decrement year
   */
  if (workingParts.month < 1) {
    workingParts.month = 12;
    workingParts.year -= 1;
  }
  /**
   * Determine how many days are in the current
   * month
   */
  if (workingParts.day < 1) {
    const daysInMonth = getNumDaysInMonth(workingParts.month, workingParts.year);
    /**
     * Take num days in month and add the
     * number of underflow days. This number will
     * be negative.
     * Example: 1 week before Jan 2, 2021 is
     * December 26, 2021 so:
     * 2 - 7 = -5
     * 31 + (-5) = 26
     */
    workingParts.day = daysInMonth + workingParts.day;
  }
  return workingParts;
};
/**
 * Given datetime parts, add
 * numDays to the date.
 * Returns a new DatetimeParts object
 * Currently can only go forward at most 1 month.
 */
const addDays = (refParts, numDays) => {
  const { month, day, year } = refParts;
  if (day === null) {
    throw new Error('No day provided');
  }
  const workingParts = {
    month,
    day,
    year,
  };
  const daysInMonth = getNumDaysInMonth(month, year);
  workingParts.day = day + numDays;
  /**
   * If wrapping to next month
   * update days and increment month
   */
  if (workingParts.day > daysInMonth) {
    workingParts.day -= daysInMonth;
    workingParts.month += 1;
  }
  /**
   * If moving to next year, reset
   * month to January and increment year
   */
  if (workingParts.month > 12) {
    workingParts.month = 1;
    workingParts.year += 1;
  }
  return workingParts;
};
/**
 * Given DatetimeParts, generate the previous month.
 */
const getPreviousMonth = (refParts) => {
  /**
   * If current month is January, wrap backwards
   *  to December of the previous year.
   */
  const month = refParts.month === 1 ? 12 : refParts.month - 1;
  const year = refParts.month === 1 ? refParts.year - 1 : refParts.year;
  const numDaysInMonth = getNumDaysInMonth(month, year);
  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
  return { month, year, day };
};
/**
 * Given DatetimeParts, generate the next month.
 */
const getNextMonth = (refParts) => {
  /**
   * If current month is December, wrap forwards
   *  to January of the next year.
   */
  const month = refParts.month === 12 ? 1 : refParts.month + 1;
  const year = refParts.month === 12 ? refParts.year + 1 : refParts.year;
  const numDaysInMonth = getNumDaysInMonth(month, year);
  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
  return { month, year, day };
};
const changeYear = (refParts, yearDelta) => {
  const month = refParts.month;
  const year = refParts.year + yearDelta;
  const numDaysInMonth = getNumDaysInMonth(month, year);
  const day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
  return { month, year, day };
};
/**
 * Given DatetimeParts, generate the previous year.
 */
const getPreviousYear = (refParts) => {
  return changeYear(refParts, -1);
};
/**
 * Given DatetimeParts, generate the next year.
 */
const getNextYear = (refParts) => {
  return changeYear(refParts, 1);
};
/**
 * If PM, then internal value should
 * be converted to 24-hr time.
 * Does not apply when public
 * values are already 24-hr time.
 */
const getInternalHourValue = (hour, use24Hour, ampm) => {
  if (use24Hour) {
    return hour;
  }
  return convert12HourTo24Hour(hour, ampm);
};
/**
 * Unless otherwise stated, all month values are
 * 1 indexed instead of the typical 0 index in JS Date.
 * Example:
 *   January = Month 0 when using JS Date
 *   January = Month 1 when using this datetime util
 */
/**
 * Given the current datetime parts and a new AM/PM value
 * calculate what the hour should be in 24-hour time format.
 * Used when toggling the AM/PM segment since we store our hours
 * in 24-hour time format internally.
 */
const calculateHourFromAMPM = (currentParts, newAMPM) => {
  const { ampm: currentAMPM, hour } = currentParts;
  let newHour = hour;
  /**
   * If going from AM --> PM, need to update the
   *
   */
  if (currentAMPM === 'am' && newAMPM === 'pm') {
    newHour = convert12HourTo24Hour(newHour, 'pm');
    /**
     * If going from PM --> AM
     */
  }
  else if (currentAMPM === 'pm' && newAMPM === 'am') {
    newHour = Math.abs(newHour - 12);
  }
  return newHour;
};
/**
 * Updates parts to ensure that month and day
 * values are valid. For days that do not exist,
 * the closest valid day is used.
 */
const validateParts = (parts, minParts, maxParts) => {
  const { month, day, year } = parts;
  const partsCopy = Object.assign({}, parts);
  const numDays = getNumDaysInMonth(month, year);
  /**
   * If the max number of days
   * is greater than the day we want
   * to set, update the DatetimeParts
   * day field to be the max days.
   */
  if (day !== null && numDays < day) {
    partsCopy.day = numDays;
  }
  /**
   * If value is same day as min day,
   * make sure the time value is in bounds.
   */
  if (minParts !== undefined && isSameDay(partsCopy, minParts)) {
    /**
     * If the hour is out of bounds,
     * update both the hour and minute.
     * This is done so that the new time
     * is closest to what the user selected.
     */
    if (partsCopy.hour !== undefined && minParts.hour !== undefined) {
      if (partsCopy.hour < minParts.hour) {
        partsCopy.hour = minParts.hour;
        partsCopy.minute = minParts.minute;
        /**
         * If only the minute is out of bounds,
         * set it to the min minute.
         */
      }
      else if (partsCopy.hour === minParts.hour &&
        partsCopy.minute !== undefined &&
        minParts.minute !== undefined &&
        partsCopy.minute < minParts.minute) {
        partsCopy.minute = minParts.minute;
      }
    }
  }
  /**
   * If value is same day as max day,
   * make sure the time value is in bounds.
   */
  if (maxParts !== undefined && isSameDay(parts, maxParts)) {
    /**
     * If the hour is out of bounds,
     * update both the hour and minute.
     * This is done so that the new time
     * is closest to what the user selected.
     */
    if (partsCopy.hour !== undefined && maxParts.hour !== undefined) {
      if (partsCopy.hour > maxParts.hour) {
        partsCopy.hour = maxParts.hour;
        partsCopy.minute = maxParts.minute;
        /**
         * If only the minute is out of bounds,
         * set it to the max minute.
         */
      }
      else if (partsCopy.hour === maxParts.hour &&
        partsCopy.minute !== undefined &&
        maxParts.minute !== undefined &&
        partsCopy.minute > maxParts.minute) {
        partsCopy.minute = maxParts.minute;
      }
    }
  }
  return partsCopy;
};
/**
 * Returns the closest date to refParts
 * that also meets the constraints of
 * the *Values params.
 * @param refParts The reference date
 * @param monthValues The allowed month values
 * @param dayValues The allowed day (of the month) values
 * @param yearValues The allowed year values
 * @param hourValues The allowed hour values
 * @param minuteValues The allowed minute values
 */
const getClosestValidDate = (refParts, monthValues, dayValues, yearValues, hourValues, minuteValues) => {
  const { hour, minute, day, month, year } = refParts;
  const copyParts = Object.assign(Object.assign({}, refParts), { dayOfWeek: undefined });
  if (monthValues !== undefined) {
    copyParts.month = findClosestValue(month, monthValues);
  }
  // Day is nullable but cannot be undefined
  if (day !== null && dayValues !== undefined) {
    copyParts.day = findClosestValue(day, dayValues);
  }
  if (yearValues !== undefined) {
    copyParts.year = findClosestValue(year, yearValues);
  }
  if (hour !== undefined && hourValues !== undefined) {
    copyParts.hour = findClosestValue(hour, hourValues);
    copyParts.ampm = parseAmPm(copyParts.hour);
  }
  if (minute !== undefined && minuteValues !== undefined) {
    copyParts.minute = findClosestValue(minute, minuteValues);
  }
  return copyParts;
};
/**
 * Finds the value in "values" that is
 * numerically closest to "reference".
 * This function assumes that "values" is
 * already sorted in ascending order.
 * @param reference The reference number to use
 * when finding the closest value
 * @param values The allowed values that will be
 * searched to find the closest value to "reference"
 */
const findClosestValue = (reference, values) => {
  let closestValue = values[0];
  let rank = Math.abs(closestValue - reference);
  for (let i = 1; i < values.length; i++) {
    const value = values[i];
    /**
     * This code prioritizes the first
     * closest result. Given two values
     * with the same distance from reference,
     * this code will prioritize the smaller of
     * the two values.
     */
    const valueRank = Math.abs(value - reference);
    if (valueRank < rank) {
      closestValue = value;
      rank = valueRank;
    }
  }
  return closestValue;
};

const getFormattedDayPeriod = (dayPeriod) => {
  if (dayPeriod === undefined) {
    return '';
  }
  return dayPeriod.toUpperCase();
};
const getLocalizedTime = (locale, refParts, use24Hour) => {
  const timeParts = {
    hour: refParts.hour,
    minute: refParts.minute,
  };
  if (timeParts.hour === undefined || timeParts.minute === undefined) {
    return 'Invalid Time';
  }
  return new Intl.DateTimeFormat(locale, {
    hour: 'numeric',
    minute: 'numeric',
    timeZone: 'UTC',
    /**
     * We use hourCycle here instead of hour12 due to:
     * https://bugs.chromium.org/p/chromium/issues/detail?id=1347316&q=hour12&can=2
     */
    hourCycle: use24Hour ? 'h23' : 'h12',
  }).format(new Date(convertDataToISO(Object.assign(Object.assign({ 
    /**
     * JS uses a simplified ISO 8601 format which allows for
     * date-only formats and date-time formats, but not
     * time-only formats: https://tc39.es/ecma262/#sec-date-time-string-format
     * As a result, developers who only pass a time will get
     * an "Invalid Date" error. To account for this, we make sure that
     * year/day/month values are set when passing to new Date().
     * The Intl.DateTimeFormat call above only uses the hour/minute
     * values, so passing these date values should have no impact
     * on the time output.
     */
    year: 2023, day: 1, month: 1 }, timeParts), { 
    // TODO: FW-1831 will remove the need to manually set the tzOffset to undefined
    tzOffset: undefined }))));
};
/**
 * Adds padding to a time value so
 * that it is always 2 digits.
 */
const addTimePadding = (value) => {
  const valueToString = value.toString();
  if (valueToString.length > 1) {
    return valueToString;
  }
  return `0${valueToString}`;
};
/**
 * Formats 24 hour times so that
 * it always has 2 digits. For
 * 12 hour times it ensures that
 * hour 0 is formatted as '12'.
 */
const getFormattedHour = (hour, use24Hour) => {
  if (use24Hour) {
    return addTimePadding(hour);
  }
  /**
   * If using 12 hour
   * format, make sure hour
   * 0 is formatted as '12'.
   */
  if (hour === 0) {
    return '12';
  }
  return hour.toString();
};
/**
 * Generates an aria-label to be read by screen readers
 * given a local, a date, and whether or not that date is
 * today's date.
 */
const generateDayAriaLabel = (locale, today, refParts) => {
  if (refParts.day === null) {
    return null;
  }
  /**
   * MM/DD/YYYY will return midnight in the user's timezone.
   */
  const date = new Date(`${refParts.month}/${refParts.day}/${refParts.year} GMT+0000`);
  const labelString = new Intl.DateTimeFormat(locale, {
    weekday: 'long',
    month: 'long',
    day: 'numeric',
    timeZone: 'UTC',
  }).format(date);
  /**
   * If date is today, prepend "Today" so screen readers indicate
   * that the date is today.
   */
  return today ? `Today, ${labelString}` : labelString;
};
/**
 * Gets the day of the week, month, and day
 * Used for the header in MD mode.
 */
const getMonthAndDay = (locale, refParts) => {
  const date = new Date(`${refParts.month}/${refParts.day}/${refParts.year} GMT+0000`);
  return new Intl.DateTimeFormat(locale, { weekday: 'short', month: 'short', day: 'numeric', timeZone: 'UTC' }).format(date);
};
/**
 * Given a locale and a date object,
 * return a formatted string that includes
 * the month name and full year.
 * Example: May 2021
 */
const getMonthAndYear = (locale, refParts) => {
  const date = new Date(`${refParts.month}/${refParts.day}/${refParts.year} GMT+0000`);
  return new Intl.DateTimeFormat(locale, { month: 'long', year: 'numeric', timeZone: 'UTC' }).format(date);
};
/**
 * Given a locale and a date object,
 * return a formatted string that includes
 * the short month, numeric day, and full year.
 * Example: Apr 22, 2021
 */
const getMonthDayAndYear = (locale, refParts) => {
  return getLocalizedDateTime(locale, refParts, { month: 'short', day: 'numeric', year: 'numeric' });
};
/**
 * Given a locale and a date object,
 * return a formatted string that includes
 * the numeric day.
 * Note: Some languages will add literal characters
 * to the end. This function removes those literals.
 * Example: 29
 */
const getDay = (locale, refParts) => {
  return getLocalizedDateTimeParts(locale, refParts, { day: 'numeric' }).find((obj) => obj.type === 'day').value;
};
/**
 * Given a locale and a date object,
 * return a formatted string that includes
 * the numeric year.
 * Example: 2022
 */
const getYear = (locale, refParts) => {
  return getLocalizedDateTime(locale, refParts, { year: 'numeric' });
};
const getNormalizedDate = (refParts) => {
  const timeString = refParts.hour !== undefined && refParts.minute !== undefined ? ` ${refParts.hour}:${refParts.minute}` : '';
  return new Date(`${refParts.month}/${refParts.day}/${refParts.year}${timeString} GMT+0000`);
};
/**
 * Given a locale, DatetimeParts, and options
 * format the DatetimeParts according to the options
 * and locale combination. This returns a string. If
 * you want an array of the individual pieces
 * that make up the localized date string, use
 * getLocalizedDateTimeParts.
 */
const getLocalizedDateTime = (locale, refParts, options) => {
  const date = getNormalizedDate(refParts);
  return getDateTimeFormat(locale, options).format(date);
};
/**
 * Given a locale, DatetimeParts, and options
 * format the DatetimeParts according to the options
 * and locale combination. This returns an array of
 * each piece of the date.
 */
const getLocalizedDateTimeParts = (locale, refParts, options) => {
  const date = getNormalizedDate(refParts);
  return getDateTimeFormat(locale, options).formatToParts(date);
};
/**
 * Wrapper function for Intl.DateTimeFormat.
 * Allows developers to apply an allowed format to DatetimeParts.
 * This function also has built in safeguards for older browser bugs
 * with Intl.DateTimeFormat.
 */
const getDateTimeFormat = (locale, options) => {
  return new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, options), { timeZone: 'UTC' }));
};
/**
 * Gets a localized version of "Today"
 * Falls back to "Today" in English for
 * browsers that do not support RelativeTimeFormat.
 */
const getTodayLabel = (locale) => {
  if ('RelativeTimeFormat' in Intl) {
    const label = new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(0, 'day');
    return label.charAt(0).toUpperCase() + label.slice(1);
  }
  else {
    return 'Today';
  }
};
/**
 * When calling toISOString(), the browser
 * will convert the date to UTC time by either adding
 * or subtracting the time zone offset.
 * To work around this, we need to either add
 * or subtract the time zone offset to the Date
 * object prior to calling toISOString().
 * This allows us to get an ISO string
 * that is in the user's time zone.
 *
 * Example:
 * Time zone offset is 240
 * Meaning: The browser needs to add 240 minutes
 * to the Date object to get UTC time.
 * What Ionic does: We subtract 240 minutes
 * from the Date object. The browser then adds
 * 240 minutes in toISOString(). The result
 * is a time that is in the user's time zone
 * and not UTC.
 *
 * Note: Some timezones include minute adjustments
 * such as 30 or 45 minutes. This is why we use setMinutes
 * instead of setHours.
 * Example: India Standard Time
 * Timezone offset: -330 = -5.5 hours.
 *
 * List of timezones with 30 and 45 minute timezones:
 * https://www.timeanddate.com/time/time-zones-interesting.html
 */
const removeDateTzOffset = (date) => {
  const tzOffset = date.getTimezoneOffset();
  date.setMinutes(date.getMinutes() - tzOffset);
  return date;
};
const DATE_AM = removeDateTzOffset(new Date('2022T01:00'));
const DATE_PM = removeDateTzOffset(new Date('2022T13:00'));
/**
 * Formats the locale's string representation of the day period (am/pm) for a given
 * ref parts day period.
 *
 * @param locale The locale to format the day period in.
 * @param value The date string, in ISO format.
 * @returns The localized day period (am/pm) representation of the given value.
 */
const getLocalizedDayPeriod = (locale, dayPeriod) => {
  const date = dayPeriod === 'am' ? DATE_AM : DATE_PM;
  const localizedDayPeriod = new Intl.DateTimeFormat(locale, {
    hour: 'numeric',
    timeZone: 'UTC',
  })
    .formatToParts(date)
    .find((part) => part.type === 'dayPeriod');
  if (localizedDayPeriod) {
    return localizedDayPeriod.value;
  }
  return getFormattedDayPeriod(dayPeriod);
};
/**
 * Formats the datetime's value to a string, for use in the native input.
 *
 * @param value The value to format, either an ISO string or an array thereof.
 */
const formatValue = (value) => {
  return Array.isArray(value) ? value.join(',') : value;
};

/**
 * Returns the current date as
 * an ISO string in the user's
 * time zone.
 */
const getToday = () => {
  /**
   * ion-datetime intentionally does not
   * parse time zones/do automatic time zone
   * conversion when accepting user input.
   * However when we get today's date string,
   * we want it formatted relative to the user's
   * time zone.
   *
   * When calling toISOString(), the browser
   * will convert the date to UTC time by either adding
   * or subtracting the time zone offset.
   * To work around this, we need to either add
   * or subtract the time zone offset to the Date
   * object prior to calling toISOString().
   * This allows us to get an ISO string
   * that is in the user's time zone.
   */
  return removeDateTzOffset(new Date()).toISOString();
};
const minutes = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
];
const hour12 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
const hour23 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
/**
 * Given a locale and a mode,
 * return an array with formatted days
 * of the week. iOS should display days
 * such as "Mon" or "Tue".
 * MD should display days such as "M"
 * or "T".
 */
const getDaysOfWeek = (locale, mode, firstDayOfWeek = 0) => {
  /**
   * Nov 1st, 2020 starts on a Sunday.
   * ion-datetime assumes weeks start on Sunday,
   * but is configurable via `firstDayOfWeek`.
   */
  const weekdayFormat = mode === 'ios' ? 'short' : 'narrow';
  const intl = new Intl.DateTimeFormat(locale, { weekday: weekdayFormat });
  const startDate = new Date('11/01/2020');
  const daysOfWeek = [];
  /**
   * For each day of the week,
   * get the day name.
   */
  for (let i = firstDayOfWeek; i < firstDayOfWeek + 7; i++) {
    const currentDate = new Date(startDate);
    currentDate.setDate(currentDate.getDate() + i);
    daysOfWeek.push(intl.format(currentDate));
  }
  return daysOfWeek;
};
/**
 * Returns an array containing all of the
 * days in a month for a given year. Values are
 * aligned with a week calendar starting on
 * the firstDayOfWeek value (Sunday by default)
 * using null values.
 */
const getDaysOfMonth = (month, year, firstDayOfWeek) => {
  const numDays = getNumDaysInMonth(month, year);
  const firstOfMonth = new Date(`${month}/1/${year}`).getDay();
  /**
   * To get the first day of the month aligned on the correct
   * day of the week, we need to determine how many "filler" days
   * to generate. These filler days as empty/disabled buttons
   * that fill the space of the days of the week before the first
   * of the month.
   *
   * There are two cases here:
   *
   * 1. If firstOfMonth = 4, firstDayOfWeek = 0 then the offset
   * is (4 - (0 + 1)) = 3. Since the offset loop goes from 0 to 3 inclusive,
   * this will generate 4 filler days (0, 1, 2, 3), and then day of week 4 will have
   * the first day of the month.
   *
   * 2. If firstOfMonth = 2, firstDayOfWeek = 4 then the offset
   * is (6 - (4 - 2)) = 4. Since the offset loop goes from 0 to 4 inclusive,
   * this will generate 5 filler days (0, 1, 2, 3, 4), and then day of week 5 will have
   * the first day of the month.
   */
  const offset = firstOfMonth >= firstDayOfWeek ? firstOfMonth - (firstDayOfWeek + 1) : 6 - (firstDayOfWeek - firstOfMonth);
  let days = [];
  for (let i = 1; i <= numDays; i++) {
    days.push({ day: i, dayOfWeek: (offset + i) % 7 });
  }
  for (let i = 0; i <= offset; i++) {
    days = [{ day: null, dayOfWeek: null }, ...days];
  }
  return days;
};
/**
 * Given a local, reference datetime parts and option
 * max/min bound datetime parts, calculate the acceptable
 * hour and minute values according to the bounds and locale.
 */
const generateTime = (refParts, hourCycle = 'h12', minParts, maxParts, hourValues, minuteValues) => {
  const use24Hour = hourCycle === 'h23';
  let processedHours = use24Hour ? hour23 : hour12;
  let processedMinutes = minutes;
  let isAMAllowed = true;
  let isPMAllowed = true;
  if (hourValues) {
    processedHours = processedHours.filter((hour) => hourValues.includes(hour));
  }
  if (minuteValues) {
    processedMinutes = processedMinutes.filter((minute) => minuteValues.includes(minute));
  }
  if (minParts) {
    /**
     * If ref day is the same as the
     * minimum allowed day, filter hour/minute
     * values according to min hour and minute.
     */
    if (isSameDay(refParts, minParts)) {
      /**
       * Users may not always set the hour/minute for
       * min value (i.e. 2021-06-02) so we should allow
       * all hours/minutes in that case.
       */
      if (minParts.hour !== undefined) {
        processedHours = processedHours.filter((hour) => {
          const convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;
          return (use24Hour ? hour : convertedHour) >= minParts.hour;
        });
        isAMAllowed = minParts.hour < 13;
      }
      if (minParts.minute !== undefined) {
        /**
         * The minimum minute range should not be enforced when
         * the hour is greater than the min hour.
         *
         * For example with a minimum range of 09:30, users
         * should be able to select 10:00-10:29 and beyond.
         */
        let isPastMinHour = false;
        if (minParts.hour !== undefined && refParts.hour !== undefined) {
          if (refParts.hour > minParts.hour) {
            isPastMinHour = true;
          }
        }
        processedMinutes = processedMinutes.filter((minute) => {
          if (isPastMinHour) {
            return true;
          }
          return minute >= minParts.minute;
        });
      }
      /**
       * If ref day is before minimum
       * day do not render any hours/minute values
       */
    }
    else if (isBefore(refParts, minParts)) {
      processedHours = [];
      processedMinutes = [];
      isAMAllowed = isPMAllowed = false;
    }
  }
  if (maxParts) {
    /**
     * If ref day is the same as the
     * maximum allowed day, filter hour/minute
     * values according to max hour and minute.
     */
    if (isSameDay(refParts, maxParts)) {
      /**
       * Users may not always set the hour/minute for
       * max value (i.e. 2021-06-02) so we should allow
       * all hours/minutes in that case.
       */
      if (maxParts.hour !== undefined) {
        processedHours = processedHours.filter((hour) => {
          const convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;
          return (use24Hour ? hour : convertedHour) <= maxParts.hour;
        });
        isPMAllowed = maxParts.hour >= 12;
      }
      if (maxParts.minute !== undefined && refParts.hour === maxParts.hour) {
        // The available minutes should only be filtered when the hour is the same as the max hour.
        // For example if the max hour is 10:30 and the current hour is 10:00,
        // users should be able to select 00-30 minutes.
        // If the current hour is 09:00, users should be able to select 00-60 minutes.
        processedMinutes = processedMinutes.filter((minute) => minute <= maxParts.minute);
      }
      /**
       * If ref day is after minimum
       * day do not render any hours/minute values
       */
    }
    else if (isAfter(refParts, maxParts)) {
      processedHours = [];
      processedMinutes = [];
      isAMAllowed = isPMAllowed = false;
    }
  }
  return {
    hours: processedHours,
    minutes: processedMinutes,
    am: isAMAllowed,
    pm: isPMAllowed,
  };
};
/**
 * Given DatetimeParts, generate the previous,
 * current, and and next months.
 */
const generateMonths = (refParts) => {
  return [
    getPreviousMonth(refParts),
    { month: refParts.month, year: refParts.year, day: refParts.day },
    getNextMonth(refParts),
  ];
};
const getMonthColumnData = (locale, refParts, minParts, maxParts, monthValues, formatOptions = {
  month: 'long',
}) => {
  const { year } = refParts;
  const months = [];
  if (monthValues !== undefined) {
    let processedMonths = monthValues;
    if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.month) !== undefined) {
      processedMonths = processedMonths.filter((month) => month <= maxParts.month);
    }
    if ((minParts === null || minParts === void 0 ? void 0 : minParts.month) !== undefined) {
      processedMonths = processedMonths.filter((month) => month >= minParts.month);
    }
    processedMonths.forEach((processedMonth) => {
      const date = new Date(`${processedMonth}/1/${year} GMT+0000`);
      const monthString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), { timeZone: 'UTC' })).format(date);
      months.push({ text: monthString, value: processedMonth });
    });
  }
  else {
    const maxMonth = maxParts && maxParts.year === year ? maxParts.month : 12;
    const minMonth = minParts && minParts.year === year ? minParts.month : 1;
    for (let i = minMonth; i <= maxMonth; i++) {
      /**
       *
       * There is a bug on iOS 14 where
       * Intl.DateTimeFormat takes into account
       * the local timezone offset when formatting dates.
       *
       * Forcing the timezone to 'UTC' fixes the issue. However,
       * we should keep this workaround as it is safer. In the event
       * this breaks in another browser, we will not be impacted
       * because all dates will be interpreted in UTC.
       *
       * Example:
       * new Intl.DateTimeFormat('en-US', { month: 'long' }).format(new Date('Sat Apr 01 2006 00:00:00 GMT-0400 (EDT)')) // "March"
       * new Intl.DateTimeFormat('en-US', { month: 'long', timeZone: 'UTC' }).format(new Date('Sat Apr 01 2006 00:00:00 GMT-0400 (EDT)')) // "April"
       *
       * In certain timezones, iOS 14 shows the wrong
       * date for .toUTCString(). To combat this, we
       * force all of the timezones to GMT+0000 (UTC).
       *
       * Example:
       * Time Zone: Central European Standard Time
       * new Date('1/1/1992').toUTCString() // "Tue, 31 Dec 1991 23:00:00 GMT"
       * new Date('1/1/1992 GMT+0000').toUTCString() // "Wed, 01 Jan 1992 00:00:00 GMT"
       */
      const date = new Date(`${i}/1/${year} GMT+0000`);
      const monthString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), { timeZone: 'UTC' })).format(date);
      months.push({ text: monthString, value: i });
    }
  }
  return months;
};
/**
 * Returns information regarding
 * selectable dates (i.e 1st, 2nd, 3rd, etc)
 * within a reference month.
 * @param locale The locale to format the date with
 * @param refParts The reference month/year to generate dates for
 * @param minParts The minimum bound on the date that can be returned
 * @param maxParts The maximum bound on the date that can be returned
 * @param dayValues The allowed date values
 * @returns Date data to be used in ion-picker-column-internal
 */
const getDayColumnData = (locale, refParts, minParts, maxParts, dayValues, formatOptions = {
  day: 'numeric',
}) => {
  const { month, year } = refParts;
  const days = [];
  /**
   * If we have max/min bounds that in the same
   * month/year as the refParts, we should
   * use the define day as the max/min day.
   * Otherwise, fallback to the max/min days in a month.
   */
  const numDaysInMonth = getNumDaysInMonth(month, year);
  const maxDay = (maxParts === null || maxParts === void 0 ? void 0 : maxParts.day) !== null && (maxParts === null || maxParts === void 0 ? void 0 : maxParts.day) !== undefined && maxParts.year === year && maxParts.month === month
    ? maxParts.day
    : numDaysInMonth;
  const minDay = (minParts === null || minParts === void 0 ? void 0 : minParts.day) !== null && (minParts === null || minParts === void 0 ? void 0 : minParts.day) !== undefined && minParts.year === year && minParts.month === month
    ? minParts.day
    : 1;
  if (dayValues !== undefined) {
    let processedDays = dayValues;
    processedDays = processedDays.filter((day) => day >= minDay && day <= maxDay);
    processedDays.forEach((processedDay) => {
      const date = new Date(`${month}/${processedDay}/${year} GMT+0000`);
      const dayString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), { timeZone: 'UTC' })).format(date);
      days.push({ text: dayString, value: processedDay });
    });
  }
  else {
    for (let i = minDay; i <= maxDay; i++) {
      const date = new Date(`${month}/${i}/${year} GMT+0000`);
      const dayString = new Intl.DateTimeFormat(locale, Object.assign(Object.assign({}, formatOptions), { timeZone: 'UTC' })).format(date);
      days.push({ text: dayString, value: i });
    }
  }
  return days;
};
const getYearColumnData = (locale, refParts, minParts, maxParts, yearValues) => {
  var _a, _b;
  let processedYears = [];
  if (yearValues !== undefined) {
    processedYears = yearValues;
    if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) !== undefined) {
      processedYears = processedYears.filter((year) => year <= maxParts.year);
    }
    if ((minParts === null || minParts === void 0 ? void 0 : minParts.year) !== undefined) {
      processedYears = processedYears.filter((year) => year >= minParts.year);
    }
  }
  else {
    const { year } = refParts;
    const maxYear = (_a = maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) !== null && _a !== void 0 ? _a : year;
    const minYear = (_b = minParts === null || minParts === void 0 ? void 0 : minParts.year) !== null && _b !== void 0 ? _b : year - 100;
    for (let i = maxYear; i >= minYear; i--) {
      processedYears.push(i);
    }
  }
  return processedYears.map((year) => ({
    text: getYear(locale, { year, month: refParts.month, day: refParts.day }),
    value: year,
  }));
};
/**
 * Given a starting date and an upper bound,
 * this functions returns an array of all
 * month objects in that range.
 */
const getAllMonthsInRange = (currentParts, maxParts) => {
  if (currentParts.month === maxParts.month && currentParts.year === maxParts.year) {
    return [currentParts];
  }
  return [currentParts, ...getAllMonthsInRange(getNextMonth(currentParts), maxParts)];
};
/**
 * Creates and returns picker items
 * that represent the days in a month.
 * Example: "Thu, Jun 2"
 */
const getCombinedDateColumnData = (locale, todayParts, minParts, maxParts, dayValues, monthValues) => {
  let items = [];
  let parts = [];
  /**
   * Get all month objects from the min date
   * to the max date. Note: Do not use getMonthColumnData
   * as that function only generates dates within a
   * single year.
   */
  let months = getAllMonthsInRange(minParts, maxParts);
  /**
   * Filter out any disallowed month values.
   */
  if (monthValues) {
    months = months.filter(({ month }) => monthValues.includes(month));
  }
  /**
   * Get all of the days in the month.
   * From there, generate an array where
   * each item has the month, date, and day
   * of work as the text.
   */
  months.forEach((monthObject) => {
    const referenceMonth = { month: monthObject.month, day: null, year: monthObject.year };
    const monthDays = getDayColumnData(locale, referenceMonth, minParts, maxParts, dayValues, {
      month: 'short',
      day: 'numeric',
      weekday: 'short',
    });
    const dateParts = [];
    const dateColumnItems = [];
    monthDays.forEach((dayObject) => {
      const isToday = isSameDay(Object.assign(Object.assign({}, referenceMonth), { day: dayObject.value }), todayParts);
      /**
       * Today's date should read as "Today" (localized)
       * not the actual date string
       */
      dateColumnItems.push({
        text: isToday ? getTodayLabel(locale) : dayObject.text,
        value: `${referenceMonth.year}-${referenceMonth.month}-${dayObject.value}`,
      });
      /**
       * When selecting a date in the wheel picker
       * we need access to the raw datetime parts data.
       * The picker column only accepts values of
       * type string or number, so we need to return
       * two sets of data: A data set to be passed
       * to the picker column, and a data set to
       * be used to reference the raw data when
       * updating the picker column value.
       */
      dateParts.push({
        month: referenceMonth.month,
        year: referenceMonth.year,
        day: dayObject.value,
      });
    });
    parts = [...parts, ...dateParts];
    items = [...items, ...dateColumnItems];
  });
  return {
    parts,
    items,
  };
};
const getTimeColumnsData = (locale, refParts, hourCycle, minParts, maxParts, allowedHourValues, allowedMinuteValues) => {
  const use24Hour = is24Hour(locale, hourCycle);
  const { hours, minutes, am, pm } = generateTime(refParts, use24Hour ? 'h23' : 'h12', minParts, maxParts, allowedHourValues, allowedMinuteValues);
  const hoursItems = hours.map((hour) => {
    return {
      text: getFormattedHour(hour, use24Hour),
      value: getInternalHourValue(hour, use24Hour, refParts.ampm),
    };
  });
  const minutesItems = minutes.map((minute) => {
    return {
      text: addTimePadding(minute),
      value: minute,
    };
  });
  const dayPeriodItems = [];
  if (am && !use24Hour) {
    dayPeriodItems.push({
      text: getLocalizedDayPeriod(locale, 'am'),
      value: 'am',
    });
  }
  if (pm && !use24Hour) {
    dayPeriodItems.push({
      text: getLocalizedDayPeriod(locale, 'pm'),
      value: 'pm',
    });
  }
  return {
    minutesData: minutesItems,
    hoursData: hoursItems,
    dayPeriodData: dayPeriodItems,
  };
};




/***/ }),

/***/ 75057:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/index-c4b11676.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ printRequiredElementError),
/* harmony export */   "b": () => (/* binding */ printIonError),
/* harmony export */   "p": () => (/* binding */ printIonWarning)
/* harmony export */ });
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
/**
 * Logs a warning to the console with an Ionic prefix
 * to indicate the library that is warning the developer.
 *
 * @param message - The string message to be logged to the console.
 */
const printIonWarning = (message, ...params) => {
  return console.warn(`[Ionic Warning]: ${message}`, ...params);
};
/*
 * Logs an error to the console with an Ionic prefix
 * to indicate the library that is warning the developer.
 *
 * @param message - The string message to be logged to the console.
 * @param params - Additional arguments to supply to the console.error.
 */
const printIonError = (message, ...params) => {
  return console.error(`[Ionic Error]: ${message}`, ...params);
};
/**
 * Prints an error informing developers that an implementation requires an element to be used
 * within a specific selector.
 *
 * @param el The web component element this is requiring the element.
 * @param targetSelectors The selector or selectors that were not found.
 */
const printRequiredElementError = (el, ...targetSelectors) => {
  return console.error(`<${el.tagName.toLowerCase()}> must be used inside ${targetSelectors.join(' or ')}.`);
};




/***/ }),

/***/ 17548:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createColorClasses),
/* harmony export */   "g": () => (/* binding */ getClassMap),
/* harmony export */   "h": () => (/* binding */ hostContext),
/* harmony export */   "o": () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var F_GIT_hypertask_ionic2_hypertask_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */ 62783);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */


const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};

const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }

  return [];
};

const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};

const SCHEME = /^[a-z][a-z0-9+\-.]*:/;

const openURL = /*#__PURE__*/function () {
  var _ref = (0,F_GIT_hypertask_ionic2_hypertask_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');

      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }

        return router.push(url, direction, animation);
      }
    }

    return false;
  });

  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();



/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1ub2RlX21vZHVsZXNfaW9uaWNfY29yZV9kaXN0X2VzbV9kYXRhLWNhZjM4ZGYwX2pzLW5vZGVfbW9kdWxlc19pb25pY19jb3JlX2Rpc3RfZXNtX3RoLWQzYWI4ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUMyRDs7QUFFM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0scURBQWU7QUFDckIsZ0JBQWdCLG9CQUFvQjtBQUNwQyxnQkFBZ0Isb0JBQW9CO0FBQ3BDLGtCQUFrQixzQkFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQkFBaUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsaUJBQWlCO0FBQ25FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU0sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFO0FBQzNIO0FBQ0EsMkJBQTJCLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsT0FBTztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpQ0FBaUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUNBQWlDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0IsR0FBRyxzQkFBc0I7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxtQkFBbUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsbUJBQW1CO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDBCQUEwQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxjQUFjLGlCQUFpQjtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELGlCQUFpQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsd0JBQXdCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix3QkFBd0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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R0pILE1BSEksQ0FHSUMsQ0FBRCxJQUFPQSxDQUFDLEtBQUssRUFIaEIsQ0FBUDtBQUlEOztBQUNELFNBQU8sRUFBUDtBQUNELENBVEQ7O0FBVUEsTUFBTUcsV0FBVyxHQUFJVixPQUFELElBQWE7QUFDL0IsUUFBTVEsR0FBRyxHQUFHLEVBQVo7QUFDQVQsRUFBQUEsWUFBWSxDQUFDQyxPQUFELENBQVosQ0FBc0JXLE9BQXRCLENBQStCSixDQUFELElBQVFDLEdBQUcsQ0FBQ0QsQ0FBRCxDQUFILEdBQVMsSUFBL0M7QUFDQSxTQUFPQyxHQUFQO0FBQ0QsQ0FKRDs7QUFLQSxNQUFNSSxNQUFNLEdBQUcsc0JBQWY7O0FBQ0EsTUFBTUMsT0FBTztBQUFBLGtKQUFHLFdBQU9DLEdBQVAsRUFBWUMsRUFBWixFQUFnQkMsU0FBaEIsRUFBMkJDLFNBQTNCLEVBQXlDO0FBQ3ZELFFBQUlILEdBQUcsSUFBSSxJQUFQLElBQWVBLEdBQUcsQ0FBQyxDQUFELENBQUgsS0FBVyxHQUExQixJQUFpQyxDQUFDRixNQUFNLENBQUNNLElBQVAsQ0FBWUosR0FBWixDQUF0QyxFQUF3RDtBQUN0RCxZQUFNSyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixZQUF2QixDQUFmOztBQUNBLFVBQUlGLE1BQUosRUFBWTtBQUNWLFlBQUlKLEVBQUUsSUFBSSxJQUFWLEVBQWdCO0FBQ2RBLFVBQUFBLEVBQUUsQ0FBQ08sY0FBSDtBQUNEOztBQUNELGVBQU9ILE1BQU0sQ0FBQ0ksSUFBUCxDQUFZVCxHQUFaLEVBQWlCRSxTQUFqQixFQUE0QkMsU0FBNUIsQ0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsV0FBTyxLQUFQO0FBQ0QsR0FYWTs7QUFBQSxrQkFBUEosT0FBTztBQUFBO0FBQUE7QUFBQSxHQUFiIiwic291cmNlcyI6WyIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS9kYXRhLWNhZjM4ZGYwLmpzIiwiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vaW5kZXgtYzRiMTE2NzYuanMiLCIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS90aGVtZS03NjcwMzQxYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgcCBhcyBwcmludElvbldhcm5pbmcgfSBmcm9tICcuL2luZGV4LWM0YjExNjc2LmpzJztcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNlbGVjdGVkIGRheSBpcyBlcXVhbCB0byB0aGUgcmVmZXJlbmNlIGRheVxuICovXG5jb25zdCBpc1NhbWVEYXkgPSAoYmFzZVBhcnRzLCBjb21wYXJlUGFydHMpID0+IHtcbiAgcmV0dXJuIChiYXNlUGFydHMubW9udGggPT09IGNvbXBhcmVQYXJ0cy5tb250aCAmJiBiYXNlUGFydHMuZGF5ID09PSBjb21wYXJlUGFydHMuZGF5ICYmIGJhc2VQYXJ0cy55ZWFyID09PSBjb21wYXJlUGFydHMueWVhcik7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaXMgdGhlIHNlbGVjdGVkIGRheSBpcyBiZWZvcmUgdGhlIHJlZmVyZW5jZSBkYXkuXG4gKi9cbmNvbnN0IGlzQmVmb3JlID0gKGJhc2VQYXJ0cywgY29tcGFyZVBhcnRzKSA9PiB7XG4gIHJldHVybiAhIShiYXNlUGFydHMueWVhciA8IGNvbXBhcmVQYXJ0cy55ZWFyIHx8XG4gICAgKGJhc2VQYXJ0cy55ZWFyID09PSBjb21wYXJlUGFydHMueWVhciAmJiBiYXNlUGFydHMubW9udGggPCBjb21wYXJlUGFydHMubW9udGgpIHx8XG4gICAgKGJhc2VQYXJ0cy55ZWFyID09PSBjb21wYXJlUGFydHMueWVhciAmJlxuICAgICAgYmFzZVBhcnRzLm1vbnRoID09PSBjb21wYXJlUGFydHMubW9udGggJiZcbiAgICAgIGJhc2VQYXJ0cy5kYXkgIT09IG51bGwgJiZcbiAgICAgIGJhc2VQYXJ0cy5kYXkgPCBjb21wYXJlUGFydHMuZGF5KSk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaXMgdGhlIHNlbGVjdGVkIGRheSBpcyBhZnRlciB0aGUgcmVmZXJlbmNlIGRheS5cbiAqL1xuY29uc3QgaXNBZnRlciA9IChiYXNlUGFydHMsIGNvbXBhcmVQYXJ0cykgPT4ge1xuICByZXR1cm4gISEoYmFzZVBhcnRzLnllYXIgPiBjb21wYXJlUGFydHMueWVhciB8fFxuICAgIChiYXNlUGFydHMueWVhciA9PT0gY29tcGFyZVBhcnRzLnllYXIgJiYgYmFzZVBhcnRzLm1vbnRoID4gY29tcGFyZVBhcnRzLm1vbnRoKSB8fFxuICAgIChiYXNlUGFydHMueWVhciA9PT0gY29tcGFyZVBhcnRzLnllYXIgJiZcbiAgICAgIGJhc2VQYXJ0cy5tb250aCA9PT0gY29tcGFyZVBhcnRzLm1vbnRoICYmXG4gICAgICBiYXNlUGFydHMuZGF5ICE9PSBudWxsICYmXG4gICAgICBiYXNlUGFydHMuZGF5ID4gY29tcGFyZVBhcnRzLmRheSkpO1xufTtcbmNvbnN0IHdhcm5JZlZhbHVlT3V0T2ZCb3VuZHMgPSAodmFsdWUsIG1pbiwgbWF4KSA9PiB7XG4gIGNvbnN0IHZhbHVlQXJyYXkgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgZm9yIChjb25zdCB2YWwgb2YgdmFsdWVBcnJheSkge1xuICAgIGlmICgobWluICE9PSB1bmRlZmluZWQgJiYgaXNCZWZvcmUodmFsLCBtaW4pKSB8fCAobWF4ICE9PSB1bmRlZmluZWQgJiYgaXNBZnRlcih2YWwsIG1heCkpKSB7XG4gICAgICBwcmludElvbldhcm5pbmcoJ1RoZSB2YWx1ZSBwcm92aWRlZCB0byBpb24tZGF0ZXRpbWUgaXMgb3V0IG9mIGJvdW5kcy5cXG5cXG4nICtcbiAgICAgICAgYE1pbjogJHtKU09OLnN0cmluZ2lmeShtaW4pfVxcbmAgK1xuICAgICAgICBgTWF4OiAke0pTT04uc3RyaW5naWZ5KG1heCl9XFxuYCArXG4gICAgICAgIGBWYWx1ZTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBnaXZlbiB5ZWFyIGlzIGFcbiAqIGxlYXAgeWVhci4gUmV0dXJucyBgdHJ1ZWAgaWYgeWVhclxuICogaXMgYSBsZWFwIHllYXIuIFJldHVybnMgYGZhbHNlYFxuICogb3RoZXJ3aXNlLlxuICovXG5jb25zdCBpc0xlYXBZZWFyID0gKHllYXIpID0+IHtcbiAgcmV0dXJuICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwO1xufTtcbmNvbnN0IGlzMjRIb3VyID0gKGxvY2FsZSwgaG91ckN5Y2xlKSA9PiB7XG4gIC8qKlxuICAgKiBJZiBkZXZlbG9wZXIgaGFzIGV4cGxpY2l0bHkgZW5hYmxlZCBoMjMgdGltZVxuICAgKiB0aGVuIHJldHVybiBlYXJseSBhbmQgZG8gbm90IGxvb2sgYXQgdGhlIHN5c3RlbSBkZWZhdWx0LlxuICAgKi9cbiAgaWYgKGhvdXJDeWNsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhvdXJDeWNsZSA9PT0gJ2gyMyc7XG4gIH1cbiAgLyoqXG4gICAqIElmIGhvdXJDeWNsZSB3YXMgbm90IHNwZWNpZmllZCwgY2hlY2sgdGhlIGxvY2FsZVxuICAgKiB0aGF0IGlzIHNldCBvbiB0aGUgdXNlcidzIGRldmljZS4gV2UgZmlyc3QgY2hlY2sgdGhlXG4gICAqIEludGwuRGF0ZVRpbWVGb3JtYXQgaG91ckN5Y2xlIG9wdGlvbiBhcyBkZXZlbG9wZXJzIGNhbiBlbmNvZGUgdGhpc1xuICAgKiBvcHRpb24gaW50byB0aGUgbG9jYWxlIHN0cmluZy4gRXhhbXBsZTogYGVuLVVTLXUtaGMtaDIzYFxuICAgKi9cbiAgY29uc3QgZm9ybWF0dGVkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCB7IGhvdXI6ICdudW1lcmljJyB9KTtcbiAgY29uc3Qgb3B0aW9ucyA9IGZvcm1hdHRlZC5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgaWYgKG9wdGlvbnMuaG91ckN5Y2xlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5ob3VyQ3ljbGUgPT09ICdoMjMnO1xuICB9XG4gIC8qKlxuICAgKiBJZiBob3VyQ3ljbGUgaXMgbm90IHNwZWNpZmllZCAoZWl0aGVyIHRocm91Z2ggbGFja1xuICAgKiBvZiBicm93c2VyIHN1cHBvcnQgb3IgbG9jYWxlIGluZm9ybWF0aW9uKSB0aGVuIGZhbGxcbiAgICogYmFjayB0byB0aGlzIHNsb3dlciBob3VyQ3ljbGUgY2hlY2suXG4gICAqL1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoJzUvMTgvMjAyMSAwMDowMCcpO1xuICBjb25zdCBwYXJ0cyA9IGZvcm1hdHRlZC5mb3JtYXRUb1BhcnRzKGRhdGUpO1xuICBjb25zdCBob3VyID0gcGFydHMuZmluZCgocCkgPT4gcC50eXBlID09PSAnaG91cicpO1xuICBpZiAoIWhvdXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0hvdXIgdmFsdWUgbm90IGZvdW5kIGZyb20gRGF0ZVRpbWVGb3JtYXQnKTtcbiAgfVxuICByZXR1cm4gaG91ci52YWx1ZSA9PT0gJzAwJztcbn07XG4vKipcbiAqIEdpdmVuIGEgZGF0ZSBvYmplY3QsIHJldHVybnMgdGhlIG51bWJlclxuICogb2YgZGF5cyBpbiB0aGF0IG1vbnRoLlxuICogTW9udGggdmFsdWUgYmVnaW4gYXQgMSwgbm90IDAuXG4gKiBpLmUuIEphbnVhcnkgPSBtb250aCAxLlxuICovXG5jb25zdCBnZXROdW1EYXlzSW5Nb250aCA9IChtb250aCwgeWVhcikgPT4ge1xuICByZXR1cm4gbW9udGggPT09IDQgfHwgbW9udGggPT09IDYgfHwgbW9udGggPT09IDkgfHwgbW9udGggPT09IDExXG4gICAgPyAzMFxuICAgIDogbW9udGggPT09IDJcbiAgICAgID8gaXNMZWFwWWVhcih5ZWFyKVxuICAgICAgICA/IDI5XG4gICAgICAgIDogMjhcbiAgICAgIDogMzE7XG59O1xuLyoqXG4gKiBDZXJ0YWluIGxvY2FsZXMgZGlzcGxheSBtb250aCB0aGVuIHllYXIgd2hpbGVcbiAqIG90aGVycyBkaXNwbGF5IHllYXIgdGhlbiBtb250aC5cbiAqIFdlIGNhbiB1c2UgSW50bC5EYXRlVGltZUZvcm1hdCB0byBkZXRlcm1pbmVcbiAqIHRoZSBvcmRlcmluZyBmb3IgZWFjaCBsb2NhbGUuXG4gKiBUaGUgZm9ybWF0T3B0aW9ucyBwYXJhbSBjYW4gYmUgdXNlZCB0byBjdXN0b21pemVcbiAqIHdoaWNoIHBpZWNlcyBvZiBhIGRhdGUgdG8gY29tcGFyZSBhZ2FpbnN0IHRoZSBtb250aFxuICogd2l0aC4gRm9yIGV4YW1wbGUsIHNvbWUgbG9jYWxlcyByZW5kZXIgZGQvbW0veXl5eVxuICogd2hpbGUgb3RoZXJzIHJlbmRlciBtbS9kZC95eXl5LiBUaGlzIGZ1bmN0aW9uIGNhbiBiZVxuICogdXNlZCBmb3IgdmFyaWF0aW9ucyBvZiB0aGUgc2FtZSBcIm1vbnRoIGZpcnN0XCIgY2hlY2suXG4gKi9cbmNvbnN0IGlzTW9udGhGaXJzdExvY2FsZSA9IChsb2NhbGUsIGZvcm1hdE9wdGlvbnMgPSB7XG4gIG1vbnRoOiAnbnVtZXJpYycsXG4gIHllYXI6ICdudW1lcmljJyxcbn0pID0+IHtcbiAgLyoqXG4gICAqIEJ5IHNldHRpbmcgbW9udGggYW5kIHllYXIgd2UgZ3VhcmFudGVlIHRoYXQgb25seVxuICAgKiBtb250aCwgeWVhciwgYW5kIGxpdGVyYWwgKHNsYXNoZXMgJy8nLCBmb3IgZXhhbXBsZSlcbiAgICogdmFsdWVzIGFyZSBpbmNsdWRlZCBpbiB0aGUgZm9ybWF0VG9QYXJ0cyByZXN1bHRzLlxuICAgKlxuICAgKiBUaGUgb3JkZXJpbmcgb2YgdGhlIHBhcnRzIHdpbGwgYmUgZGV0ZXJtaW5lZCBieVxuICAgKiB0aGUgbG9jYWxlLiBTbyBpZiB0aGUgbW9udGggaXMgdGhlIGZpcnN0IHZhbHVlLFxuICAgKiB0aGVuIHdlIGtub3cgbW9udGggc2hvdWxkIGJlIHNob3duIGZpcnN0LiBJZiB0aGVcbiAgICogeWVhciBpcyB0aGUgZmlyc3QgdmFsdWUsIHRoZW4gd2Uga25vdyB5ZWFyIHNob3VsZCBiZSBzaG93biBmaXJzdC5cbiAgICpcbiAgICogVGhpcyBvcmRlcmluZyBjYW4gYmUgY29udHJvbGxlZCBieSBjdXN0b21pemluZyB0aGUgbG9jYWxlIHByb3BlcnR5LlxuICAgKi9cbiAgY29uc3QgcGFydHMgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIGZvcm1hdE9wdGlvbnMpLmZvcm1hdFRvUGFydHMobmV3IERhdGUoKSk7XG4gIHJldHVybiBwYXJ0c1swXS50eXBlID09PSAnbW9udGgnO1xufTtcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gbG9jYWxlIGZvcm1hdHMgdGhlIGRheSBwZXJpb2QgKGFtL3BtKSB0byB0aGVcbiAqIGxlZnQgb3IgcmlnaHQgb2YgdGhlIGhvdXIuXG4gKiBAcGFyYW0gbG9jYWxlIFRoZSBsb2NhbGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGxvY2FsZSBmb3JtYXRzIHRoZSBkYXkgcGVyaW9kIHRvIHRoZSBsZWZ0IG9mIHRoZSBob3VyLlxuICovXG5jb25zdCBpc0xvY2FsZURheVBlcmlvZFJUTCA9IChsb2NhbGUpID0+IHtcbiAgY29uc3QgcGFydHMgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHsgaG91cjogJ251bWVyaWMnIH0pLmZvcm1hdFRvUGFydHMobmV3IERhdGUoKSk7XG4gIHJldHVybiBwYXJ0c1swXS50eXBlID09PSAnZGF5UGVyaW9kJztcbn07XG5cbmNvbnN0IElTT184NjAxX1JFR0VYUCA9IFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG4vXihcXGR7NH18WytcXC1dXFxkezZ9KSg/Oi0oXFxkezJ9KSg/Oi0oXFxkezJ9KSk/KT8oPzpUKFxcZHsyfSk6KFxcZHsyfSkoPzo6KFxcZHsyfSkoPzpcXC4oXFxkezN9KSk/KT8oPzooWil8KFsrXFwtXSkoXFxkezJ9KSg/OjooXFxkezJ9KSk/KT8pPyQvO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5jb25zdCBUSU1FX1JFR0VYUCA9IC9eKChcXGR7Mn0pOihcXGR7Mn0pKD86OihcXGR7Mn0pKD86XFwuKFxcZHszfSkpPyk/KD86KFopfChbK1xcLV0pKFxcZHsyfSkoPzo6KFxcZHsyfSkpPyk/KT8kLztcbi8qKlxuICogVXNlIHRvIGNvbnZlcnQgYSBzdHJpbmcgb2YgY29tbWEgc2VwYXJhdGVkIG51bWJlcnMgb3JcbiAqIGFuIGFycmF5IG9mIG51bWJlcnMsIGFuZCBjbGVhbiB1cCBhbnkgdXNlciBpbnB1dFxuICovXG5jb25zdCBjb252ZXJ0VG9BcnJheU9mTnVtYmVycyA9IChpbnB1dCkgPT4ge1xuICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgcHJvY2Vzc2VkSW5wdXQgPSBpbnB1dDtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBjb252ZXJ0IHRoZSBzdHJpbmcgdG8gYW4gYXJyYXkgb2Ygc3RyaW5nc1xuICAgIC8vIGF1dG8gcmVtb3ZlIGFueSB3aGl0ZXNwYWNlIGFuZCBbXSBjaGFyYWN0ZXJzXG4gICAgcHJvY2Vzc2VkSW5wdXQgPSBpbnB1dC5yZXBsYWNlKC9cXFt8XFxdfFxccy9nLCAnJykuc3BsaXQoJywnKTtcbiAgfVxuICBsZXQgdmFsdWVzO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9jZXNzZWRJbnB1dCkpIHtcbiAgICAvLyBlbnN1cmUgZWFjaCB2YWx1ZSBpcyBhbiBhY3R1YWwgbnVtYmVyIGluIHRoZSByZXR1cm5lZCBhcnJheVxuICAgIHZhbHVlcyA9IHByb2Nlc3NlZElucHV0Lm1hcCgobnVtKSA9PiBwYXJzZUludChudW0sIDEwKSkuZmlsdGVyKGlzRmluaXRlKTtcbiAgfVxuICBlbHNlIHtcbiAgICB2YWx1ZXMgPSBbcHJvY2Vzc2VkSW5wdXRdO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59O1xuLyoqXG4gKiBFeHRyYWN0cyBkYXRlIGluZm9ybWF0aW9uXG4gKiBmcm9tIGEgLmNhbGVuZGFyLWRheSBlbGVtZW50XG4gKiBpbnRvIERhdGV0aW1lUGFydHMuXG4gKi9cbmNvbnN0IGdldFBhcnRzRnJvbUNhbGVuZGFyRGF5ID0gKGVsKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbW9udGg6IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1tb250aCcpLCAxMCksXG4gICAgZGF5OiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF5JyksIDEwKSxcbiAgICB5ZWFyOiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEteWVhcicpLCAxMCksXG4gICAgZGF5T2ZXZWVrOiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF5LW9mLXdlZWsnKSwgMTApLFxuICB9O1xufTtcbmZ1bmN0aW9uIHBhcnNlRGF0ZSh2YWwpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgIHJldHVybiB2YWwubWFwKCh2YWxTdHIpID0+IHBhcnNlRGF0ZSh2YWxTdHIpKTtcbiAgfVxuICAvLyBtYW51YWxseSBwYXJzZSBJUzAgY3V6IERhdGUucGFyc2UgY2Fubm90IGJlIHRydXN0ZWRcbiAgLy8gSVNPIDg2MDEgZm9ybWF0OiAxOTk0LTEyLTE1VDEzOjQ3OjIwWlxuICBsZXQgcGFyc2UgPSBudWxsO1xuICBpZiAodmFsICE9IG51bGwgJiYgdmFsICE9PSAnJykge1xuICAgIC8vIHRyeSBwYXJzaW5nIGZvciBqdXN0IHRpbWUgZmlyc3QsIEhIOk1NXG4gICAgcGFyc2UgPSBUSU1FX1JFR0VYUC5leGVjKHZhbCk7XG4gICAgaWYgKHBhcnNlKSB7XG4gICAgICAvLyBhZGp1c3QgdGhlIGFycmF5IHNvIGl0IGZpdHMgbmljZWx5IHdpdGggdGhlIGRhdGV0aW1lIHBhcnNlXG4gICAgICBwYXJzZS51bnNoaWZ0KHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgICAgIHBhcnNlWzJdID0gcGFyc2VbM10gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gdHJ5IHBhcnNpbmcgZm9yIGZ1bGwgSVNPIGRhdGV0aW1lXG4gICAgICBwYXJzZSA9IElTT184NjAxX1JFR0VYUC5leGVjKHZhbCk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJzZSA9PT0gbnVsbCkge1xuICAgIC8vIHdhc24ndCBhYmxlIHRvIHBhcnNlIHRoZSBJU08gZGF0ZXRpbWVcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIC8vIGVuc3VyZSBhbGwgdGhlIHBhcnNlIHZhbHVlcyBleGlzdCB3aXRoIGF0IGxlYXN0IDBcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCA4OyBpKyspIHtcbiAgICBwYXJzZVtpXSA9IHBhcnNlW2ldICE9PSB1bmRlZmluZWQgPyBwYXJzZUludChwYXJzZVtpXSwgMTApIDogdW5kZWZpbmVkO1xuICB9XG4gIGxldCB0ek9mZnNldCA9IDA7XG4gIGlmIChwYXJzZVs5XSAmJiBwYXJzZVsxMF0pIHtcbiAgICAvLyBob3Vyc1xuICAgIHR6T2Zmc2V0ID0gcGFyc2VJbnQocGFyc2VbMTBdLCAxMCkgKiA2MDtcbiAgICBpZiAocGFyc2VbMTFdKSB7XG4gICAgICAvLyBtaW51dGVzXG4gICAgICB0ek9mZnNldCArPSBwYXJzZUludChwYXJzZVsxMV0sIDEwKTtcbiAgICB9XG4gICAgaWYgKHBhcnNlWzldID09PSAnLScpIHtcbiAgICAgIC8vICsgb3IgLVxuICAgICAgdHpPZmZzZXQgKj0gLTE7XG4gICAgfVxuICB9XG4gIC8vIGNhbiBhbHNvIGdldCBzZWNvbmQgYW5kIG1pbGxpc2Vjb25kIGZyb20gcGFyc2VbNl0gYW5kIHBhcnNlWzddIGlmIG5lZWRlZFxuICByZXR1cm4ge1xuICAgIHllYXI6IHBhcnNlWzFdLFxuICAgIG1vbnRoOiBwYXJzZVsyXSxcbiAgICBkYXk6IHBhcnNlWzNdLFxuICAgIGhvdXI6IHBhcnNlWzRdLFxuICAgIG1pbnV0ZTogcGFyc2VbNV0sXG4gICAgdHpPZmZzZXQsXG4gICAgYW1wbTogcGFyc2VbNF0gPCAxMiA/ICdhbScgOiAncG0nLFxuICB9O1xufVxuY29uc3QgY2xhbXBEYXRlID0gKGRhdGVQYXJ0cywgbWluUGFydHMsIG1heFBhcnRzKSA9PiB7XG4gIGlmIChtaW5QYXJ0cyAmJiBpc0JlZm9yZShkYXRlUGFydHMsIG1pblBhcnRzKSkge1xuICAgIHJldHVybiBtaW5QYXJ0cztcbiAgfVxuICBlbHNlIGlmIChtYXhQYXJ0cyAmJiBpc0FmdGVyKGRhdGVQYXJ0cywgbWF4UGFydHMpKSB7XG4gICAgcmV0dXJuIG1heFBhcnRzO1xuICB9XG4gIHJldHVybiBkYXRlUGFydHM7XG59O1xuLyoqXG4gKiBQYXJzZXMgYW4gaG91ciBhbmQgcmV0dXJucyBpZiB0aGUgdmFsdWUgaXMgaW4gdGhlIG1vcm5pbmcgKGFtKSBvciBhZnRlcm5vb24gKHBtKS5cbiAqIEBwYXJhbSBob3VyIFRoZSBob3VyIHRvIGZvcm1hdCwgc2hvdWxkIGJlIDAtMjNcbiAqIEByZXR1cm5zIGBwbWAgaWYgdGhlIGhvdXIgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDEyLCBgYW1gIGlmIGxlc3MgdGhhbiAxMi5cbiAqL1xuY29uc3QgcGFyc2VBbVBtID0gKGhvdXIpID0+IHtcbiAgcmV0dXJuIGhvdXIgPj0gMTIgPyAncG0nIDogJ2FtJztcbn07XG4vKipcbiAqIFRha2VzIGEgbWF4IGRhdGUgc3RyaW5nIGFuZCBjcmVhdGVzIGEgRGF0ZXRpbWVQYXJ0c1xuICogb2JqZWN0LCBmaWxsaW5nIGluIGFueSBtaXNzaW5nIGluZm9ybWF0aW9uLlxuICogRm9yIGV4YW1wbGUsIG1heD1cIjIwMTJcIiB3b3VsZCBmaWxsIGluIHRoZSBtaXNzaW5nXG4gKiBtb250aCwgZGF5LCBob3VyLCBhbmQgbWludXRlIGluZm9ybWF0aW9uLlxuICovXG5jb25zdCBwYXJzZU1heFBhcnRzID0gKG1heCwgdG9kYXlQYXJ0cykgPT4ge1xuICBjb25zdCB7IG1vbnRoLCBkYXksIHllYXIsIGhvdXIsIG1pbnV0ZSB9ID0gcGFyc2VEYXRlKG1heCk7XG4gIC8qKlxuICAgKiBXaGVuIHBhc3NpbmcgaW4gYG1heGAgb3IgYG1pbmAsIGRldmVsb3BlcnNcbiAgICogY2FuIHBhc3MgaW4gYW55IElTTy04NjAxIHN0cmluZy4gVGhpcyBtZWFuc1xuICAgKiB0aGF0IG5vdCBhbGwgb2YgdGhlIGRhdGUvdGltZSBmaWVsZHMgYXJlIGRlZmluZWQuXG4gICAqIEZvciBleGFtcGxlLCBwYXNzaW5nIG1heD1cIjIwMTJcIiBpcyB2YWxpZCBldmVuIHRob3VnaFxuICAgKiB0aGVyZSBpcyBubyBtb250aCwgZGF5LCBob3VyLCBvciBtaW51dGUgZGF0YS5cbiAgICogSG93ZXZlciwgYWxsIG9mIHRoaXMgZGF0YSBpcyByZXF1aXJlZCB3aGVuIGNsYW1waW5nIHRoZSBkYXRlXG4gICAqIHNvIHRoYXQgdGhlIGNvcnJlY3QgaW5pdGlhbCB2YWx1ZSBjYW4gYmUgc2VsZWN0ZWQuIEFzIGEgcmVzdWx0LFxuICAgKiB3ZSBuZWVkIHRvIGZpbGwgaW4gYW55IG9taXR0ZWQgZGF0YSB3aXRoIHRoZSBtaW4gb3IgbWF4IHZhbHVlcy5cbiAgICovXG4gIGNvbnN0IHllYXJWYWx1ZSA9IHllYXIgIT09IG51bGwgJiYgeWVhciAhPT0gdm9pZCAwID8geWVhciA6IHRvZGF5UGFydHMueWVhcjtcbiAgY29uc3QgbW9udGhWYWx1ZSA9IG1vbnRoICE9PSBudWxsICYmIG1vbnRoICE9PSB2b2lkIDAgPyBtb250aCA6IDEyO1xuICByZXR1cm4ge1xuICAgIG1vbnRoOiBtb250aFZhbHVlLFxuICAgIGRheTogZGF5ICE9PSBudWxsICYmIGRheSAhPT0gdm9pZCAwID8gZGF5IDogZ2V0TnVtRGF5c0luTW9udGgobW9udGhWYWx1ZSwgeWVhclZhbHVlKSxcbiAgICAvKipcbiAgICAgKiBQYXNzaW5nIGluIFwiSEg6bW1cIiBpcyBhIHZhbGlkIElTTy04NjAxXG4gICAgICogc3RyaW5nLCBzbyB3ZSBqdXN0IGRlZmF1bHQgdG8gdGhlIGN1cnJlbnQgeWVhclxuICAgICAqIGluIHRoaXMgY2FzZS5cbiAgICAgKi9cbiAgICB5ZWFyOiB5ZWFyVmFsdWUsXG4gICAgaG91cjogaG91ciAhPT0gbnVsbCAmJiBob3VyICE9PSB2b2lkIDAgPyBob3VyIDogMjMsXG4gICAgbWludXRlOiBtaW51dGUgIT09IG51bGwgJiYgbWludXRlICE9PSB2b2lkIDAgPyBtaW51dGUgOiA1OSxcbiAgfTtcbn07XG4vKipcbiAqIFRha2VzIGEgbWluIGRhdGUgc3RyaW5nIGFuZCBjcmVhdGVzIGEgRGF0ZXRpbWVQYXJ0c1xuICogb2JqZWN0LCBmaWxsaW5nIGluIGFueSBtaXNzaW5nIGluZm9ybWF0aW9uLlxuICogRm9yIGV4YW1wbGUsIG1pbj1cIjIwMTJcIiB3b3VsZCBmaWxsIGluIHRoZSBtaXNzaW5nXG4gKiBtb250aCwgZGF5LCBob3VyLCBhbmQgbWludXRlIGluZm9ybWF0aW9uLlxuICovXG5jb25zdCBwYXJzZU1pblBhcnRzID0gKG1pbiwgdG9kYXlQYXJ0cykgPT4ge1xuICBjb25zdCB7IG1vbnRoLCBkYXksIHllYXIsIGhvdXIsIG1pbnV0ZSB9ID0gcGFyc2VEYXRlKG1pbik7XG4gIC8qKlxuICAgKiBXaGVuIHBhc3NpbmcgaW4gYG1heGAgb3IgYG1pbmAsIGRldmVsb3BlcnNcbiAgICogY2FuIHBhc3MgaW4gYW55IElTTy04NjAxIHN0cmluZy4gVGhpcyBtZWFuc1xuICAgKiB0aGF0IG5vdCBhbGwgb2YgdGhlIGRhdGUvdGltZSBmaWVsZHMgYXJlIGRlZmluZWQuXG4gICAqIEZvciBleGFtcGxlLCBwYXNzaW5nIG1heD1cIjIwMTJcIiBpcyB2YWxpZCBldmVuIHRob3VnaFxuICAgKiB0aGVyZSBpcyBubyBtb250aCwgZGF5LCBob3VyLCBvciBtaW51dGUgZGF0YS5cbiAgICogSG93ZXZlciwgYWxsIG9mIHRoaXMgZGF0YSBpcyByZXF1aXJlZCB3aGVuIGNsYW1waW5nIHRoZSBkYXRlXG4gICAqIHNvIHRoYXQgdGhlIGNvcnJlY3QgaW5pdGlhbCB2YWx1ZSBjYW4gYmUgc2VsZWN0ZWQuIEFzIGEgcmVzdWx0LFxuICAgKiB3ZSBuZWVkIHRvIGZpbGwgaW4gYW55IG9taXR0ZWQgZGF0YSB3aXRoIHRoZSBtaW4gb3IgbWF4IHZhbHVlcy5cbiAgICovXG4gIHJldHVybiB7XG4gICAgbW9udGg6IG1vbnRoICE9PSBudWxsICYmIG1vbnRoICE9PSB2b2lkIDAgPyBtb250aCA6IDEsXG4gICAgZGF5OiBkYXkgIT09IG51bGwgJiYgZGF5ICE9PSB2b2lkIDAgPyBkYXkgOiAxLFxuICAgIC8qKlxuICAgICAqIFBhc3NpbmcgaW4gXCJISDptbVwiIGlzIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAgKiBzdHJpbmcsIHNvIHdlIGp1c3QgZGVmYXVsdCB0byB0aGUgY3VycmVudCB5ZWFyXG4gICAgICogaW4gdGhpcyBjYXNlLlxuICAgICAqL1xuICAgIHllYXI6IHllYXIgIT09IG51bGwgJiYgeWVhciAhPT0gdm9pZCAwID8geWVhciA6IHRvZGF5UGFydHMueWVhcixcbiAgICBob3VyOiBob3VyICE9PSBudWxsICYmIGhvdXIgIT09IHZvaWQgMCA/IGhvdXIgOiAwLFxuICAgIG1pbnV0ZTogbWludXRlICE9PSBudWxsICYmIG1pbnV0ZSAhPT0gdm9pZCAwID8gbWludXRlIDogMCxcbiAgfTtcbn07XG5cbmNvbnN0IHR3b0RpZ2l0ID0gKHZhbCkgPT4ge1xuICByZXR1cm4gKCcwJyArICh2YWwgIT09IHVuZGVmaW5lZCA/IE1hdGguYWJzKHZhbCkgOiAnMCcpKS5zbGljZSgtMik7XG59O1xuY29uc3QgZm91ckRpZ2l0ID0gKHZhbCkgPT4ge1xuICByZXR1cm4gKCcwMDAnICsgKHZhbCAhPT0gdW5kZWZpbmVkID8gTWF0aC5hYnModmFsKSA6ICcwJykpLnNsaWNlKC00KTtcbn07XG5mdW5jdGlvbiBjb252ZXJ0RGF0YVRvSVNPKGRhdGEpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICByZXR1cm4gZGF0YS5tYXAoKHBhcnRzKSA9PiBjb252ZXJ0RGF0YVRvSVNPKHBhcnRzKSk7XG4gIH1cbiAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL05PVEUtZGF0ZXRpbWVcbiAgbGV0IHJ0biA9ICcnO1xuICBpZiAoZGF0YS55ZWFyICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBZWVlZXG4gICAgcnRuID0gZm91ckRpZ2l0KGRhdGEueWVhcik7XG4gICAgaWYgKGRhdGEubW9udGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gWVlZWS1NTVxuICAgICAgcnRuICs9ICctJyArIHR3b0RpZ2l0KGRhdGEubW9udGgpO1xuICAgICAgaWYgKGRhdGEuZGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gWVlZWS1NTS1ERFxuICAgICAgICBydG4gKz0gJy0nICsgdHdvRGlnaXQoZGF0YS5kYXkpO1xuICAgICAgICBpZiAoZGF0YS5ob3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBZWVlZLU1NLUREVEhIOm1tOlNTXG4gICAgICAgICAgcnRuICs9IGBUJHt0d29EaWdpdChkYXRhLmhvdXIpfToke3R3b0RpZ2l0KGRhdGEubWludXRlKX06MDBgO1xuICAgICAgICAgIGlmIChkYXRhLnR6T2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFlZWVktTU0tRERUSEg6bW06U1NaXG4gICAgICAgICAgICBydG4gKz0gJ1onO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFlZWVktTU0tRERUSEg6bW06U1MrLy1ISDptbVxuICAgICAgICAgICAgcnRuICs9XG4gICAgICAgICAgICAgIChkYXRhLnR6T2Zmc2V0ID4gMCA/ICcrJyA6ICctJykgK1xuICAgICAgICAgICAgICAgIHR3b0RpZ2l0KE1hdGguZmxvb3IoTWF0aC5hYnMoZGF0YS50ek9mZnNldCAvIDYwKSkpICtcbiAgICAgICAgICAgICAgICAnOicgK1xuICAgICAgICAgICAgICAgIHR3b0RpZ2l0KGRhdGEudHpPZmZzZXQgJSA2MCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGRhdGEuaG91ciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gSEg6bW1cbiAgICBydG4gPSB0d29EaWdpdChkYXRhLmhvdXIpICsgJzonICsgdHdvRGlnaXQoZGF0YS5taW51dGUpO1xuICB9XG4gIHJldHVybiBydG47XG59XG4vKipcbiAqIENvbnZlcnRzIGFuIDEyIGhvdXIgdmFsdWUgdG8gMjQgaG91cnMuXG4gKi9cbmNvbnN0IGNvbnZlcnQxMkhvdXJUbzI0SG91ciA9IChob3VyLCBhbXBtKSA9PiB7XG4gIGlmIChhbXBtID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaG91cjtcbiAgfVxuICAvKipcbiAgICogSWYgQU0gYW5kIDEyYW1cbiAgICogdGhlbiByZXR1cm4gMDA6MDAuXG4gICAqIE90aGVyd2lzZSBqdXN0IHJldHVyblxuICAgKiB0aGUgaG91ciBzaW5jZSBpdCBpc1xuICAgKiBhbHJlYWR5IGluIDI0IGhvdXIgZm9ybWF0LlxuICAgKi9cbiAgaWYgKGFtcG0gPT09ICdhbScpIHtcbiAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gaG91cjtcbiAgfVxuICAvKipcbiAgICogSWYgUE0gYW5kIDEycG1cbiAgICoganVzdCByZXR1cm4gMTI6MDBcbiAgICogc2luY2UgaXQgaXMgYWxyZWFkeVxuICAgKiBpbiAyNCBob3VyIGZvcm1hdC5cbiAgICogT3RoZXJ3aXNlIGFkZCAxMiBob3Vyc1xuICAgKiB0byB0aGUgdGltZS5cbiAgICovXG4gIGlmIChob3VyID09PSAxMikge1xuICAgIHJldHVybiAxMjtcbiAgfVxuICByZXR1cm4gaG91ciArIDEyO1xufTtcbmNvbnN0IGdldFN0YXJ0T2ZXZWVrID0gKHJlZlBhcnRzKSA9PiB7XG4gIGNvbnN0IHsgZGF5T2ZXZWVrIH0gPSByZWZQYXJ0cztcbiAgaWYgKGRheU9mV2VlayA9PT0gbnVsbCB8fCBkYXlPZldlZWsgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF5IG9mIHdlZWsgcHJvdmlkZWQnKTtcbiAgfVxuICByZXR1cm4gc3VidHJhY3REYXlzKHJlZlBhcnRzLCBkYXlPZldlZWspO1xufTtcbmNvbnN0IGdldEVuZE9mV2VlayA9IChyZWZQYXJ0cykgPT4ge1xuICBjb25zdCB7IGRheU9mV2VlayB9ID0gcmVmUGFydHM7XG4gIGlmIChkYXlPZldlZWsgPT09IG51bGwgfHwgZGF5T2ZXZWVrID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRheSBvZiB3ZWVrIHByb3ZpZGVkJyk7XG4gIH1cbiAgcmV0dXJuIGFkZERheXMocmVmUGFydHMsIDYgLSBkYXlPZldlZWspO1xufTtcbmNvbnN0IGdldE5leHREYXkgPSAocmVmUGFydHMpID0+IHtcbiAgcmV0dXJuIGFkZERheXMocmVmUGFydHMsIDEpO1xufTtcbmNvbnN0IGdldFByZXZpb3VzRGF5ID0gKHJlZlBhcnRzKSA9PiB7XG4gIHJldHVybiBzdWJ0cmFjdERheXMocmVmUGFydHMsIDEpO1xufTtcbmNvbnN0IGdldFByZXZpb3VzV2VlayA9IChyZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gc3VidHJhY3REYXlzKHJlZlBhcnRzLCA3KTtcbn07XG5jb25zdCBnZXROZXh0V2VlayA9IChyZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gYWRkRGF5cyhyZWZQYXJ0cywgNyk7XG59O1xuLyoqXG4gKiBHaXZlbiBkYXRldGltZSBwYXJ0cywgc3VidHJhY3RcbiAqIG51bURheXMgZnJvbSB0aGUgZGF0ZS5cbiAqIFJldHVybnMgYSBuZXcgRGF0ZXRpbWVQYXJ0cyBvYmplY3RcbiAqIEN1cnJlbnRseSBjYW4gb25seSBnbyBiYWNrd2FyZCBhdCBtb3N0IDEgbW9udGguXG4gKi9cbmNvbnN0IHN1YnRyYWN0RGF5cyA9IChyZWZQYXJ0cywgbnVtRGF5cykgPT4ge1xuICBjb25zdCB7IG1vbnRoLCBkYXksIHllYXIgfSA9IHJlZlBhcnRzO1xuICBpZiAoZGF5ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXkgcHJvdmlkZWQnKTtcbiAgfVxuICBjb25zdCB3b3JraW5nUGFydHMgPSB7XG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIHllYXIsXG4gIH07XG4gIHdvcmtpbmdQYXJ0cy5kYXkgPSBkYXkgLSBudW1EYXlzO1xuICAvKipcbiAgICogSWYgd3JhcHBpbmcgdG8gcHJldmlvdXMgbW9udGhcbiAgICogdXBkYXRlIGRheXMgYW5kIGRlY3JlbWVudCBtb250aFxuICAgKi9cbiAgaWYgKHdvcmtpbmdQYXJ0cy5kYXkgPCAxKSB7XG4gICAgd29ya2luZ1BhcnRzLm1vbnRoIC09IDE7XG4gIH1cbiAgLyoqXG4gICAqIElmIG1vdmluZyB0byBwcmV2aW91cyB5ZWFyLCByZXNldFxuICAgKiBtb250aCB0byBEZWNlbWJlciBhbmQgZGVjcmVtZW50IHllYXJcbiAgICovXG4gIGlmICh3b3JraW5nUGFydHMubW9udGggPCAxKSB7XG4gICAgd29ya2luZ1BhcnRzLm1vbnRoID0gMTI7XG4gICAgd29ya2luZ1BhcnRzLnllYXIgLT0gMTtcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lIGhvdyBtYW55IGRheXMgYXJlIGluIHRoZSBjdXJyZW50XG4gICAqIG1vbnRoXG4gICAqL1xuICBpZiAod29ya2luZ1BhcnRzLmRheSA8IDEpIHtcbiAgICBjb25zdCBkYXlzSW5Nb250aCA9IGdldE51bURheXNJbk1vbnRoKHdvcmtpbmdQYXJ0cy5tb250aCwgd29ya2luZ1BhcnRzLnllYXIpO1xuICAgIC8qKlxuICAgICAqIFRha2UgbnVtIGRheXMgaW4gbW9udGggYW5kIGFkZCB0aGVcbiAgICAgKiBudW1iZXIgb2YgdW5kZXJmbG93IGRheXMuIFRoaXMgbnVtYmVyIHdpbGxcbiAgICAgKiBiZSBuZWdhdGl2ZS5cbiAgICAgKiBFeGFtcGxlOiAxIHdlZWsgYmVmb3JlIEphbiAyLCAyMDIxIGlzXG4gICAgICogRGVjZW1iZXIgMjYsIDIwMjEgc286XG4gICAgICogMiAtIDcgPSAtNVxuICAgICAqIDMxICsgKC01KSA9IDI2XG4gICAgICovXG4gICAgd29ya2luZ1BhcnRzLmRheSA9IGRheXNJbk1vbnRoICsgd29ya2luZ1BhcnRzLmRheTtcbiAgfVxuICByZXR1cm4gd29ya2luZ1BhcnRzO1xufTtcbi8qKlxuICogR2l2ZW4gZGF0ZXRpbWUgcGFydHMsIGFkZFxuICogbnVtRGF5cyB0byB0aGUgZGF0ZS5cbiAqIFJldHVybnMgYSBuZXcgRGF0ZXRpbWVQYXJ0cyBvYmplY3RcbiAqIEN1cnJlbnRseSBjYW4gb25seSBnbyBmb3J3YXJkIGF0IG1vc3QgMSBtb250aC5cbiAqL1xuY29uc3QgYWRkRGF5cyA9IChyZWZQYXJ0cywgbnVtRGF5cykgPT4ge1xuICBjb25zdCB7IG1vbnRoLCBkYXksIHllYXIgfSA9IHJlZlBhcnRzO1xuICBpZiAoZGF5ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXkgcHJvdmlkZWQnKTtcbiAgfVxuICBjb25zdCB3b3JraW5nUGFydHMgPSB7XG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIHllYXIsXG4gIH07XG4gIGNvbnN0IGRheXNJbk1vbnRoID0gZ2V0TnVtRGF5c0luTW9udGgobW9udGgsIHllYXIpO1xuICB3b3JraW5nUGFydHMuZGF5ID0gZGF5ICsgbnVtRGF5cztcbiAgLyoqXG4gICAqIElmIHdyYXBwaW5nIHRvIG5leHQgbW9udGhcbiAgICogdXBkYXRlIGRheXMgYW5kIGluY3JlbWVudCBtb250aFxuICAgKi9cbiAgaWYgKHdvcmtpbmdQYXJ0cy5kYXkgPiBkYXlzSW5Nb250aCkge1xuICAgIHdvcmtpbmdQYXJ0cy5kYXkgLT0gZGF5c0luTW9udGg7XG4gICAgd29ya2luZ1BhcnRzLm1vbnRoICs9IDE7XG4gIH1cbiAgLyoqXG4gICAqIElmIG1vdmluZyB0byBuZXh0IHllYXIsIHJlc2V0XG4gICAqIG1vbnRoIHRvIEphbnVhcnkgYW5kIGluY3JlbWVudCB5ZWFyXG4gICAqL1xuICBpZiAod29ya2luZ1BhcnRzLm1vbnRoID4gMTIpIHtcbiAgICB3b3JraW5nUGFydHMubW9udGggPSAxO1xuICAgIHdvcmtpbmdQYXJ0cy55ZWFyICs9IDE7XG4gIH1cbiAgcmV0dXJuIHdvcmtpbmdQYXJ0cztcbn07XG4vKipcbiAqIEdpdmVuIERhdGV0aW1lUGFydHMsIGdlbmVyYXRlIHRoZSBwcmV2aW91cyBtb250aC5cbiAqL1xuY29uc3QgZ2V0UHJldmlvdXNNb250aCA9IChyZWZQYXJ0cykgPT4ge1xuICAvKipcbiAgICogSWYgY3VycmVudCBtb250aCBpcyBKYW51YXJ5LCB3cmFwIGJhY2t3YXJkc1xuICAgKiAgdG8gRGVjZW1iZXIgb2YgdGhlIHByZXZpb3VzIHllYXIuXG4gICAqL1xuICBjb25zdCBtb250aCA9IHJlZlBhcnRzLm1vbnRoID09PSAxID8gMTIgOiByZWZQYXJ0cy5tb250aCAtIDE7XG4gIGNvbnN0IHllYXIgPSByZWZQYXJ0cy5tb250aCA9PT0gMSA/IHJlZlBhcnRzLnllYXIgLSAxIDogcmVmUGFydHMueWVhcjtcbiAgY29uc3QgbnVtRGF5c0luTW9udGggPSBnZXROdW1EYXlzSW5Nb250aChtb250aCwgeWVhcik7XG4gIGNvbnN0IGRheSA9IG51bURheXNJbk1vbnRoIDwgcmVmUGFydHMuZGF5ID8gbnVtRGF5c0luTW9udGggOiByZWZQYXJ0cy5kYXk7XG4gIHJldHVybiB7IG1vbnRoLCB5ZWFyLCBkYXkgfTtcbn07XG4vKipcbiAqIEdpdmVuIERhdGV0aW1lUGFydHMsIGdlbmVyYXRlIHRoZSBuZXh0IG1vbnRoLlxuICovXG5jb25zdCBnZXROZXh0TW9udGggPSAocmVmUGFydHMpID0+IHtcbiAgLyoqXG4gICAqIElmIGN1cnJlbnQgbW9udGggaXMgRGVjZW1iZXIsIHdyYXAgZm9yd2FyZHNcbiAgICogIHRvIEphbnVhcnkgb2YgdGhlIG5leHQgeWVhci5cbiAgICovXG4gIGNvbnN0IG1vbnRoID0gcmVmUGFydHMubW9udGggPT09IDEyID8gMSA6IHJlZlBhcnRzLm1vbnRoICsgMTtcbiAgY29uc3QgeWVhciA9IHJlZlBhcnRzLm1vbnRoID09PSAxMiA/IHJlZlBhcnRzLnllYXIgKyAxIDogcmVmUGFydHMueWVhcjtcbiAgY29uc3QgbnVtRGF5c0luTW9udGggPSBnZXROdW1EYXlzSW5Nb250aChtb250aCwgeWVhcik7XG4gIGNvbnN0IGRheSA9IG51bURheXNJbk1vbnRoIDwgcmVmUGFydHMuZGF5ID8gbnVtRGF5c0luTW9udGggOiByZWZQYXJ0cy5kYXk7XG4gIHJldHVybiB7IG1vbnRoLCB5ZWFyLCBkYXkgfTtcbn07XG5jb25zdCBjaGFuZ2VZZWFyID0gKHJlZlBhcnRzLCB5ZWFyRGVsdGEpID0+IHtcbiAgY29uc3QgbW9udGggPSByZWZQYXJ0cy5tb250aDtcbiAgY29uc3QgeWVhciA9IHJlZlBhcnRzLnllYXIgKyB5ZWFyRGVsdGE7XG4gIGNvbnN0IG51bURheXNJbk1vbnRoID0gZ2V0TnVtRGF5c0luTW9udGgobW9udGgsIHllYXIpO1xuICBjb25zdCBkYXkgPSBudW1EYXlzSW5Nb250aCA8IHJlZlBhcnRzLmRheSA/IG51bURheXNJbk1vbnRoIDogcmVmUGFydHMuZGF5O1xuICByZXR1cm4geyBtb250aCwgeWVhciwgZGF5IH07XG59O1xuLyoqXG4gKiBHaXZlbiBEYXRldGltZVBhcnRzLCBnZW5lcmF0ZSB0aGUgcHJldmlvdXMgeWVhci5cbiAqL1xuY29uc3QgZ2V0UHJldmlvdXNZZWFyID0gKHJlZlBhcnRzKSA9PiB7XG4gIHJldHVybiBjaGFuZ2VZZWFyKHJlZlBhcnRzLCAtMSk7XG59O1xuLyoqXG4gKiBHaXZlbiBEYXRldGltZVBhcnRzLCBnZW5lcmF0ZSB0aGUgbmV4dCB5ZWFyLlxuICovXG5jb25zdCBnZXROZXh0WWVhciA9IChyZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gY2hhbmdlWWVhcihyZWZQYXJ0cywgMSk7XG59O1xuLyoqXG4gKiBJZiBQTSwgdGhlbiBpbnRlcm5hbCB2YWx1ZSBzaG91bGRcbiAqIGJlIGNvbnZlcnRlZCB0byAyNC1ociB0aW1lLlxuICogRG9lcyBub3QgYXBwbHkgd2hlbiBwdWJsaWNcbiAqIHZhbHVlcyBhcmUgYWxyZWFkeSAyNC1ociB0aW1lLlxuICovXG5jb25zdCBnZXRJbnRlcm5hbEhvdXJWYWx1ZSA9IChob3VyLCB1c2UyNEhvdXIsIGFtcG0pID0+IHtcbiAgaWYgKHVzZTI0SG91cikge1xuICAgIHJldHVybiBob3VyO1xuICB9XG4gIHJldHVybiBjb252ZXJ0MTJIb3VyVG8yNEhvdXIoaG91ciwgYW1wbSk7XG59O1xuLyoqXG4gKiBVbmxlc3Mgb3RoZXJ3aXNlIHN0YXRlZCwgYWxsIG1vbnRoIHZhbHVlcyBhcmVcbiAqIDEgaW5kZXhlZCBpbnN0ZWFkIG9mIHRoZSB0eXBpY2FsIDAgaW5kZXggaW4gSlMgRGF0ZS5cbiAqIEV4YW1wbGU6XG4gKiAgIEphbnVhcnkgPSBNb250aCAwIHdoZW4gdXNpbmcgSlMgRGF0ZVxuICogICBKYW51YXJ5ID0gTW9udGggMSB3aGVuIHVzaW5nIHRoaXMgZGF0ZXRpbWUgdXRpbFxuICovXG4vKipcbiAqIEdpdmVuIHRoZSBjdXJyZW50IGRhdGV0aW1lIHBhcnRzIGFuZCBhIG5ldyBBTS9QTSB2YWx1ZVxuICogY2FsY3VsYXRlIHdoYXQgdGhlIGhvdXIgc2hvdWxkIGJlIGluIDI0LWhvdXIgdGltZSBmb3JtYXQuXG4gKiBVc2VkIHdoZW4gdG9nZ2xpbmcgdGhlIEFNL1BNIHNlZ21lbnQgc2luY2Ugd2Ugc3RvcmUgb3VyIGhvdXJzXG4gKiBpbiAyNC1ob3VyIHRpbWUgZm9ybWF0IGludGVybmFsbHkuXG4gKi9cbmNvbnN0IGNhbGN1bGF0ZUhvdXJGcm9tQU1QTSA9IChjdXJyZW50UGFydHMsIG5ld0FNUE0pID0+IHtcbiAgY29uc3QgeyBhbXBtOiBjdXJyZW50QU1QTSwgaG91ciB9ID0gY3VycmVudFBhcnRzO1xuICBsZXQgbmV3SG91ciA9IGhvdXI7XG4gIC8qKlxuICAgKiBJZiBnb2luZyBmcm9tIEFNIC0tPiBQTSwgbmVlZCB0byB1cGRhdGUgdGhlXG4gICAqXG4gICAqL1xuICBpZiAoY3VycmVudEFNUE0gPT09ICdhbScgJiYgbmV3QU1QTSA9PT0gJ3BtJykge1xuICAgIG5ld0hvdXIgPSBjb252ZXJ0MTJIb3VyVG8yNEhvdXIobmV3SG91ciwgJ3BtJyk7XG4gICAgLyoqXG4gICAgICogSWYgZ29pbmcgZnJvbSBQTSAtLT4gQU1cbiAgICAgKi9cbiAgfVxuICBlbHNlIGlmIChjdXJyZW50QU1QTSA9PT0gJ3BtJyAmJiBuZXdBTVBNID09PSAnYW0nKSB7XG4gICAgbmV3SG91ciA9IE1hdGguYWJzKG5ld0hvdXIgLSAxMik7XG4gIH1cbiAgcmV0dXJuIG5ld0hvdXI7XG59O1xuLyoqXG4gKiBVcGRhdGVzIHBhcnRzIHRvIGVuc3VyZSB0aGF0IG1vbnRoIGFuZCBkYXlcbiAqIHZhbHVlcyBhcmUgdmFsaWQuIEZvciBkYXlzIHRoYXQgZG8gbm90IGV4aXN0LFxuICogdGhlIGNsb3Nlc3QgdmFsaWQgZGF5IGlzIHVzZWQuXG4gKi9cbmNvbnN0IHZhbGlkYXRlUGFydHMgPSAocGFydHMsIG1pblBhcnRzLCBtYXhQYXJ0cykgPT4ge1xuICBjb25zdCB7IG1vbnRoLCBkYXksIHllYXIgfSA9IHBhcnRzO1xuICBjb25zdCBwYXJ0c0NvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBwYXJ0cyk7XG4gIGNvbnN0IG51bURheXMgPSBnZXROdW1EYXlzSW5Nb250aChtb250aCwgeWVhcik7XG4gIC8qKlxuICAgKiBJZiB0aGUgbWF4IG51bWJlciBvZiBkYXlzXG4gICAqIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZGF5IHdlIHdhbnRcbiAgICogdG8gc2V0LCB1cGRhdGUgdGhlIERhdGV0aW1lUGFydHNcbiAgICogZGF5IGZpZWxkIHRvIGJlIHRoZSBtYXggZGF5cy5cbiAgICovXG4gIGlmIChkYXkgIT09IG51bGwgJiYgbnVtRGF5cyA8IGRheSkge1xuICAgIHBhcnRzQ29weS5kYXkgPSBudW1EYXlzO1xuICB9XG4gIC8qKlxuICAgKiBJZiB2YWx1ZSBpcyBzYW1lIGRheSBhcyBtaW4gZGF5LFxuICAgKiBtYWtlIHN1cmUgdGhlIHRpbWUgdmFsdWUgaXMgaW4gYm91bmRzLlxuICAgKi9cbiAgaWYgKG1pblBhcnRzICE9PSB1bmRlZmluZWQgJiYgaXNTYW1lRGF5KHBhcnRzQ29weSwgbWluUGFydHMpKSB7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGhvdXIgaXMgb3V0IG9mIGJvdW5kcyxcbiAgICAgKiB1cGRhdGUgYm90aCB0aGUgaG91ciBhbmQgbWludXRlLlxuICAgICAqIFRoaXMgaXMgZG9uZSBzbyB0aGF0IHRoZSBuZXcgdGltZVxuICAgICAqIGlzIGNsb3Nlc3QgdG8gd2hhdCB0aGUgdXNlciBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBpZiAocGFydHNDb3B5LmhvdXIgIT09IHVuZGVmaW5lZCAmJiBtaW5QYXJ0cy5ob3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChwYXJ0c0NvcHkuaG91ciA8IG1pblBhcnRzLmhvdXIpIHtcbiAgICAgICAgcGFydHNDb3B5LmhvdXIgPSBtaW5QYXJ0cy5ob3VyO1xuICAgICAgICBwYXJ0c0NvcHkubWludXRlID0gbWluUGFydHMubWludXRlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgb25seSB0aGUgbWludXRlIGlzIG91dCBvZiBib3VuZHMsXG4gICAgICAgICAqIHNldCBpdCB0byB0aGUgbWluIG1pbnV0ZS5cbiAgICAgICAgICovXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChwYXJ0c0NvcHkuaG91ciA9PT0gbWluUGFydHMuaG91ciAmJlxuICAgICAgICBwYXJ0c0NvcHkubWludXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgbWluUGFydHMubWludXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcGFydHNDb3B5Lm1pbnV0ZSA8IG1pblBhcnRzLm1pbnV0ZSkge1xuICAgICAgICBwYXJ0c0NvcHkubWludXRlID0gbWluUGFydHMubWludXRlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogSWYgdmFsdWUgaXMgc2FtZSBkYXkgYXMgbWF4IGRheSxcbiAgICogbWFrZSBzdXJlIHRoZSB0aW1lIHZhbHVlIGlzIGluIGJvdW5kcy5cbiAgICovXG4gIGlmIChtYXhQYXJ0cyAhPT0gdW5kZWZpbmVkICYmIGlzU2FtZURheShwYXJ0cywgbWF4UGFydHMpKSB7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIGhvdXIgaXMgb3V0IG9mIGJvdW5kcyxcbiAgICAgKiB1cGRhdGUgYm90aCB0aGUgaG91ciBhbmQgbWludXRlLlxuICAgICAqIFRoaXMgaXMgZG9uZSBzbyB0aGF0IHRoZSBuZXcgdGltZVxuICAgICAqIGlzIGNsb3Nlc3QgdG8gd2hhdCB0aGUgdXNlciBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICBpZiAocGFydHNDb3B5LmhvdXIgIT09IHVuZGVmaW5lZCAmJiBtYXhQYXJ0cy5ob3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChwYXJ0c0NvcHkuaG91ciA+IG1heFBhcnRzLmhvdXIpIHtcbiAgICAgICAgcGFydHNDb3B5LmhvdXIgPSBtYXhQYXJ0cy5ob3VyO1xuICAgICAgICBwYXJ0c0NvcHkubWludXRlID0gbWF4UGFydHMubWludXRlO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgb25seSB0aGUgbWludXRlIGlzIG91dCBvZiBib3VuZHMsXG4gICAgICAgICAqIHNldCBpdCB0byB0aGUgbWF4IG1pbnV0ZS5cbiAgICAgICAgICovXG4gICAgICB9XG4gICAgICBlbHNlIGlmIChwYXJ0c0NvcHkuaG91ciA9PT0gbWF4UGFydHMuaG91ciAmJlxuICAgICAgICBwYXJ0c0NvcHkubWludXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgbWF4UGFydHMubWludXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcGFydHNDb3B5Lm1pbnV0ZSA+IG1heFBhcnRzLm1pbnV0ZSkge1xuICAgICAgICBwYXJ0c0NvcHkubWludXRlID0gbWF4UGFydHMubWludXRlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFydHNDb3B5O1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgY2xvc2VzdCBkYXRlIHRvIHJlZlBhcnRzXG4gKiB0aGF0IGFsc28gbWVldHMgdGhlIGNvbnN0cmFpbnRzIG9mXG4gKiB0aGUgKlZhbHVlcyBwYXJhbXMuXG4gKiBAcGFyYW0gcmVmUGFydHMgVGhlIHJlZmVyZW5jZSBkYXRlXG4gKiBAcGFyYW0gbW9udGhWYWx1ZXMgVGhlIGFsbG93ZWQgbW9udGggdmFsdWVzXG4gKiBAcGFyYW0gZGF5VmFsdWVzIFRoZSBhbGxvd2VkIGRheSAob2YgdGhlIG1vbnRoKSB2YWx1ZXNcbiAqIEBwYXJhbSB5ZWFyVmFsdWVzIFRoZSBhbGxvd2VkIHllYXIgdmFsdWVzXG4gKiBAcGFyYW0gaG91clZhbHVlcyBUaGUgYWxsb3dlZCBob3VyIHZhbHVlc1xuICogQHBhcmFtIG1pbnV0ZVZhbHVlcyBUaGUgYWxsb3dlZCBtaW51dGUgdmFsdWVzXG4gKi9cbmNvbnN0IGdldENsb3Nlc3RWYWxpZERhdGUgPSAocmVmUGFydHMsIG1vbnRoVmFsdWVzLCBkYXlWYWx1ZXMsIHllYXJWYWx1ZXMsIGhvdXJWYWx1ZXMsIG1pbnV0ZVZhbHVlcykgPT4ge1xuICBjb25zdCB7IGhvdXIsIG1pbnV0ZSwgZGF5LCBtb250aCwgeWVhciB9ID0gcmVmUGFydHM7XG4gIGNvbnN0IGNvcHlQYXJ0cyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVmUGFydHMpLCB7IGRheU9mV2VlazogdW5kZWZpbmVkIH0pO1xuICBpZiAobW9udGhWYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvcHlQYXJ0cy5tb250aCA9IGZpbmRDbG9zZXN0VmFsdWUobW9udGgsIG1vbnRoVmFsdWVzKTtcbiAgfVxuICAvLyBEYXkgaXMgbnVsbGFibGUgYnV0IGNhbm5vdCBiZSB1bmRlZmluZWRcbiAgaWYgKGRheSAhPT0gbnVsbCAmJiBkYXlWYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvcHlQYXJ0cy5kYXkgPSBmaW5kQ2xvc2VzdFZhbHVlKGRheSwgZGF5VmFsdWVzKTtcbiAgfVxuICBpZiAoeWVhclZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29weVBhcnRzLnllYXIgPSBmaW5kQ2xvc2VzdFZhbHVlKHllYXIsIHllYXJWYWx1ZXMpO1xuICB9XG4gIGlmIChob3VyICE9PSB1bmRlZmluZWQgJiYgaG91clZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29weVBhcnRzLmhvdXIgPSBmaW5kQ2xvc2VzdFZhbHVlKGhvdXIsIGhvdXJWYWx1ZXMpO1xuICAgIGNvcHlQYXJ0cy5hbXBtID0gcGFyc2VBbVBtKGNvcHlQYXJ0cy5ob3VyKTtcbiAgfVxuICBpZiAobWludXRlICE9PSB1bmRlZmluZWQgJiYgbWludXRlVmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb3B5UGFydHMubWludXRlID0gZmluZENsb3Nlc3RWYWx1ZShtaW51dGUsIG1pbnV0ZVZhbHVlcyk7XG4gIH1cbiAgcmV0dXJuIGNvcHlQYXJ0cztcbn07XG4vKipcbiAqIEZpbmRzIHRoZSB2YWx1ZSBpbiBcInZhbHVlc1wiIHRoYXQgaXNcbiAqIG51bWVyaWNhbGx5IGNsb3Nlc3QgdG8gXCJyZWZlcmVuY2VcIi5cbiAqIFRoaXMgZnVuY3Rpb24gYXNzdW1lcyB0aGF0IFwidmFsdWVzXCIgaXNcbiAqIGFscmVhZHkgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci5cbiAqIEBwYXJhbSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBudW1iZXIgdG8gdXNlXG4gKiB3aGVuIGZpbmRpbmcgdGhlIGNsb3Nlc3QgdmFsdWVcbiAqIEBwYXJhbSB2YWx1ZXMgVGhlIGFsbG93ZWQgdmFsdWVzIHRoYXQgd2lsbCBiZVxuICogc2VhcmNoZWQgdG8gZmluZCB0aGUgY2xvc2VzdCB2YWx1ZSB0byBcInJlZmVyZW5jZVwiXG4gKi9cbmNvbnN0IGZpbmRDbG9zZXN0VmFsdWUgPSAocmVmZXJlbmNlLCB2YWx1ZXMpID0+IHtcbiAgbGV0IGNsb3Nlc3RWYWx1ZSA9IHZhbHVlc1swXTtcbiAgbGV0IHJhbmsgPSBNYXRoLmFicyhjbG9zZXN0VmFsdWUgLSByZWZlcmVuY2UpO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgIC8qKlxuICAgICAqIFRoaXMgY29kZSBwcmlvcml0aXplcyB0aGUgZmlyc3RcbiAgICAgKiBjbG9zZXN0IHJlc3VsdC4gR2l2ZW4gdHdvIHZhbHVlc1xuICAgICAqIHdpdGggdGhlIHNhbWUgZGlzdGFuY2UgZnJvbSByZWZlcmVuY2UsXG4gICAgICogdGhpcyBjb2RlIHdpbGwgcHJpb3JpdGl6ZSB0aGUgc21hbGxlciBvZlxuICAgICAqIHRoZSB0d28gdmFsdWVzLlxuICAgICAqL1xuICAgIGNvbnN0IHZhbHVlUmFuayA9IE1hdGguYWJzKHZhbHVlIC0gcmVmZXJlbmNlKTtcbiAgICBpZiAodmFsdWVSYW5rIDwgcmFuaykge1xuICAgICAgY2xvc2VzdFZhbHVlID0gdmFsdWU7XG4gICAgICByYW5rID0gdmFsdWVSYW5rO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xvc2VzdFZhbHVlO1xufTtcblxuY29uc3QgZ2V0Rm9ybWF0dGVkRGF5UGVyaW9kID0gKGRheVBlcmlvZCkgPT4ge1xuICBpZiAoZGF5UGVyaW9kID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgcmV0dXJuIGRheVBlcmlvZC50b1VwcGVyQ2FzZSgpO1xufTtcbmNvbnN0IGdldExvY2FsaXplZFRpbWUgPSAobG9jYWxlLCByZWZQYXJ0cywgdXNlMjRIb3VyKSA9PiB7XG4gIGNvbnN0IHRpbWVQYXJ0cyA9IHtcbiAgICBob3VyOiByZWZQYXJ0cy5ob3VyLFxuICAgIG1pbnV0ZTogcmVmUGFydHMubWludXRlLFxuICB9O1xuICBpZiAodGltZVBhcnRzLmhvdXIgPT09IHVuZGVmaW5lZCB8fCB0aW1lUGFydHMubWludXRlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gJ0ludmFsaWQgVGltZSc7XG4gIH1cbiAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwge1xuICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICBtaW51dGU6ICdudW1lcmljJyxcbiAgICB0aW1lWm9uZTogJ1VUQycsXG4gICAgLyoqXG4gICAgICogV2UgdXNlIGhvdXJDeWNsZSBoZXJlIGluc3RlYWQgb2YgaG91cjEyIGR1ZSB0bzpcbiAgICAgKiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMzQ3MzE2JnE9aG91cjEyJmNhbj0yXG4gICAgICovXG4gICAgaG91ckN5Y2xlOiB1c2UyNEhvdXIgPyAnaDIzJyA6ICdoMTInLFxuICB9KS5mb3JtYXQobmV3IERhdGUoY29udmVydERhdGFUb0lTTyhPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBcbiAgICAvKipcbiAgICAgKiBKUyB1c2VzIGEgc2ltcGxpZmllZCBJU08gODYwMSBmb3JtYXQgd2hpY2ggYWxsb3dzIGZvclxuICAgICAqIGRhdGUtb25seSBmb3JtYXRzIGFuZCBkYXRlLXRpbWUgZm9ybWF0cywgYnV0IG5vdFxuICAgICAqIHRpbWUtb25seSBmb3JtYXRzOiBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUtdGltZS1zdHJpbmctZm9ybWF0XG4gICAgICogQXMgYSByZXN1bHQsIGRldmVsb3BlcnMgd2hvIG9ubHkgcGFzcyBhIHRpbWUgd2lsbCBnZXRcbiAgICAgKiBhbiBcIkludmFsaWQgRGF0ZVwiIGVycm9yLiBUbyBhY2NvdW50IGZvciB0aGlzLCB3ZSBtYWtlIHN1cmUgdGhhdFxuICAgICAqIHllYXIvZGF5L21vbnRoIHZhbHVlcyBhcmUgc2V0IHdoZW4gcGFzc2luZyB0byBuZXcgRGF0ZSgpLlxuICAgICAqIFRoZSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNhbGwgYWJvdmUgb25seSB1c2VzIHRoZSBob3VyL21pbnV0ZVxuICAgICAqIHZhbHVlcywgc28gcGFzc2luZyB0aGVzZSBkYXRlIHZhbHVlcyBzaG91bGQgaGF2ZSBubyBpbXBhY3RcbiAgICAgKiBvbiB0aGUgdGltZSBvdXRwdXQuXG4gICAgICovXG4gICAgeWVhcjogMjAyMywgZGF5OiAxLCBtb250aDogMSB9LCB0aW1lUGFydHMpLCB7IFxuICAgIC8vIFRPRE86IEZXLTE4MzEgd2lsbCByZW1vdmUgdGhlIG5lZWQgdG8gbWFudWFsbHkgc2V0IHRoZSB0ek9mZnNldCB0byB1bmRlZmluZWRcbiAgICB0ek9mZnNldDogdW5kZWZpbmVkIH0pKSkpO1xufTtcbi8qKlxuICogQWRkcyBwYWRkaW5nIHRvIGEgdGltZSB2YWx1ZSBzb1xuICogdGhhdCBpdCBpcyBhbHdheXMgMiBkaWdpdHMuXG4gKi9cbmNvbnN0IGFkZFRpbWVQYWRkaW5nID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHZhbHVlVG9TdHJpbmcgPSB2YWx1ZS50b1N0cmluZygpO1xuICBpZiAodmFsdWVUb1N0cmluZy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIHZhbHVlVG9TdHJpbmc7XG4gIH1cbiAgcmV0dXJuIGAwJHt2YWx1ZVRvU3RyaW5nfWA7XG59O1xuLyoqXG4gKiBGb3JtYXRzIDI0IGhvdXIgdGltZXMgc28gdGhhdFxuICogaXQgYWx3YXlzIGhhcyAyIGRpZ2l0cy4gRm9yXG4gKiAxMiBob3VyIHRpbWVzIGl0IGVuc3VyZXMgdGhhdFxuICogaG91ciAwIGlzIGZvcm1hdHRlZCBhcyAnMTInLlxuICovXG5jb25zdCBnZXRGb3JtYXR0ZWRIb3VyID0gKGhvdXIsIHVzZTI0SG91cikgPT4ge1xuICBpZiAodXNlMjRIb3VyKSB7XG4gICAgcmV0dXJuIGFkZFRpbWVQYWRkaW5nKGhvdXIpO1xuICB9XG4gIC8qKlxuICAgKiBJZiB1c2luZyAxMiBob3VyXG4gICAqIGZvcm1hdCwgbWFrZSBzdXJlIGhvdXJcbiAgICogMCBpcyBmb3JtYXR0ZWQgYXMgJzEyJy5cbiAgICovXG4gIGlmIChob3VyID09PSAwKSB7XG4gICAgcmV0dXJuICcxMic7XG4gIH1cbiAgcmV0dXJuIGhvdXIudG9TdHJpbmcoKTtcbn07XG4vKipcbiAqIEdlbmVyYXRlcyBhbiBhcmlhLWxhYmVsIHRvIGJlIHJlYWQgYnkgc2NyZWVuIHJlYWRlcnNcbiAqIGdpdmVuIGEgbG9jYWwsIGEgZGF0ZSwgYW5kIHdoZXRoZXIgb3Igbm90IHRoYXQgZGF0ZSBpc1xuICogdG9kYXkncyBkYXRlLlxuICovXG5jb25zdCBnZW5lcmF0ZURheUFyaWFMYWJlbCA9IChsb2NhbGUsIHRvZGF5LCByZWZQYXJ0cykgPT4ge1xuICBpZiAocmVmUGFydHMuZGF5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIE1NL0REL1lZWVkgd2lsbCByZXR1cm4gbWlkbmlnaHQgaW4gdGhlIHVzZXIncyB0aW1lem9uZS5cbiAgICovXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtyZWZQYXJ0cy5tb250aH0vJHtyZWZQYXJ0cy5kYXl9LyR7cmVmUGFydHMueWVhcn0gR01UKzAwMDBgKTtcbiAgY29uc3QgbGFiZWxTdHJpbmcgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHtcbiAgICB3ZWVrZGF5OiAnbG9uZycsXG4gICAgbW9udGg6ICdsb25nJyxcbiAgICBkYXk6ICdudW1lcmljJyxcbiAgICB0aW1lWm9uZTogJ1VUQycsXG4gIH0pLmZvcm1hdChkYXRlKTtcbiAgLyoqXG4gICAqIElmIGRhdGUgaXMgdG9kYXksIHByZXBlbmQgXCJUb2RheVwiIHNvIHNjcmVlbiByZWFkZXJzIGluZGljYXRlXG4gICAqIHRoYXQgdGhlIGRhdGUgaXMgdG9kYXkuXG4gICAqL1xuICByZXR1cm4gdG9kYXkgPyBgVG9kYXksICR7bGFiZWxTdHJpbmd9YCA6IGxhYmVsU3RyaW5nO1xufTtcbi8qKlxuICogR2V0cyB0aGUgZGF5IG9mIHRoZSB3ZWVrLCBtb250aCwgYW5kIGRheVxuICogVXNlZCBmb3IgdGhlIGhlYWRlciBpbiBNRCBtb2RlLlxuICovXG5jb25zdCBnZXRNb250aEFuZERheSA9IChsb2NhbGUsIHJlZlBhcnRzKSA9PiB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtyZWZQYXJ0cy5tb250aH0vJHtyZWZQYXJ0cy5kYXl9LyR7cmVmUGFydHMueWVhcn0gR01UKzAwMDBgKTtcbiAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgeyB3ZWVrZGF5OiAnc2hvcnQnLCBtb250aDogJ3Nob3J0JywgZGF5OiAnbnVtZXJpYycsIHRpbWVab25lOiAnVVRDJyB9KS5mb3JtYXQoZGF0ZSk7XG59O1xuLyoqXG4gKiBHaXZlbiBhIGxvY2FsZSBhbmQgYSBkYXRlIG9iamVjdCxcbiAqIHJldHVybiBhIGZvcm1hdHRlZCBzdHJpbmcgdGhhdCBpbmNsdWRlc1xuICogdGhlIG1vbnRoIG5hbWUgYW5kIGZ1bGwgeWVhci5cbiAqIEV4YW1wbGU6IE1heSAyMDIxXG4gKi9cbmNvbnN0IGdldE1vbnRoQW5kWWVhciA9IChsb2NhbGUsIHJlZlBhcnRzKSA9PiB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtyZWZQYXJ0cy5tb250aH0vJHtyZWZQYXJ0cy5kYXl9LyR7cmVmUGFydHMueWVhcn0gR01UKzAwMDBgKTtcbiAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgeyBtb250aDogJ2xvbmcnLCB5ZWFyOiAnbnVtZXJpYycsIHRpbWVab25lOiAnVVRDJyB9KS5mb3JtYXQoZGF0ZSk7XG59O1xuLyoqXG4gKiBHaXZlbiBhIGxvY2FsZSBhbmQgYSBkYXRlIG9iamVjdCxcbiAqIHJldHVybiBhIGZvcm1hdHRlZCBzdHJpbmcgdGhhdCBpbmNsdWRlc1xuICogdGhlIHNob3J0IG1vbnRoLCBudW1lcmljIGRheSwgYW5kIGZ1bGwgeWVhci5cbiAqIEV4YW1wbGU6IEFwciAyMiwgMjAyMVxuICovXG5jb25zdCBnZXRNb250aERheUFuZFllYXIgPSAobG9jYWxlLCByZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gZ2V0TG9jYWxpemVkRGF0ZVRpbWUobG9jYWxlLCByZWZQYXJ0cywgeyBtb250aDogJ3Nob3J0JywgZGF5OiAnbnVtZXJpYycsIHllYXI6ICdudW1lcmljJyB9KTtcbn07XG4vKipcbiAqIEdpdmVuIGEgbG9jYWxlIGFuZCBhIGRhdGUgb2JqZWN0LFxuICogcmV0dXJuIGEgZm9ybWF0dGVkIHN0cmluZyB0aGF0IGluY2x1ZGVzXG4gKiB0aGUgbnVtZXJpYyBkYXkuXG4gKiBOb3RlOiBTb21lIGxhbmd1YWdlcyB3aWxsIGFkZCBsaXRlcmFsIGNoYXJhY3RlcnNcbiAqIHRvIHRoZSBlbmQuIFRoaXMgZnVuY3Rpb24gcmVtb3ZlcyB0aG9zZSBsaXRlcmFscy5cbiAqIEV4YW1wbGU6IDI5XG4gKi9cbmNvbnN0IGdldERheSA9IChsb2NhbGUsIHJlZlBhcnRzKSA9PiB7XG4gIHJldHVybiBnZXRMb2NhbGl6ZWREYXRlVGltZVBhcnRzKGxvY2FsZSwgcmVmUGFydHMsIHsgZGF5OiAnbnVtZXJpYycgfSkuZmluZCgob2JqKSA9PiBvYmoudHlwZSA9PT0gJ2RheScpLnZhbHVlO1xufTtcbi8qKlxuICogR2l2ZW4gYSBsb2NhbGUgYW5kIGEgZGF0ZSBvYmplY3QsXG4gKiByZXR1cm4gYSBmb3JtYXR0ZWQgc3RyaW5nIHRoYXQgaW5jbHVkZXNcbiAqIHRoZSBudW1lcmljIHllYXIuXG4gKiBFeGFtcGxlOiAyMDIyXG4gKi9cbmNvbnN0IGdldFllYXIgPSAobG9jYWxlLCByZWZQYXJ0cykgPT4ge1xuICByZXR1cm4gZ2V0TG9jYWxpemVkRGF0ZVRpbWUobG9jYWxlLCByZWZQYXJ0cywgeyB5ZWFyOiAnbnVtZXJpYycgfSk7XG59O1xuY29uc3QgZ2V0Tm9ybWFsaXplZERhdGUgPSAocmVmUGFydHMpID0+IHtcbiAgY29uc3QgdGltZVN0cmluZyA9IHJlZlBhcnRzLmhvdXIgIT09IHVuZGVmaW5lZCAmJiByZWZQYXJ0cy5taW51dGUgIT09IHVuZGVmaW5lZCA/IGAgJHtyZWZQYXJ0cy5ob3VyfToke3JlZlBhcnRzLm1pbnV0ZX1gIDogJyc7XG4gIHJldHVybiBuZXcgRGF0ZShgJHtyZWZQYXJ0cy5tb250aH0vJHtyZWZQYXJ0cy5kYXl9LyR7cmVmUGFydHMueWVhcn0ke3RpbWVTdHJpbmd9IEdNVCswMDAwYCk7XG59O1xuLyoqXG4gKiBHaXZlbiBhIGxvY2FsZSwgRGF0ZXRpbWVQYXJ0cywgYW5kIG9wdGlvbnNcbiAqIGZvcm1hdCB0aGUgRGF0ZXRpbWVQYXJ0cyBhY2NvcmRpbmcgdG8gdGhlIG9wdGlvbnNcbiAqIGFuZCBsb2NhbGUgY29tYmluYXRpb24uIFRoaXMgcmV0dXJucyBhIHN0cmluZy4gSWZcbiAqIHlvdSB3YW50IGFuIGFycmF5IG9mIHRoZSBpbmRpdmlkdWFsIHBpZWNlc1xuICogdGhhdCBtYWtlIHVwIHRoZSBsb2NhbGl6ZWQgZGF0ZSBzdHJpbmcsIHVzZVxuICogZ2V0TG9jYWxpemVkRGF0ZVRpbWVQYXJ0cy5cbiAqL1xuY29uc3QgZ2V0TG9jYWxpemVkRGF0ZVRpbWUgPSAobG9jYWxlLCByZWZQYXJ0cywgb3B0aW9ucykgPT4ge1xuICBjb25zdCBkYXRlID0gZ2V0Tm9ybWFsaXplZERhdGUocmVmUGFydHMpO1xuICByZXR1cm4gZ2V0RGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBvcHRpb25zKS5mb3JtYXQoZGF0ZSk7XG59O1xuLyoqXG4gKiBHaXZlbiBhIGxvY2FsZSwgRGF0ZXRpbWVQYXJ0cywgYW5kIG9wdGlvbnNcbiAqIGZvcm1hdCB0aGUgRGF0ZXRpbWVQYXJ0cyBhY2NvcmRpbmcgdG8gdGhlIG9wdGlvbnNcbiAqIGFuZCBsb2NhbGUgY29tYmluYXRpb24uIFRoaXMgcmV0dXJucyBhbiBhcnJheSBvZlxuICogZWFjaCBwaWVjZSBvZiB0aGUgZGF0ZS5cbiAqL1xuY29uc3QgZ2V0TG9jYWxpemVkRGF0ZVRpbWVQYXJ0cyA9IChsb2NhbGUsIHJlZlBhcnRzLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGRhdGUgPSBnZXROb3JtYWxpemVkRGF0ZShyZWZQYXJ0cyk7XG4gIHJldHVybiBnZXREYXRlVGltZUZvcm1hdChsb2NhbGUsIG9wdGlvbnMpLmZvcm1hdFRvUGFydHMoZGF0ZSk7XG59O1xuLyoqXG4gKiBXcmFwcGVyIGZ1bmN0aW9uIGZvciBJbnRsLkRhdGVUaW1lRm9ybWF0LlxuICogQWxsb3dzIGRldmVsb3BlcnMgdG8gYXBwbHkgYW4gYWxsb3dlZCBmb3JtYXQgdG8gRGF0ZXRpbWVQYXJ0cy5cbiAqIFRoaXMgZnVuY3Rpb24gYWxzbyBoYXMgYnVpbHQgaW4gc2FmZWd1YXJkcyBmb3Igb2xkZXIgYnJvd3NlciBidWdzXG4gKiB3aXRoIEludGwuRGF0ZVRpbWVGb3JtYXQuXG4gKi9cbmNvbnN0IGdldERhdGVUaW1lRm9ybWF0ID0gKGxvY2FsZSwgb3B0aW9ucykgPT4ge1xuICByZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHRpbWVab25lOiAnVVRDJyB9KSk7XG59O1xuLyoqXG4gKiBHZXRzIGEgbG9jYWxpemVkIHZlcnNpb24gb2YgXCJUb2RheVwiXG4gKiBGYWxscyBiYWNrIHRvIFwiVG9kYXlcIiBpbiBFbmdsaXNoIGZvclxuICogYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBSZWxhdGl2ZVRpbWVGb3JtYXQuXG4gKi9cbmNvbnN0IGdldFRvZGF5TGFiZWwgPSAobG9jYWxlKSA9PiB7XG4gIGlmICgnUmVsYXRpdmVUaW1lRm9ybWF0JyBpbiBJbnRsKSB7XG4gICAgY29uc3QgbGFiZWwgPSBuZXcgSW50bC5SZWxhdGl2ZVRpbWVGb3JtYXQobG9jYWxlLCB7IG51bWVyaWM6ICdhdXRvJyB9KS5mb3JtYXQoMCwgJ2RheScpO1xuICAgIHJldHVybiBsYWJlbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGxhYmVsLnNsaWNlKDEpO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiAnVG9kYXknO1xuICB9XG59O1xuLyoqXG4gKiBXaGVuIGNhbGxpbmcgdG9JU09TdHJpbmcoKSwgdGhlIGJyb3dzZXJcbiAqIHdpbGwgY29udmVydCB0aGUgZGF0ZSB0byBVVEMgdGltZSBieSBlaXRoZXIgYWRkaW5nXG4gKiBvciBzdWJ0cmFjdGluZyB0aGUgdGltZSB6b25lIG9mZnNldC5cbiAqIFRvIHdvcmsgYXJvdW5kIHRoaXMsIHdlIG5lZWQgdG8gZWl0aGVyIGFkZFxuICogb3Igc3VidHJhY3QgdGhlIHRpbWUgem9uZSBvZmZzZXQgdG8gdGhlIERhdGVcbiAqIG9iamVjdCBwcmlvciB0byBjYWxsaW5nIHRvSVNPU3RyaW5nKCkuXG4gKiBUaGlzIGFsbG93cyB1cyB0byBnZXQgYW4gSVNPIHN0cmluZ1xuICogdGhhdCBpcyBpbiB0aGUgdXNlcidzIHRpbWUgem9uZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogVGltZSB6b25lIG9mZnNldCBpcyAyNDBcbiAqIE1lYW5pbmc6IFRoZSBicm93c2VyIG5lZWRzIHRvIGFkZCAyNDAgbWludXRlc1xuICogdG8gdGhlIERhdGUgb2JqZWN0IHRvIGdldCBVVEMgdGltZS5cbiAqIFdoYXQgSW9uaWMgZG9lczogV2Ugc3VidHJhY3QgMjQwIG1pbnV0ZXNcbiAqIGZyb20gdGhlIERhdGUgb2JqZWN0LiBUaGUgYnJvd3NlciB0aGVuIGFkZHNcbiAqIDI0MCBtaW51dGVzIGluIHRvSVNPU3RyaW5nKCkuIFRoZSByZXN1bHRcbiAqIGlzIGEgdGltZSB0aGF0IGlzIGluIHRoZSB1c2VyJ3MgdGltZSB6b25lXG4gKiBhbmQgbm90IFVUQy5cbiAqXG4gKiBOb3RlOiBTb21lIHRpbWV6b25lcyBpbmNsdWRlIG1pbnV0ZSBhZGp1c3RtZW50c1xuICogc3VjaCBhcyAzMCBvciA0NSBtaW51dGVzLiBUaGlzIGlzIHdoeSB3ZSB1c2Ugc2V0TWludXRlc1xuICogaW5zdGVhZCBvZiBzZXRIb3Vycy5cbiAqIEV4YW1wbGU6IEluZGlhIFN0YW5kYXJkIFRpbWVcbiAqIFRpbWV6b25lIG9mZnNldDogLTMzMCA9IC01LjUgaG91cnMuXG4gKlxuICogTGlzdCBvZiB0aW1lem9uZXMgd2l0aCAzMCBhbmQgNDUgbWludXRlIHRpbWV6b25lczpcbiAqIGh0dHBzOi8vd3d3LnRpbWVhbmRkYXRlLmNvbS90aW1lL3RpbWUtem9uZXMtaW50ZXJlc3RpbmcuaHRtbFxuICovXG5jb25zdCByZW1vdmVEYXRlVHpPZmZzZXQgPSAoZGF0ZSkgPT4ge1xuICBjb25zdCB0ek9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgZGF0ZS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpIC0gdHpPZmZzZXQpO1xuICByZXR1cm4gZGF0ZTtcbn07XG5jb25zdCBEQVRFX0FNID0gcmVtb3ZlRGF0ZVR6T2Zmc2V0KG5ldyBEYXRlKCcyMDIyVDAxOjAwJykpO1xuY29uc3QgREFURV9QTSA9IHJlbW92ZURhdGVUek9mZnNldChuZXcgRGF0ZSgnMjAyMlQxMzowMCcpKTtcbi8qKlxuICogRm9ybWF0cyB0aGUgbG9jYWxlJ3Mgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXkgcGVyaW9kIChhbS9wbSkgZm9yIGEgZ2l2ZW5cbiAqIHJlZiBwYXJ0cyBkYXkgcGVyaW9kLlxuICpcbiAqIEBwYXJhbSBsb2NhbGUgVGhlIGxvY2FsZSB0byBmb3JtYXQgdGhlIGRheSBwZXJpb2QgaW4uXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGRhdGUgc3RyaW5nLCBpbiBJU08gZm9ybWF0LlxuICogQHJldHVybnMgVGhlIGxvY2FsaXplZCBkYXkgcGVyaW9kIChhbS9wbSkgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIHZhbHVlLlxuICovXG5jb25zdCBnZXRMb2NhbGl6ZWREYXlQZXJpb2QgPSAobG9jYWxlLCBkYXlQZXJpb2QpID0+IHtcbiAgY29uc3QgZGF0ZSA9IGRheVBlcmlvZCA9PT0gJ2FtJyA/IERBVEVfQU0gOiBEQVRFX1BNO1xuICBjb25zdCBsb2NhbGl6ZWREYXlQZXJpb2QgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHtcbiAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgdGltZVpvbmU6ICdVVEMnLFxuICB9KVxuICAgIC5mb3JtYXRUb1BhcnRzKGRhdGUpXG4gICAgLmZpbmQoKHBhcnQpID0+IHBhcnQudHlwZSA9PT0gJ2RheVBlcmlvZCcpO1xuICBpZiAobG9jYWxpemVkRGF5UGVyaW9kKSB7XG4gICAgcmV0dXJuIGxvY2FsaXplZERheVBlcmlvZC52YWx1ZTtcbiAgfVxuICByZXR1cm4gZ2V0Rm9ybWF0dGVkRGF5UGVyaW9kKGRheVBlcmlvZCk7XG59O1xuLyoqXG4gKiBGb3JtYXRzIHRoZSBkYXRldGltZSdzIHZhbHVlIHRvIGEgc3RyaW5nLCBmb3IgdXNlIGluIHRoZSBuYXRpdmUgaW5wdXQuXG4gKlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBmb3JtYXQsIGVpdGhlciBhbiBJU08gc3RyaW5nIG9yIGFuIGFycmF5IHRoZXJlb2YuXG4gKi9cbmNvbnN0IGZvcm1hdFZhbHVlID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGRhdGUgYXNcbiAqIGFuIElTTyBzdHJpbmcgaW4gdGhlIHVzZXInc1xuICogdGltZSB6b25lLlxuICovXG5jb25zdCBnZXRUb2RheSA9ICgpID0+IHtcbiAgLyoqXG4gICAqIGlvbi1kYXRldGltZSBpbnRlbnRpb25hbGx5IGRvZXMgbm90XG4gICAqIHBhcnNlIHRpbWUgem9uZXMvZG8gYXV0b21hdGljIHRpbWUgem9uZVxuICAgKiBjb252ZXJzaW9uIHdoZW4gYWNjZXB0aW5nIHVzZXIgaW5wdXQuXG4gICAqIEhvd2V2ZXIgd2hlbiB3ZSBnZXQgdG9kYXkncyBkYXRlIHN0cmluZyxcbiAgICogd2Ugd2FudCBpdCBmb3JtYXR0ZWQgcmVsYXRpdmUgdG8gdGhlIHVzZXInc1xuICAgKiB0aW1lIHpvbmUuXG4gICAqXG4gICAqIFdoZW4gY2FsbGluZyB0b0lTT1N0cmluZygpLCB0aGUgYnJvd3NlclxuICAgKiB3aWxsIGNvbnZlcnQgdGhlIGRhdGUgdG8gVVRDIHRpbWUgYnkgZWl0aGVyIGFkZGluZ1xuICAgKiBvciBzdWJ0cmFjdGluZyB0aGUgdGltZSB6b25lIG9mZnNldC5cbiAgICogVG8gd29yayBhcm91bmQgdGhpcywgd2UgbmVlZCB0byBlaXRoZXIgYWRkXG4gICAqIG9yIHN1YnRyYWN0IHRoZSB0aW1lIHpvbmUgb2Zmc2V0IHRvIHRoZSBEYXRlXG4gICAqIG9iamVjdCBwcmlvciB0byBjYWxsaW5nIHRvSVNPU3RyaW5nKCkuXG4gICAqIFRoaXMgYWxsb3dzIHVzIHRvIGdldCBhbiBJU08gc3RyaW5nXG4gICAqIHRoYXQgaXMgaW4gdGhlIHVzZXIncyB0aW1lIHpvbmUuXG4gICAqL1xuICByZXR1cm4gcmVtb3ZlRGF0ZVR6T2Zmc2V0KG5ldyBEYXRlKCkpLnRvSVNPU3RyaW5nKCk7XG59O1xuY29uc3QgbWludXRlcyA9IFtcbiAgMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwLCAyMSwgMjIsIDIzLCAyNCwgMjUsIDI2LCAyNywgMjgsIDI5LCAzMCwgMzEsXG4gIDMyLCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQxLCA0MiwgNDMsIDQ0LCA0NSwgNDYsIDQ3LCA0OCwgNDksIDUwLCA1MSwgNTIsIDUzLCA1NCwgNTUsIDU2LCA1NywgNTgsIDU5LFxuXTtcbmNvbnN0IGhvdXIxMiA9IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTFdO1xuY29uc3QgaG91cjIzID0gWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyM107XG4vKipcbiAqIEdpdmVuIGEgbG9jYWxlIGFuZCBhIG1vZGUsXG4gKiByZXR1cm4gYW4gYXJyYXkgd2l0aCBmb3JtYXR0ZWQgZGF5c1xuICogb2YgdGhlIHdlZWsuIGlPUyBzaG91bGQgZGlzcGxheSBkYXlzXG4gKiBzdWNoIGFzIFwiTW9uXCIgb3IgXCJUdWVcIi5cbiAqIE1EIHNob3VsZCBkaXNwbGF5IGRheXMgc3VjaCBhcyBcIk1cIlxuICogb3IgXCJUXCIuXG4gKi9cbmNvbnN0IGdldERheXNPZldlZWsgPSAobG9jYWxlLCBtb2RlLCBmaXJzdERheU9mV2VlayA9IDApID0+IHtcbiAgLyoqXG4gICAqIE5vdiAxc3QsIDIwMjAgc3RhcnRzIG9uIGEgU3VuZGF5LlxuICAgKiBpb24tZGF0ZXRpbWUgYXNzdW1lcyB3ZWVrcyBzdGFydCBvbiBTdW5kYXksXG4gICAqIGJ1dCBpcyBjb25maWd1cmFibGUgdmlhIGBmaXJzdERheU9mV2Vla2AuXG4gICAqL1xuICBjb25zdCB3ZWVrZGF5Rm9ybWF0ID0gbW9kZSA9PT0gJ2lvcycgPyAnc2hvcnQnIDogJ25hcnJvdyc7XG4gIGNvbnN0IGludGwgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIHsgd2Vla2RheTogd2Vla2RheUZvcm1hdCB9KTtcbiAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoJzExLzAxLzIwMjAnKTtcbiAgY29uc3QgZGF5c09mV2VlayA9IFtdO1xuICAvKipcbiAgICogRm9yIGVhY2ggZGF5IG9mIHRoZSB3ZWVrLFxuICAgKiBnZXQgdGhlIGRheSBuYW1lLlxuICAgKi9cbiAgZm9yIChsZXQgaSA9IGZpcnN0RGF5T2ZXZWVrOyBpIDwgZmlyc3REYXlPZldlZWsgKyA3OyBpKyspIHtcbiAgICBjb25zdCBjdXJyZW50RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSk7XG4gICAgY3VycmVudERhdGUuc2V0RGF0ZShjdXJyZW50RGF0ZS5nZXREYXRlKCkgKyBpKTtcbiAgICBkYXlzT2ZXZWVrLnB1c2goaW50bC5mb3JtYXQoY3VycmVudERhdGUpKTtcbiAgfVxuICByZXR1cm4gZGF5c09mV2Vlaztcbn07XG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyBhbGwgb2YgdGhlXG4gKiBkYXlzIGluIGEgbW9udGggZm9yIGEgZ2l2ZW4geWVhci4gVmFsdWVzIGFyZVxuICogYWxpZ25lZCB3aXRoIGEgd2VlayBjYWxlbmRhciBzdGFydGluZyBvblxuICogdGhlIGZpcnN0RGF5T2ZXZWVrIHZhbHVlIChTdW5kYXkgYnkgZGVmYXVsdClcbiAqIHVzaW5nIG51bGwgdmFsdWVzLlxuICovXG5jb25zdCBnZXREYXlzT2ZNb250aCA9IChtb250aCwgeWVhciwgZmlyc3REYXlPZldlZWspID0+IHtcbiAgY29uc3QgbnVtRGF5cyA9IGdldE51bURheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKTtcbiAgY29uc3QgZmlyc3RPZk1vbnRoID0gbmV3IERhdGUoYCR7bW9udGh9LzEvJHt5ZWFyfWApLmdldERheSgpO1xuICAvKipcbiAgICogVG8gZ2V0IHRoZSBmaXJzdCBkYXkgb2YgdGhlIG1vbnRoIGFsaWduZWQgb24gdGhlIGNvcnJlY3RcbiAgICogZGF5IG9mIHRoZSB3ZWVrLCB3ZSBuZWVkIHRvIGRldGVybWluZSBob3cgbWFueSBcImZpbGxlclwiIGRheXNcbiAgICogdG8gZ2VuZXJhdGUuIFRoZXNlIGZpbGxlciBkYXlzIGFzIGVtcHR5L2Rpc2FibGVkIGJ1dHRvbnNcbiAgICogdGhhdCBmaWxsIHRoZSBzcGFjZSBvZiB0aGUgZGF5cyBvZiB0aGUgd2VlayBiZWZvcmUgdGhlIGZpcnN0XG4gICAqIG9mIHRoZSBtb250aC5cbiAgICpcbiAgICogVGhlcmUgYXJlIHR3byBjYXNlcyBoZXJlOlxuICAgKlxuICAgKiAxLiBJZiBmaXJzdE9mTW9udGggPSA0LCBmaXJzdERheU9mV2VlayA9IDAgdGhlbiB0aGUgb2Zmc2V0XG4gICAqIGlzICg0IC0gKDAgKyAxKSkgPSAzLiBTaW5jZSB0aGUgb2Zmc2V0IGxvb3AgZ29lcyBmcm9tIDAgdG8gMyBpbmNsdXNpdmUsXG4gICAqIHRoaXMgd2lsbCBnZW5lcmF0ZSA0IGZpbGxlciBkYXlzICgwLCAxLCAyLCAzKSwgYW5kIHRoZW4gZGF5IG9mIHdlZWsgNCB3aWxsIGhhdmVcbiAgICogdGhlIGZpcnN0IGRheSBvZiB0aGUgbW9udGguXG4gICAqXG4gICAqIDIuIElmIGZpcnN0T2ZNb250aCA9IDIsIGZpcnN0RGF5T2ZXZWVrID0gNCB0aGVuIHRoZSBvZmZzZXRcbiAgICogaXMgKDYgLSAoNCAtIDIpKSA9IDQuIFNpbmNlIHRoZSBvZmZzZXQgbG9vcCBnb2VzIGZyb20gMCB0byA0IGluY2x1c2l2ZSxcbiAgICogdGhpcyB3aWxsIGdlbmVyYXRlIDUgZmlsbGVyIGRheXMgKDAsIDEsIDIsIDMsIDQpLCBhbmQgdGhlbiBkYXkgb2Ygd2VlayA1IHdpbGwgaGF2ZVxuICAgKiB0aGUgZmlyc3QgZGF5IG9mIHRoZSBtb250aC5cbiAgICovXG4gIGNvbnN0IG9mZnNldCA9IGZpcnN0T2ZNb250aCA+PSBmaXJzdERheU9mV2VlayA/IGZpcnN0T2ZNb250aCAtIChmaXJzdERheU9mV2VlayArIDEpIDogNiAtIChmaXJzdERheU9mV2VlayAtIGZpcnN0T2ZNb250aCk7XG4gIGxldCBkYXlzID0gW107XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IG51bURheXM7IGkrKykge1xuICAgIGRheXMucHVzaCh7IGRheTogaSwgZGF5T2ZXZWVrOiAob2Zmc2V0ICsgaSkgJSA3IH0pO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IG9mZnNldDsgaSsrKSB7XG4gICAgZGF5cyA9IFt7IGRheTogbnVsbCwgZGF5T2ZXZWVrOiBudWxsIH0sIC4uLmRheXNdO1xuICB9XG4gIHJldHVybiBkYXlzO1xufTtcbi8qKlxuICogR2l2ZW4gYSBsb2NhbCwgcmVmZXJlbmNlIGRhdGV0aW1lIHBhcnRzIGFuZCBvcHRpb25cbiAqIG1heC9taW4gYm91bmQgZGF0ZXRpbWUgcGFydHMsIGNhbGN1bGF0ZSB0aGUgYWNjZXB0YWJsZVxuICogaG91ciBhbmQgbWludXRlIHZhbHVlcyBhY2NvcmRpbmcgdG8gdGhlIGJvdW5kcyBhbmQgbG9jYWxlLlxuICovXG5jb25zdCBnZW5lcmF0ZVRpbWUgPSAocmVmUGFydHMsIGhvdXJDeWNsZSA9ICdoMTInLCBtaW5QYXJ0cywgbWF4UGFydHMsIGhvdXJWYWx1ZXMsIG1pbnV0ZVZhbHVlcykgPT4ge1xuICBjb25zdCB1c2UyNEhvdXIgPSBob3VyQ3ljbGUgPT09ICdoMjMnO1xuICBsZXQgcHJvY2Vzc2VkSG91cnMgPSB1c2UyNEhvdXIgPyBob3VyMjMgOiBob3VyMTI7XG4gIGxldCBwcm9jZXNzZWRNaW51dGVzID0gbWludXRlcztcbiAgbGV0IGlzQU1BbGxvd2VkID0gdHJ1ZTtcbiAgbGV0IGlzUE1BbGxvd2VkID0gdHJ1ZTtcbiAgaWYgKGhvdXJWYWx1ZXMpIHtcbiAgICBwcm9jZXNzZWRIb3VycyA9IHByb2Nlc3NlZEhvdXJzLmZpbHRlcigoaG91cikgPT4gaG91clZhbHVlcy5pbmNsdWRlcyhob3VyKSk7XG4gIH1cbiAgaWYgKG1pbnV0ZVZhbHVlcykge1xuICAgIHByb2Nlc3NlZE1pbnV0ZXMgPSBwcm9jZXNzZWRNaW51dGVzLmZpbHRlcigobWludXRlKSA9PiBtaW51dGVWYWx1ZXMuaW5jbHVkZXMobWludXRlKSk7XG4gIH1cbiAgaWYgKG1pblBhcnRzKSB7XG4gICAgLyoqXG4gICAgICogSWYgcmVmIGRheSBpcyB0aGUgc2FtZSBhcyB0aGVcbiAgICAgKiBtaW5pbXVtIGFsbG93ZWQgZGF5LCBmaWx0ZXIgaG91ci9taW51dGVcbiAgICAgKiB2YWx1ZXMgYWNjb3JkaW5nIHRvIG1pbiBob3VyIGFuZCBtaW51dGUuXG4gICAgICovXG4gICAgaWYgKGlzU2FtZURheShyZWZQYXJ0cywgbWluUGFydHMpKSB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZXJzIG1heSBub3QgYWx3YXlzIHNldCB0aGUgaG91ci9taW51dGUgZm9yXG4gICAgICAgKiBtaW4gdmFsdWUgKGkuZS4gMjAyMS0wNi0wMikgc28gd2Ugc2hvdWxkIGFsbG93XG4gICAgICAgKiBhbGwgaG91cnMvbWludXRlcyBpbiB0aGF0IGNhc2UuXG4gICAgICAgKi9cbiAgICAgIGlmIChtaW5QYXJ0cy5ob3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvY2Vzc2VkSG91cnMgPSBwcm9jZXNzZWRIb3Vycy5maWx0ZXIoKGhvdXIpID0+IHtcbiAgICAgICAgICBjb25zdCBjb252ZXJ0ZWRIb3VyID0gcmVmUGFydHMuYW1wbSA9PT0gJ3BtJyA/IChob3VyICsgMTIpICUgMjQgOiBob3VyO1xuICAgICAgICAgIHJldHVybiAodXNlMjRIb3VyID8gaG91ciA6IGNvbnZlcnRlZEhvdXIpID49IG1pblBhcnRzLmhvdXI7XG4gICAgICAgIH0pO1xuICAgICAgICBpc0FNQWxsb3dlZCA9IG1pblBhcnRzLmhvdXIgPCAxMztcbiAgICAgIH1cbiAgICAgIGlmIChtaW5QYXJ0cy5taW51dGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1pbmltdW0gbWludXRlIHJhbmdlIHNob3VsZCBub3QgYmUgZW5mb3JjZWQgd2hlblxuICAgICAgICAgKiB0aGUgaG91ciBpcyBncmVhdGVyIHRoYW4gdGhlIG1pbiBob3VyLlxuICAgICAgICAgKlxuICAgICAgICAgKiBGb3IgZXhhbXBsZSB3aXRoIGEgbWluaW11bSByYW5nZSBvZiAwOTozMCwgdXNlcnNcbiAgICAgICAgICogc2hvdWxkIGJlIGFibGUgdG8gc2VsZWN0IDEwOjAwLTEwOjI5IGFuZCBiZXlvbmQuXG4gICAgICAgICAqL1xuICAgICAgICBsZXQgaXNQYXN0TWluSG91ciA9IGZhbHNlO1xuICAgICAgICBpZiAobWluUGFydHMuaG91ciAhPT0gdW5kZWZpbmVkICYmIHJlZlBhcnRzLmhvdXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZWZQYXJ0cy5ob3VyID4gbWluUGFydHMuaG91cikge1xuICAgICAgICAgICAgaXNQYXN0TWluSG91ciA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NlZE1pbnV0ZXMgPSBwcm9jZXNzZWRNaW51dGVzLmZpbHRlcigobWludXRlKSA9PiB7XG4gICAgICAgICAgaWYgKGlzUGFzdE1pbkhvdXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbWludXRlID49IG1pblBhcnRzLm1pbnV0ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIElmIHJlZiBkYXkgaXMgYmVmb3JlIG1pbmltdW1cbiAgICAgICAqIGRheSBkbyBub3QgcmVuZGVyIGFueSBob3Vycy9taW51dGUgdmFsdWVzXG4gICAgICAgKi9cbiAgICB9XG4gICAgZWxzZSBpZiAoaXNCZWZvcmUocmVmUGFydHMsIG1pblBhcnRzKSkge1xuICAgICAgcHJvY2Vzc2VkSG91cnMgPSBbXTtcbiAgICAgIHByb2Nlc3NlZE1pbnV0ZXMgPSBbXTtcbiAgICAgIGlzQU1BbGxvd2VkID0gaXNQTUFsbG93ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKG1heFBhcnRzKSB7XG4gICAgLyoqXG4gICAgICogSWYgcmVmIGRheSBpcyB0aGUgc2FtZSBhcyB0aGVcbiAgICAgKiBtYXhpbXVtIGFsbG93ZWQgZGF5LCBmaWx0ZXIgaG91ci9taW51dGVcbiAgICAgKiB2YWx1ZXMgYWNjb3JkaW5nIHRvIG1heCBob3VyIGFuZCBtaW51dGUuXG4gICAgICovXG4gICAgaWYgKGlzU2FtZURheShyZWZQYXJ0cywgbWF4UGFydHMpKSB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZXJzIG1heSBub3QgYWx3YXlzIHNldCB0aGUgaG91ci9taW51dGUgZm9yXG4gICAgICAgKiBtYXggdmFsdWUgKGkuZS4gMjAyMS0wNi0wMikgc28gd2Ugc2hvdWxkIGFsbG93XG4gICAgICAgKiBhbGwgaG91cnMvbWludXRlcyBpbiB0aGF0IGNhc2UuXG4gICAgICAgKi9cbiAgICAgIGlmIChtYXhQYXJ0cy5ob3VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvY2Vzc2VkSG91cnMgPSBwcm9jZXNzZWRIb3Vycy5maWx0ZXIoKGhvdXIpID0+IHtcbiAgICAgICAgICBjb25zdCBjb252ZXJ0ZWRIb3VyID0gcmVmUGFydHMuYW1wbSA9PT0gJ3BtJyA/IChob3VyICsgMTIpICUgMjQgOiBob3VyO1xuICAgICAgICAgIHJldHVybiAodXNlMjRIb3VyID8gaG91ciA6IGNvbnZlcnRlZEhvdXIpIDw9IG1heFBhcnRzLmhvdXI7XG4gICAgICAgIH0pO1xuICAgICAgICBpc1BNQWxsb3dlZCA9IG1heFBhcnRzLmhvdXIgPj0gMTI7XG4gICAgICB9XG4gICAgICBpZiAobWF4UGFydHMubWludXRlICE9PSB1bmRlZmluZWQgJiYgcmVmUGFydHMuaG91ciA9PT0gbWF4UGFydHMuaG91cikge1xuICAgICAgICAvLyBUaGUgYXZhaWxhYmxlIG1pbnV0ZXMgc2hvdWxkIG9ubHkgYmUgZmlsdGVyZWQgd2hlbiB0aGUgaG91ciBpcyB0aGUgc2FtZSBhcyB0aGUgbWF4IGhvdXIuXG4gICAgICAgIC8vIEZvciBleGFtcGxlIGlmIHRoZSBtYXggaG91ciBpcyAxMDozMCBhbmQgdGhlIGN1cnJlbnQgaG91ciBpcyAxMDowMCxcbiAgICAgICAgLy8gdXNlcnMgc2hvdWxkIGJlIGFibGUgdG8gc2VsZWN0IDAwLTMwIG1pbnV0ZXMuXG4gICAgICAgIC8vIElmIHRoZSBjdXJyZW50IGhvdXIgaXMgMDk6MDAsIHVzZXJzIHNob3VsZCBiZSBhYmxlIHRvIHNlbGVjdCAwMC02MCBtaW51dGVzLlxuICAgICAgICBwcm9jZXNzZWRNaW51dGVzID0gcHJvY2Vzc2VkTWludXRlcy5maWx0ZXIoKG1pbnV0ZSkgPT4gbWludXRlIDw9IG1heFBhcnRzLm1pbnV0ZSk7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIElmIHJlZiBkYXkgaXMgYWZ0ZXIgbWluaW11bVxuICAgICAgICogZGF5IGRvIG5vdCByZW5kZXIgYW55IGhvdXJzL21pbnV0ZSB2YWx1ZXNcbiAgICAgICAqL1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0FmdGVyKHJlZlBhcnRzLCBtYXhQYXJ0cykpIHtcbiAgICAgIHByb2Nlc3NlZEhvdXJzID0gW107XG4gICAgICBwcm9jZXNzZWRNaW51dGVzID0gW107XG4gICAgICBpc0FNQWxsb3dlZCA9IGlzUE1BbGxvd2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgaG91cnM6IHByb2Nlc3NlZEhvdXJzLFxuICAgIG1pbnV0ZXM6IHByb2Nlc3NlZE1pbnV0ZXMsXG4gICAgYW06IGlzQU1BbGxvd2VkLFxuICAgIHBtOiBpc1BNQWxsb3dlZCxcbiAgfTtcbn07XG4vKipcbiAqIEdpdmVuIERhdGV0aW1lUGFydHMsIGdlbmVyYXRlIHRoZSBwcmV2aW91cyxcbiAqIGN1cnJlbnQsIGFuZCBhbmQgbmV4dCBtb250aHMuXG4gKi9cbmNvbnN0IGdlbmVyYXRlTW9udGhzID0gKHJlZlBhcnRzKSA9PiB7XG4gIHJldHVybiBbXG4gICAgZ2V0UHJldmlvdXNNb250aChyZWZQYXJ0cyksXG4gICAgeyBtb250aDogcmVmUGFydHMubW9udGgsIHllYXI6IHJlZlBhcnRzLnllYXIsIGRheTogcmVmUGFydHMuZGF5IH0sXG4gICAgZ2V0TmV4dE1vbnRoKHJlZlBhcnRzKSxcbiAgXTtcbn07XG5jb25zdCBnZXRNb250aENvbHVtbkRhdGEgPSAobG9jYWxlLCByZWZQYXJ0cywgbWluUGFydHMsIG1heFBhcnRzLCBtb250aFZhbHVlcywgZm9ybWF0T3B0aW9ucyA9IHtcbiAgbW9udGg6ICdsb25nJyxcbn0pID0+IHtcbiAgY29uc3QgeyB5ZWFyIH0gPSByZWZQYXJ0cztcbiAgY29uc3QgbW9udGhzID0gW107XG4gIGlmIChtb250aFZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbGV0IHByb2Nlc3NlZE1vbnRocyA9IG1vbnRoVmFsdWVzO1xuICAgIGlmICgobWF4UGFydHMgPT09IG51bGwgfHwgbWF4UGFydHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1heFBhcnRzLm1vbnRoKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9jZXNzZWRNb250aHMgPSBwcm9jZXNzZWRNb250aHMuZmlsdGVyKChtb250aCkgPT4gbW9udGggPD0gbWF4UGFydHMubW9udGgpO1xuICAgIH1cbiAgICBpZiAoKG1pblBhcnRzID09PSBudWxsIHx8IG1pblBhcnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtaW5QYXJ0cy5tb250aCkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvY2Vzc2VkTW9udGhzID0gcHJvY2Vzc2VkTW9udGhzLmZpbHRlcigobW9udGgpID0+IG1vbnRoID49IG1pblBhcnRzLm1vbnRoKTtcbiAgICB9XG4gICAgcHJvY2Vzc2VkTW9udGhzLmZvckVhY2goKHByb2Nlc3NlZE1vbnRoKSA9PiB7XG4gICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoYCR7cHJvY2Vzc2VkTW9udGh9LzEvJHt5ZWFyfSBHTVQrMDAwMGApO1xuICAgICAgY29uc3QgbW9udGhTdHJpbmcgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZm9ybWF0T3B0aW9ucyksIHsgdGltZVpvbmU6ICdVVEMnIH0pKS5mb3JtYXQoZGF0ZSk7XG4gICAgICBtb250aHMucHVzaCh7IHRleHQ6IG1vbnRoU3RyaW5nLCB2YWx1ZTogcHJvY2Vzc2VkTW9udGggfSk7XG4gICAgfSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgY29uc3QgbWF4TW9udGggPSBtYXhQYXJ0cyAmJiBtYXhQYXJ0cy55ZWFyID09PSB5ZWFyID8gbWF4UGFydHMubW9udGggOiAxMjtcbiAgICBjb25zdCBtaW5Nb250aCA9IG1pblBhcnRzICYmIG1pblBhcnRzLnllYXIgPT09IHllYXIgPyBtaW5QYXJ0cy5tb250aCA6IDE7XG4gICAgZm9yIChsZXQgaSA9IG1pbk1vbnRoOyBpIDw9IG1heE1vbnRoOyBpKyspIHtcbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIFRoZXJlIGlzIGEgYnVnIG9uIGlPUyAxNCB3aGVyZVxuICAgICAgICogSW50bC5EYXRlVGltZUZvcm1hdCB0YWtlcyBpbnRvIGFjY291bnRcbiAgICAgICAqIHRoZSBsb2NhbCB0aW1lem9uZSBvZmZzZXQgd2hlbiBmb3JtYXR0aW5nIGRhdGVzLlxuICAgICAgICpcbiAgICAgICAqIEZvcmNpbmcgdGhlIHRpbWV6b25lIHRvICdVVEMnIGZpeGVzIHRoZSBpc3N1ZS4gSG93ZXZlcixcbiAgICAgICAqIHdlIHNob3VsZCBrZWVwIHRoaXMgd29ya2Fyb3VuZCBhcyBpdCBpcyBzYWZlci4gSW4gdGhlIGV2ZW50XG4gICAgICAgKiB0aGlzIGJyZWFrcyBpbiBhbm90aGVyIGJyb3dzZXIsIHdlIHdpbGwgbm90IGJlIGltcGFjdGVkXG4gICAgICAgKiBiZWNhdXNlIGFsbCBkYXRlcyB3aWxsIGJlIGludGVycHJldGVkIGluIFVUQy5cbiAgICAgICAqXG4gICAgICAgKiBFeGFtcGxlOlxuICAgICAgICogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywgeyBtb250aDogJ2xvbmcnIH0pLmZvcm1hdChuZXcgRGF0ZSgnU2F0IEFwciAwMSAyMDA2IDAwOjAwOjAwIEdNVC0wNDAwIChFRFQpJykpIC8vIFwiTWFyY2hcIlxuICAgICAgICogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywgeyBtb250aDogJ2xvbmcnLCB0aW1lWm9uZTogJ1VUQycgfSkuZm9ybWF0KG5ldyBEYXRlKCdTYXQgQXByIDAxIDIwMDYgMDA6MDA6MDAgR01ULTA0MDAgKEVEVCknKSkgLy8gXCJBcHJpbFwiXG4gICAgICAgKlxuICAgICAgICogSW4gY2VydGFpbiB0aW1lem9uZXMsIGlPUyAxNCBzaG93cyB0aGUgd3JvbmdcbiAgICAgICAqIGRhdGUgZm9yIC50b1VUQ1N0cmluZygpLiBUbyBjb21iYXQgdGhpcywgd2VcbiAgICAgICAqIGZvcmNlIGFsbCBvZiB0aGUgdGltZXpvbmVzIHRvIEdNVCswMDAwIChVVEMpLlxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGU6XG4gICAgICAgKiBUaW1lIFpvbmU6IENlbnRyYWwgRXVyb3BlYW4gU3RhbmRhcmQgVGltZVxuICAgICAgICogbmV3IERhdGUoJzEvMS8xOTkyJykudG9VVENTdHJpbmcoKSAvLyBcIlR1ZSwgMzEgRGVjIDE5OTEgMjM6MDA6MDAgR01UXCJcbiAgICAgICAqIG5ldyBEYXRlKCcxLzEvMTk5MiBHTVQrMDAwMCcpLnRvVVRDU3RyaW5nKCkgLy8gXCJXZWQsIDAxIEphbiAxOTkyIDAwOjAwOjAwIEdNVFwiXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShgJHtpfS8xLyR7eWVhcn0gR01UKzAwMDBgKTtcbiAgICAgIGNvbnN0IG1vbnRoU3RyaW5nID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZvcm1hdE9wdGlvbnMpLCB7IHRpbWVab25lOiAnVVRDJyB9KSkuZm9ybWF0KGRhdGUpO1xuICAgICAgbW9udGhzLnB1c2goeyB0ZXh0OiBtb250aFN0cmluZywgdmFsdWU6IGkgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb250aHM7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGluZm9ybWF0aW9uIHJlZ2FyZGluZ1xuICogc2VsZWN0YWJsZSBkYXRlcyAoaS5lIDFzdCwgMm5kLCAzcmQsIGV0YylcbiAqIHdpdGhpbiBhIHJlZmVyZW5jZSBtb250aC5cbiAqIEBwYXJhbSBsb2NhbGUgVGhlIGxvY2FsZSB0byBmb3JtYXQgdGhlIGRhdGUgd2l0aFxuICogQHBhcmFtIHJlZlBhcnRzIFRoZSByZWZlcmVuY2UgbW9udGgveWVhciB0byBnZW5lcmF0ZSBkYXRlcyBmb3JcbiAqIEBwYXJhbSBtaW5QYXJ0cyBUaGUgbWluaW11bSBib3VuZCBvbiB0aGUgZGF0ZSB0aGF0IGNhbiBiZSByZXR1cm5lZFxuICogQHBhcmFtIG1heFBhcnRzIFRoZSBtYXhpbXVtIGJvdW5kIG9uIHRoZSBkYXRlIHRoYXQgY2FuIGJlIHJldHVybmVkXG4gKiBAcGFyYW0gZGF5VmFsdWVzIFRoZSBhbGxvd2VkIGRhdGUgdmFsdWVzXG4gKiBAcmV0dXJucyBEYXRlIGRhdGEgdG8gYmUgdXNlZCBpbiBpb24tcGlja2VyLWNvbHVtbi1pbnRlcm5hbFxuICovXG5jb25zdCBnZXREYXlDb2x1bW5EYXRhID0gKGxvY2FsZSwgcmVmUGFydHMsIG1pblBhcnRzLCBtYXhQYXJ0cywgZGF5VmFsdWVzLCBmb3JtYXRPcHRpb25zID0ge1xuICBkYXk6ICdudW1lcmljJyxcbn0pID0+IHtcbiAgY29uc3QgeyBtb250aCwgeWVhciB9ID0gcmVmUGFydHM7XG4gIGNvbnN0IGRheXMgPSBbXTtcbiAgLyoqXG4gICAqIElmIHdlIGhhdmUgbWF4L21pbiBib3VuZHMgdGhhdCBpbiB0aGUgc2FtZVxuICAgKiBtb250aC95ZWFyIGFzIHRoZSByZWZQYXJ0cywgd2Ugc2hvdWxkXG4gICAqIHVzZSB0aGUgZGVmaW5lIGRheSBhcyB0aGUgbWF4L21pbiBkYXkuXG4gICAqIE90aGVyd2lzZSwgZmFsbGJhY2sgdG8gdGhlIG1heC9taW4gZGF5cyBpbiBhIG1vbnRoLlxuICAgKi9cbiAgY29uc3QgbnVtRGF5c0luTW9udGggPSBnZXROdW1EYXlzSW5Nb250aChtb250aCwgeWVhcik7XG4gIGNvbnN0IG1heERheSA9IChtYXhQYXJ0cyA9PT0gbnVsbCB8fCBtYXhQYXJ0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWF4UGFydHMuZGF5KSAhPT0gbnVsbCAmJiAobWF4UGFydHMgPT09IG51bGwgfHwgbWF4UGFydHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1heFBhcnRzLmRheSkgIT09IHVuZGVmaW5lZCAmJiBtYXhQYXJ0cy55ZWFyID09PSB5ZWFyICYmIG1heFBhcnRzLm1vbnRoID09PSBtb250aFxuICAgID8gbWF4UGFydHMuZGF5XG4gICAgOiBudW1EYXlzSW5Nb250aDtcbiAgY29uc3QgbWluRGF5ID0gKG1pblBhcnRzID09PSBudWxsIHx8IG1pblBhcnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtaW5QYXJ0cy5kYXkpICE9PSBudWxsICYmIChtaW5QYXJ0cyA9PT0gbnVsbCB8fCBtaW5QYXJ0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWluUGFydHMuZGF5KSAhPT0gdW5kZWZpbmVkICYmIG1pblBhcnRzLnllYXIgPT09IHllYXIgJiYgbWluUGFydHMubW9udGggPT09IG1vbnRoXG4gICAgPyBtaW5QYXJ0cy5kYXlcbiAgICA6IDE7XG4gIGlmIChkYXlWYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBwcm9jZXNzZWREYXlzID0gZGF5VmFsdWVzO1xuICAgIHByb2Nlc3NlZERheXMgPSBwcm9jZXNzZWREYXlzLmZpbHRlcigoZGF5KSA9PiBkYXkgPj0gbWluRGF5ICYmIGRheSA8PSBtYXhEYXkpO1xuICAgIHByb2Nlc3NlZERheXMuZm9yRWFjaCgocHJvY2Vzc2VkRGF5KSA9PiB7XG4gICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoYCR7bW9udGh9LyR7cHJvY2Vzc2VkRGF5fS8ke3llYXJ9IEdNVCswMDAwYCk7XG4gICAgICBjb25zdCBkYXlTdHJpbmcgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZm9ybWF0T3B0aW9ucyksIHsgdGltZVpvbmU6ICdVVEMnIH0pKS5mb3JtYXQoZGF0ZSk7XG4gICAgICBkYXlzLnB1c2goeyB0ZXh0OiBkYXlTdHJpbmcsIHZhbHVlOiBwcm9jZXNzZWREYXkgfSk7XG4gICAgfSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IG1pbkRheTsgaSA8PSBtYXhEYXk7IGkrKykge1xuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGAke21vbnRofS8ke2l9LyR7eWVhcn0gR01UKzAwMDBgKTtcbiAgICAgIGNvbnN0IGRheVN0cmluZyA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBmb3JtYXRPcHRpb25zKSwgeyB0aW1lWm9uZTogJ1VUQycgfSkpLmZvcm1hdChkYXRlKTtcbiAgICAgIGRheXMucHVzaCh7IHRleHQ6IGRheVN0cmluZywgdmFsdWU6IGkgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXlzO1xufTtcbmNvbnN0IGdldFllYXJDb2x1bW5EYXRhID0gKGxvY2FsZSwgcmVmUGFydHMsIG1pblBhcnRzLCBtYXhQYXJ0cywgeWVhclZhbHVlcykgPT4ge1xuICB2YXIgX2EsIF9iO1xuICBsZXQgcHJvY2Vzc2VkWWVhcnMgPSBbXTtcbiAgaWYgKHllYXJWYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb2Nlc3NlZFllYXJzID0geWVhclZhbHVlcztcbiAgICBpZiAoKG1heFBhcnRzID09PSBudWxsIHx8IG1heFBhcnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYXhQYXJ0cy55ZWFyKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcm9jZXNzZWRZZWFycyA9IHByb2Nlc3NlZFllYXJzLmZpbHRlcigoeWVhcikgPT4geWVhciA8PSBtYXhQYXJ0cy55ZWFyKTtcbiAgICB9XG4gICAgaWYgKChtaW5QYXJ0cyA9PT0gbnVsbCB8fCBtaW5QYXJ0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWluUGFydHMueWVhcikgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvY2Vzc2VkWWVhcnMgPSBwcm9jZXNzZWRZZWFycy5maWx0ZXIoKHllYXIpID0+IHllYXIgPj0gbWluUGFydHMueWVhcik7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGNvbnN0IHsgeWVhciB9ID0gcmVmUGFydHM7XG4gICAgY29uc3QgbWF4WWVhciA9IChfYSA9IG1heFBhcnRzID09PSBudWxsIHx8IG1heFBhcnRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYXhQYXJ0cy55ZWFyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB5ZWFyO1xuICAgIGNvbnN0IG1pblllYXIgPSAoX2IgPSBtaW5QYXJ0cyA9PT0gbnVsbCB8fCBtaW5QYXJ0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWluUGFydHMueWVhcikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogeWVhciAtIDEwMDtcbiAgICBmb3IgKGxldCBpID0gbWF4WWVhcjsgaSA+PSBtaW5ZZWFyOyBpLS0pIHtcbiAgICAgIHByb2Nlc3NlZFllYXJzLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9jZXNzZWRZZWFycy5tYXAoKHllYXIpID0+ICh7XG4gICAgdGV4dDogZ2V0WWVhcihsb2NhbGUsIHsgeWVhciwgbW9udGg6IHJlZlBhcnRzLm1vbnRoLCBkYXk6IHJlZlBhcnRzLmRheSB9KSxcbiAgICB2YWx1ZTogeWVhcixcbiAgfSkpO1xufTtcbi8qKlxuICogR2l2ZW4gYSBzdGFydGluZyBkYXRlIGFuZCBhbiB1cHBlciBib3VuZCxcbiAqIHRoaXMgZnVuY3Rpb25zIHJldHVybnMgYW4gYXJyYXkgb2YgYWxsXG4gKiBtb250aCBvYmplY3RzIGluIHRoYXQgcmFuZ2UuXG4gKi9cbmNvbnN0IGdldEFsbE1vbnRoc0luUmFuZ2UgPSAoY3VycmVudFBhcnRzLCBtYXhQYXJ0cykgPT4ge1xuICBpZiAoY3VycmVudFBhcnRzLm1vbnRoID09PSBtYXhQYXJ0cy5tb250aCAmJiBjdXJyZW50UGFydHMueWVhciA9PT0gbWF4UGFydHMueWVhcikge1xuICAgIHJldHVybiBbY3VycmVudFBhcnRzXTtcbiAgfVxuICByZXR1cm4gW2N1cnJlbnRQYXJ0cywgLi4uZ2V0QWxsTW9udGhzSW5SYW5nZShnZXROZXh0TW9udGgoY3VycmVudFBhcnRzKSwgbWF4UGFydHMpXTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYW5kIHJldHVybnMgcGlja2VyIGl0ZW1zXG4gKiB0aGF0IHJlcHJlc2VudCB0aGUgZGF5cyBpbiBhIG1vbnRoLlxuICogRXhhbXBsZTogXCJUaHUsIEp1biAyXCJcbiAqL1xuY29uc3QgZ2V0Q29tYmluZWREYXRlQ29sdW1uRGF0YSA9IChsb2NhbGUsIHRvZGF5UGFydHMsIG1pblBhcnRzLCBtYXhQYXJ0cywgZGF5VmFsdWVzLCBtb250aFZhbHVlcykgPT4ge1xuICBsZXQgaXRlbXMgPSBbXTtcbiAgbGV0IHBhcnRzID0gW107XG4gIC8qKlxuICAgKiBHZXQgYWxsIG1vbnRoIG9iamVjdHMgZnJvbSB0aGUgbWluIGRhdGVcbiAgICogdG8gdGhlIG1heCBkYXRlLiBOb3RlOiBEbyBub3QgdXNlIGdldE1vbnRoQ29sdW1uRGF0YVxuICAgKiBhcyB0aGF0IGZ1bmN0aW9uIG9ubHkgZ2VuZXJhdGVzIGRhdGVzIHdpdGhpbiBhXG4gICAqIHNpbmdsZSB5ZWFyLlxuICAgKi9cbiAgbGV0IG1vbnRocyA9IGdldEFsbE1vbnRoc0luUmFuZ2UobWluUGFydHMsIG1heFBhcnRzKTtcbiAgLyoqXG4gICAqIEZpbHRlciBvdXQgYW55IGRpc2FsbG93ZWQgbW9udGggdmFsdWVzLlxuICAgKi9cbiAgaWYgKG1vbnRoVmFsdWVzKSB7XG4gICAgbW9udGhzID0gbW9udGhzLmZpbHRlcigoeyBtb250aCB9KSA9PiBtb250aFZhbHVlcy5pbmNsdWRlcyhtb250aCkpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIG9mIHRoZSBkYXlzIGluIHRoZSBtb250aC5cbiAgICogRnJvbSB0aGVyZSwgZ2VuZXJhdGUgYW4gYXJyYXkgd2hlcmVcbiAgICogZWFjaCBpdGVtIGhhcyB0aGUgbW9udGgsIGRhdGUsIGFuZCBkYXlcbiAgICogb2Ygd29yayBhcyB0aGUgdGV4dC5cbiAgICovXG4gIG1vbnRocy5mb3JFYWNoKChtb250aE9iamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlZmVyZW5jZU1vbnRoID0geyBtb250aDogbW9udGhPYmplY3QubW9udGgsIGRheTogbnVsbCwgeWVhcjogbW9udGhPYmplY3QueWVhciB9O1xuICAgIGNvbnN0IG1vbnRoRGF5cyA9IGdldERheUNvbHVtbkRhdGEobG9jYWxlLCByZWZlcmVuY2VNb250aCwgbWluUGFydHMsIG1heFBhcnRzLCBkYXlWYWx1ZXMsIHtcbiAgICAgIG1vbnRoOiAnc2hvcnQnLFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICB3ZWVrZGF5OiAnc2hvcnQnLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGVQYXJ0cyA9IFtdO1xuICAgIGNvbnN0IGRhdGVDb2x1bW5JdGVtcyA9IFtdO1xuICAgIG1vbnRoRGF5cy5mb3JFYWNoKChkYXlPYmplY3QpID0+IHtcbiAgICAgIGNvbnN0IGlzVG9kYXkgPSBpc1NhbWVEYXkoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZWZlcmVuY2VNb250aCksIHsgZGF5OiBkYXlPYmplY3QudmFsdWUgfSksIHRvZGF5UGFydHMpO1xuICAgICAgLyoqXG4gICAgICAgKiBUb2RheSdzIGRhdGUgc2hvdWxkIHJlYWQgYXMgXCJUb2RheVwiIChsb2NhbGl6ZWQpXG4gICAgICAgKiBub3QgdGhlIGFjdHVhbCBkYXRlIHN0cmluZ1xuICAgICAgICovXG4gICAgICBkYXRlQ29sdW1uSXRlbXMucHVzaCh7XG4gICAgICAgIHRleHQ6IGlzVG9kYXkgPyBnZXRUb2RheUxhYmVsKGxvY2FsZSkgOiBkYXlPYmplY3QudGV4dCxcbiAgICAgICAgdmFsdWU6IGAke3JlZmVyZW5jZU1vbnRoLnllYXJ9LSR7cmVmZXJlbmNlTW9udGgubW9udGh9LSR7ZGF5T2JqZWN0LnZhbHVlfWAsXG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogV2hlbiBzZWxlY3RpbmcgYSBkYXRlIGluIHRoZSB3aGVlbCBwaWNrZXJcbiAgICAgICAqIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSByYXcgZGF0ZXRpbWUgcGFydHMgZGF0YS5cbiAgICAgICAqIFRoZSBwaWNrZXIgY29sdW1uIG9ubHkgYWNjZXB0cyB2YWx1ZXMgb2ZcbiAgICAgICAqIHR5cGUgc3RyaW5nIG9yIG51bWJlciwgc28gd2UgbmVlZCB0byByZXR1cm5cbiAgICAgICAqIHR3byBzZXRzIG9mIGRhdGE6IEEgZGF0YSBzZXQgdG8gYmUgcGFzc2VkXG4gICAgICAgKiB0byB0aGUgcGlja2VyIGNvbHVtbiwgYW5kIGEgZGF0YSBzZXQgdG9cbiAgICAgICAqIGJlIHVzZWQgdG8gcmVmZXJlbmNlIHRoZSByYXcgZGF0YSB3aGVuXG4gICAgICAgKiB1cGRhdGluZyB0aGUgcGlja2VyIGNvbHVtbiB2YWx1ZS5cbiAgICAgICAqL1xuICAgICAgZGF0ZVBhcnRzLnB1c2goe1xuICAgICAgICBtb250aDogcmVmZXJlbmNlTW9udGgubW9udGgsXG4gICAgICAgIHllYXI6IHJlZmVyZW5jZU1vbnRoLnllYXIsXG4gICAgICAgIGRheTogZGF5T2JqZWN0LnZhbHVlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcGFydHMgPSBbLi4ucGFydHMsIC4uLmRhdGVQYXJ0c107XG4gICAgaXRlbXMgPSBbLi4uaXRlbXMsIC4uLmRhdGVDb2x1bW5JdGVtc107XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHBhcnRzLFxuICAgIGl0ZW1zLFxuICB9O1xufTtcbmNvbnN0IGdldFRpbWVDb2x1bW5zRGF0YSA9IChsb2NhbGUsIHJlZlBhcnRzLCBob3VyQ3ljbGUsIG1pblBhcnRzLCBtYXhQYXJ0cywgYWxsb3dlZEhvdXJWYWx1ZXMsIGFsbG93ZWRNaW51dGVWYWx1ZXMpID0+IHtcbiAgY29uc3QgdXNlMjRIb3VyID0gaXMyNEhvdXIobG9jYWxlLCBob3VyQ3ljbGUpO1xuICBjb25zdCB7IGhvdXJzLCBtaW51dGVzLCBhbSwgcG0gfSA9IGdlbmVyYXRlVGltZShyZWZQYXJ0cywgdXNlMjRIb3VyID8gJ2gyMycgOiAnaDEyJywgbWluUGFydHMsIG1heFBhcnRzLCBhbGxvd2VkSG91clZhbHVlcywgYWxsb3dlZE1pbnV0ZVZhbHVlcyk7XG4gIGNvbnN0IGhvdXJzSXRlbXMgPSBob3Vycy5tYXAoKGhvdXIpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogZ2V0Rm9ybWF0dGVkSG91cihob3VyLCB1c2UyNEhvdXIpLFxuICAgICAgdmFsdWU6IGdldEludGVybmFsSG91clZhbHVlKGhvdXIsIHVzZTI0SG91ciwgcmVmUGFydHMuYW1wbSksXG4gICAgfTtcbiAgfSk7XG4gIGNvbnN0IG1pbnV0ZXNJdGVtcyA9IG1pbnV0ZXMubWFwKChtaW51dGUpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogYWRkVGltZVBhZGRpbmcobWludXRlKSxcbiAgICAgIHZhbHVlOiBtaW51dGUsXG4gICAgfTtcbiAgfSk7XG4gIGNvbnN0IGRheVBlcmlvZEl0ZW1zID0gW107XG4gIGlmIChhbSAmJiAhdXNlMjRIb3VyKSB7XG4gICAgZGF5UGVyaW9kSXRlbXMucHVzaCh7XG4gICAgICB0ZXh0OiBnZXRMb2NhbGl6ZWREYXlQZXJpb2QobG9jYWxlLCAnYW0nKSxcbiAgICAgIHZhbHVlOiAnYW0nLFxuICAgIH0pO1xuICB9XG4gIGlmIChwbSAmJiAhdXNlMjRIb3VyKSB7XG4gICAgZGF5UGVyaW9kSXRlbXMucHVzaCh7XG4gICAgICB0ZXh0OiBnZXRMb2NhbGl6ZWREYXlQZXJpb2QobG9jYWxlLCAncG0nKSxcbiAgICAgIHZhbHVlOiAncG0nLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgbWludXRlc0RhdGE6IG1pbnV0ZXNJdGVtcyxcbiAgICBob3Vyc0RhdGE6IGhvdXJzSXRlbXMsXG4gICAgZGF5UGVyaW9kRGF0YTogZGF5UGVyaW9kSXRlbXMsXG4gIH07XG59O1xuXG5leHBvcnQgeyBnZXREYXlDb2x1bW5EYXRhIGFzIEEsIGdldFllYXJDb2x1bW5EYXRhIGFzIEIsIGlzTW9udGhGaXJzdExvY2FsZSBhcyBDLCBnZXRUaW1lQ29sdW1uc0RhdGEgYXMgRCwgaXNMb2NhbGVEYXlQZXJpb2RSVEwgYXMgRSwgZ2V0RGF5c09mV2VlayBhcyBGLCBnZXRNb250aEFuZFllYXIgYXMgRywgZ2V0RGF5c09mTW9udGggYXMgSCwgZ2VuZXJhdGVNb250aHMgYXMgSSwgaXMyNEhvdXIgYXMgSiwgZ2V0TG9jYWxpemVkVGltZSBhcyBLLCBnZXRNb250aEFuZERheSBhcyBMLCBmb3JtYXRWYWx1ZSBhcyBNLCBnZXROZXh0WWVhciBhcyBOLCBnZXRQcmV2aW91c1llYXIgYXMgTywgY2xhbXBEYXRlIGFzIFAsIHBhcnNlQW1QbSBhcyBRLCBjYWxjdWxhdGVIb3VyRnJvbUFNUE0gYXMgUiwgZ2V0TG9jYWxpemVkRGF0ZVRpbWUgYXMgUywgZ2V0TW9udGhEYXlBbmRZZWFyIGFzIFQsIGdldERheSBhcyBhLCBpc0FmdGVyIGFzIGIsIGlzU2FtZURheSBhcyBjLCBnZXRQcmV2aW91c01vbnRoIGFzIGQsIGdldE5leHRNb250aCBhcyBlLCBnZXRQYXJ0c0Zyb21DYWxlbmRhckRheSBhcyBmLCBnZW5lcmF0ZURheUFyaWFMYWJlbCBhcyBnLCBnZXRFbmRPZldlZWsgYXMgaCwgaXNCZWZvcmUgYXMgaSwgZ2V0U3RhcnRPZldlZWsgYXMgaiwgZ2V0UHJldmlvdXNEYXkgYXMgaywgZ2V0TmV4dERheSBhcyBsLCBnZXRQcmV2aW91c1dlZWsgYXMgbSwgZ2V0TmV4dFdlZWsgYXMgbiwgcGFyc2VNYXhQYXJ0cyBhcyBvLCBwYXJzZU1pblBhcnRzIGFzIHAsIHBhcnNlRGF0ZSBhcyBxLCBjb252ZXJ0VG9BcnJheU9mTnVtYmVycyBhcyByLCBjb252ZXJ0RGF0YVRvSVNPIGFzIHMsIGdldFRvZGF5IGFzIHQsIGdldENsb3Nlc3RWYWxpZERhdGUgYXMgdSwgdmFsaWRhdGVQYXJ0cyBhcyB2LCB3YXJuSWZWYWx1ZU91dE9mQm91bmRzIGFzIHcsIGdldE51bURheXNJbk1vbnRoIGFzIHgsIGdldENvbWJpbmVkRGF0ZUNvbHVtbkRhdGEgYXMgeSwgZ2V0TW9udGhDb2x1bW5EYXRhIGFzIHogfTtcbiIsIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG4vKipcbiAqIExvZ3MgYSB3YXJuaW5nIHRvIHRoZSBjb25zb2xlIHdpdGggYW4gSW9uaWMgcHJlZml4XG4gKiB0byBpbmRpY2F0ZSB0aGUgbGlicmFyeSB0aGF0IGlzIHdhcm5pbmcgdGhlIGRldmVsb3Blci5cbiAqXG4gKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBzdHJpbmcgbWVzc2FnZSB0byBiZSBsb2dnZWQgdG8gdGhlIGNvbnNvbGUuXG4gKi9cbmNvbnN0IHByaW50SW9uV2FybmluZyA9IChtZXNzYWdlLCAuLi5wYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNvbnNvbGUud2FybihgW0lvbmljIFdhcm5pbmddOiAke21lc3NhZ2V9YCwgLi4ucGFyYW1zKTtcbn07XG4vKlxuICogTG9ncyBhbiBlcnJvciB0byB0aGUgY29uc29sZSB3aXRoIGFuIElvbmljIHByZWZpeFxuICogdG8gaW5kaWNhdGUgdGhlIGxpYnJhcnkgdGhhdCBpcyB3YXJuaW5nIHRoZSBkZXZlbG9wZXIuXG4gKlxuICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgc3RyaW5nIG1lc3NhZ2UgdG8gYmUgbG9nZ2VkIHRvIHRoZSBjb25zb2xlLlxuICogQHBhcmFtIHBhcmFtcyAtIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIHN1cHBseSB0byB0aGUgY29uc29sZS5lcnJvci5cbiAqL1xuY29uc3QgcHJpbnRJb25FcnJvciA9IChtZXNzYWdlLCAuLi5wYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYFtJb25pYyBFcnJvcl06ICR7bWVzc2FnZX1gLCAuLi5wYXJhbXMpO1xufTtcbi8qKlxuICogUHJpbnRzIGFuIGVycm9yIGluZm9ybWluZyBkZXZlbG9wZXJzIHRoYXQgYW4gaW1wbGVtZW50YXRpb24gcmVxdWlyZXMgYW4gZWxlbWVudCB0byBiZSB1c2VkXG4gKiB3aXRoaW4gYSBzcGVjaWZpYyBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0gZWwgVGhlIHdlYiBjb21wb25lbnQgZWxlbWVudCB0aGlzIGlzIHJlcXVpcmluZyB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSB0YXJnZXRTZWxlY3RvcnMgVGhlIHNlbGVjdG9yIG9yIHNlbGVjdG9ycyB0aGF0IHdlcmUgbm90IGZvdW5kLlxuICovXG5jb25zdCBwcmludFJlcXVpcmVkRWxlbWVudEVycm9yID0gKGVsLCAuLi50YXJnZXRTZWxlY3RvcnMpID0+IHtcbiAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYDwke2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+IG11c3QgYmUgdXNlZCBpbnNpZGUgJHt0YXJnZXRTZWxlY3RvcnMuam9pbignIG9yICcpfS5gKTtcbn07XG5cbmV4cG9ydCB7IHByaW50UmVxdWlyZWRFbGVtZW50RXJyb3IgYXMgYSwgcHJpbnRJb25FcnJvciBhcyBiLCBwcmludElvbldhcm5pbmcgYXMgcCB9O1xuIiwiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmNvbnN0IGhvc3RDb250ZXh0ID0gKHNlbGVjdG9yLCBlbCkgPT4ge1xuICByZXR1cm4gZWwuY2xvc2VzdChzZWxlY3RvcikgIT09IG51bGw7XG59O1xuLyoqXG4gKiBDcmVhdGUgdGhlIG1vZGUgYW5kIGNvbG9yIGNsYXNzZXMgZm9yIHRoZSBjb21wb25lbnQgYmFzZWQgb24gdGhlIGNsYXNzZXMgcGFzc2VkIGluXG4gKi9cbmNvbnN0IGNyZWF0ZUNvbG9yQ2xhc3NlcyA9IChjb2xvciwgY3NzQ2xhc3NNYXApID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgJiYgY29sb3IubGVuZ3RoID4gMFxuICAgID8gT2JqZWN0LmFzc2lnbih7ICdpb24tY29sb3InOiB0cnVlLCBbYGlvbi1jb2xvci0ke2NvbG9yfWBdOiB0cnVlIH0sIGNzc0NsYXNzTWFwKSA6IGNzc0NsYXNzTWFwO1xufTtcbmNvbnN0IGdldENsYXNzTGlzdCA9IChjbGFzc2VzKSA9PiB7XG4gIGlmIChjbGFzc2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBhcnJheSA9IEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIHJldHVybiBhcnJheVxuICAgICAgLmZpbHRlcigoYykgPT4gYyAhPSBudWxsKVxuICAgICAgLm1hcCgoYykgPT4gYy50cmltKCkpXG4gICAgICAuZmlsdGVyKChjKSA9PiBjICE9PSAnJyk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufTtcbmNvbnN0IGdldENsYXNzTWFwID0gKGNsYXNzZXMpID0+IHtcbiAgY29uc3QgbWFwID0ge307XG4gIGdldENsYXNzTGlzdChjbGFzc2VzKS5mb3JFYWNoKChjKSA9PiAobWFwW2NdID0gdHJ1ZSkpO1xuICByZXR1cm4gbWFwO1xufTtcbmNvbnN0IFNDSEVNRSA9IC9eW2Etel1bYS16MC05K1xcLS5dKjovO1xuY29uc3Qgb3BlblVSTCA9IGFzeW5jICh1cmwsIGV2LCBkaXJlY3Rpb24sIGFuaW1hdGlvbikgPT4ge1xuICBpZiAodXJsICE9IG51bGwgJiYgdXJsWzBdICE9PSAnIycgJiYgIVNDSEVNRS50ZXN0KHVybCkpIHtcbiAgICBjb25zdCByb3V0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpb24tcm91dGVyJyk7XG4gICAgaWYgKHJvdXRlcikge1xuICAgICAgaWYgKGV2ICE9IG51bGwpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb3V0ZXIucHVzaCh1cmwsIGRpcmVjdGlvbiwgYW5pbWF0aW9uKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ29sb3JDbGFzc2VzIGFzIGMsIGdldENsYXNzTWFwIGFzIGcsIGhvc3RDb250ZXh0IGFzIGgsIG9wZW5VUkwgYXMgbyB9O1xuIl0sIm5hbWVzIjpbImhvc3RDb250ZXh0Iiwic2VsZWN0b3IiLCJlbCIsImNsb3Nlc3QiLCJjcmVhdGVDb2xvckNsYXNzZXMiLCJjb2xvciIsImNzc0NsYXNzTWFwIiwibGVuZ3RoIiwiT2JqZWN0IiwiYXNzaWduIiwiZ2V0Q2xhc3NMaXN0IiwiY2xhc3NlcyIsInVuZGVmaW5lZCIsImFycmF5IiwiQXJyYXkiLCJpc0FycmF5Iiwic3BsaXQiLCJmaWx0ZXIiLCJjIiwibWFwIiwidHJpbSIsImdldENsYXNzTWFwIiwiZm9yRWFjaCIsIlNDSEVNRSIsIm9wZW5VUkwiLCJ1cmwiLCJldiIsImRpcmVjdGlvbiIsImFuaW1hdGlvbiIsInRlc3QiLCJyb3V0ZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwcmV2ZW50RGVmYXVsdCIsInB1c2giLCJnIiwiaCIsIm8iXSwic291cmNlUm9vdCI6IndlYnBhY2s6Ly8vIn0=