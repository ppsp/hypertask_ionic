"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-infinite-scroll_2_entry_js"],{

/***/ 75057:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/index-c4b11676.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ printRequiredElementError),
/* harmony export */   "b": () => (/* binding */ printIonError),
/* harmony export */   "p": () => (/* binding */ printIonWarning)
/* harmony export */ });
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
/**
 * Logs a warning to the console with an Ionic prefix
 * to indicate the library that is warning the developer.
 *
 * @param message - The string message to be logged to the console.
 */
const printIonWarning = (message, ...params) => {
  return console.warn(`[Ionic Warning]: ${message}`, ...params);
};
/*
 * Logs an error to the console with an Ionic prefix
 * to indicate the library that is warning the developer.
 *
 * @param message - The string message to be logged to the console.
 * @param params - Additional arguments to supply to the console.error.
 */
const printIonError = (message, ...params) => {
  return console.error(`[Ionic Error]: ${message}`, ...params);
};
/**
 * Prints an error informing developers that an implementation requires an element to be used
 * within a specific selector.
 *
 * @param el The web component element this is requiring the element.
 * @param targetSelectors The selector or selectors that were not found.
 */
const printRequiredElementError = (el, ...targetSelectors) => {
  return console.error(`<${el.tagName.toLowerCase()}> must be used inside ${targetSelectors.join(' or ')}.`);
};




/***/ }),

/***/ 33296:
/*!**************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_infinite_scroll": () => (/* binding */ InfiniteScroll),
/* harmony export */   "ion_infinite_scroll_content": () => (/* binding */ InfiniteScrollContent)
/* harmony export */ });
/* harmony import */ var F_GIT_hypertask_ionic2_hypertask_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */ 62783);
/* harmony import */ var _index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-8e692445.js */ 40320);
/* harmony import */ var _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-c74e4951.js */ 9656);
/* harmony import */ var _index_e6d1a8be_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-e6d1a8be.js */ 70139);
/* harmony import */ var _config_d4f612d2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config-d4f612d2.js */ 62219);
/* harmony import */ var _helpers_3b390e48_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers-3b390e48.js */ 97140);
/* harmony import */ var _index_c4b11676_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-c4b11676.js */ 75057);


/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */






const infiniteScrollCss = "ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}";
const InfiniteScroll = class {
  constructor(hostRef) {
    (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionInfinite = (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.e)(this, "ionInfinite", 7);
    this.thrPx = 0;
    this.thrPc = 0;
    this.didFire = false;
    this.isBusy = false;
    this.isLoading = false;
    /**
     * The threshold distance from the bottom
     * of the content to call the `infinite` output event when scrolled.
     * The threshold value can be either a percent, or
     * in pixels. For example, use the value of `10%` for the `infinite`
     * output event to get called when the user has scrolled 10%
     * from the bottom of the page. Use the value `100px` when the
     * scroll is within 100 pixels from the bottom of the page.
     */

    this.threshold = '15%';
    /**
     * If `true`, the infinite scroll will be hidden and scroll event listeners
     * will be removed.
     *
     * Set this to true to disable the infinite scroll from actively
     * trying to receive new data while scrolling. This is useful
     * when it is known that there is no more data that can be added, and
     * the infinite scroll is no longer needed.
     */

    this.disabled = false;
    /**
     * The position of the infinite scroll element.
     * The value can be either `top` or `bottom`.
     */

    this.position = 'bottom';

    this.onScroll = () => {
      const scrollEl = this.scrollEl;

      if (!scrollEl || !this.canStart()) {
        return 1;
      }

      const infiniteHeight = this.el.offsetHeight;

      if (infiniteHeight === 0) {
        // if there is no height of this element then do nothing
        return 2;
      }

      const scrollTop = scrollEl.scrollTop;
      const scrollHeight = scrollEl.scrollHeight;
      const height = scrollEl.offsetHeight;
      const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;
      const distanceFromInfinite = this.position === 'bottom' ? scrollHeight - infiniteHeight - scrollTop - threshold - height : scrollTop - infiniteHeight - threshold;

      if (distanceFromInfinite < 0) {
        if (!this.didFire) {
          this.isLoading = true;
          this.didFire = true;
          this.ionInfinite.emit();
          return 3;
        }
      } else {
        this.didFire = false;
      }

      return 4;
    };
  }

  thresholdChanged() {
    const val = this.threshold;

    if (val.lastIndexOf('%') > -1) {
      this.thrPx = 0;
      this.thrPc = parseFloat(val) / 100;
    } else {
      this.thrPx = parseFloat(val);
      this.thrPc = 0;
    }
  }

  disabledChanged() {
    const disabled = this.disabled;

    if (disabled) {
      this.isLoading = false;
      this.isBusy = false;
    }

    this.enableScrollEvents(!disabled);
  }

  connectedCallback() {
    var _this = this;

    return (0,F_GIT_hypertask_ionic2_hypertask_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const contentEl = (0,_index_e6d1a8be_js__WEBPACK_IMPORTED_MODULE_3__.f)(_this.el);

      if (!contentEl) {
        (0,_index_e6d1a8be_js__WEBPACK_IMPORTED_MODULE_3__.p)(_this.el);
        return;
      }

      _this.scrollEl = yield (0,_index_e6d1a8be_js__WEBPACK_IMPORTED_MODULE_3__.g)(contentEl);

      _this.thresholdChanged();

      _this.disabledChanged();

      if (_this.position === 'top') {
        (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.c)(() => {
          if (_this.scrollEl) {
            _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;
          }
        });
      }
    })();
  }

  disconnectedCallback() {
    this.enableScrollEvents(false);
    this.scrollEl = undefined;
  }
  /**
   * Call `complete()` within the `ionInfinite` output event handler when
   * your async operation has completed. For example, the `loading`
   * state is while the app is performing an asynchronous operation,
   * such as receiving more data from an AJAX request to add more items
   * to a data list. Once the data has been received and UI updated, you
   * then call this method to signify that the loading has completed.
   * This method will change the infinite scroll's state from `loading`
   * to `enabled`.
   */


  complete() {
    var _this2 = this;

    return (0,F_GIT_hypertask_ionic2_hypertask_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const scrollEl = _this2.scrollEl;

      if (!_this2.isLoading || !scrollEl) {
        return;
      }

      _this2.isLoading = false;

      if (_this2.position === 'top') {
        /**
         * New content is being added at the top, but the scrollTop position stays the same,
         * which causes a scroll jump visually. This algorithm makes sure to prevent this.
         * (Frame 1)
         *    - complete() is called, but the UI hasn't had time to update yet.
         *    - Save the current content dimensions.
         *    - Wait for the next frame using _dom.read, so the UI will be updated.
         * (Frame 2)
         *    - Read the new content dimensions.
         *    - Calculate the height difference and the new scroll position.
         *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.
         * (Still frame 2, if I'm correct)
         *    - Change the scroll position (= visually maintain the scroll position).
         *    - Change the state to re-enable the InfiniteScroll.
         *    - This should be after changing the scroll position, or it could
         *    cause the InfiniteScroll to be triggered again immediately.
         * (Frame 3)
         *    Done.
         */
        _this2.isBusy = true; // ******** DOM READ ****************
        // Save the current content dimensions before the UI updates

        const prev = scrollEl.scrollHeight - scrollEl.scrollTop; // ******** DOM READ ****************

        requestAnimationFrame(() => {
          (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.f)(() => {
            // UI has updated, save the new content dimensions
            const scrollHeight = scrollEl.scrollHeight; // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around

            const newScrollTop = scrollHeight - prev; // ******** DOM WRITE ****************

            requestAnimationFrame(() => {
              (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.c)(() => {
                scrollEl.scrollTop = newScrollTop;
                _this2.isBusy = false;
              });
            });
          });
        });
      }
    })();
  }

  canStart() {
    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;
  }

  enableScrollEvents(shouldListen) {
    if (this.scrollEl) {
      if (shouldListen) {
        this.scrollEl.addEventListener('scroll', this.onScroll);
      } else {
        this.scrollEl.removeEventListener('scroll', this.onScroll);
      }
    }
  }

  render() {
    const mode = (0,_ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const disabled = this.disabled;
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [mode]: true,
        'infinite-scroll-loading': this.isLoading,
        'infinite-scroll-enabled': !disabled
      }
    });
  }

  get el() {
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
  }

  static get watchers() {
    return {
      "threshold": ["thresholdChanged"],
      "disabled": ["disabledChanged"]
    };
  }

};
InfiniteScroll.style = infiniteScrollCss;
const infiniteScrollContentIosCss = "ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}";
const infiniteScrollContentMdCss = "ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}";
const InfiniteScrollContent = class {
  constructor(hostRef) {
    (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.customHTMLEnabled = _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.c.get('innerHTMLTemplatesEnabled', _config_d4f612d2_js__WEBPACK_IMPORTED_MODULE_4__.E);
  }

  componentDidLoad() {
    if (this.loadingSpinner === undefined) {
      const mode = (0,_ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
      this.loadingSpinner = _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.c.get('infiniteLoadingSpinner', _ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.c.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));
    }
  }

  renderLoadingText() {
    const {
      customHTMLEnabled,
      loadingText
    } = this;

    if (customHTMLEnabled) {
      return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: "infinite-loading-text",
        innerHTML: (0,_config_d4f612d2_js__WEBPACK_IMPORTED_MODULE_4__.a)(loadingText)
      });
    }

    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "infinite-loading-text"
    }, this.loadingText);
  }

  render() {
    const mode = (0,_ionic_global_c74e4951_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    return (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [mode]: true,
        // Used internally for styling
        [`infinite-scroll-content-${mode}`]: true
      }
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "infinite-loading"
    }, this.loadingSpinner && (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "infinite-loading-spinner"
    }, (0,_index_8e692445_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-spinner", {
      name: this.loadingSpinner
    })), this.loadingText !== undefined && this.renderLoadingText()));
  }

};
InfiniteScrollContent.style = {
  ios: infiniteScrollContentIosCss,
  md: infiniteScrollContentMdCss
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLWluZmluaXRlLXNjcm9sbF8yX2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFFBQVE7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHlCQUF5Qix3QkFBd0IsNkJBQTZCO0FBQ3pHOztBQUVvRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsTUFBTXlCLGlCQUFpQixHQUFHLHFGQUExQjtBQUVBLE1BQU1DLGNBQWMsR0FBRyxNQUFNO0FBQzNCQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVTtBQUNuQjNCLElBQUFBLHFEQUFnQixDQUFDLElBQUQsRUFBTzJCLE9BQVAsQ0FBaEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CMUIscURBQVcsQ0FBQyxJQUFELEVBQU8sYUFBUCxFQUFzQixDQUF0QixDQUE5QjtBQUNBLFNBQUsyQixLQUFMLEdBQWEsQ0FBYjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxDQUFiO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLEtBQWY7QUFDQSxTQUFLQyxNQUFMLEdBQWMsS0FBZDtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsS0FBakI7QUFDQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0ksU0FBS0MsU0FBTCxHQUFpQixLQUFqQjtBQUNBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDSSxTQUFLQyxRQUFMLEdBQWdCLEtBQWhCO0FB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QUFFNkQsTUFBQUEsS0FBSyxFQUFFO0FBQVQsS0FBUixFQUE0QyxLQUFLVyxXQUFqRCxDQUFSO0FBQ0Q7O0FBQ0RiLEVBQUFBLE1BQU0sR0FBRztBQUNQLFVBQU1DLElBQUksR0FBR3RELDREQUFVLENBQUMsSUFBRCxDQUF2QjtBQUNBLFdBQVFOLHFEQUFDLENBQUNJLGlEQUFELEVBQU87QUFBRXlELE1BQUFBLEtBQUssRUFBRTtBQUNyQixTQUFDRCxJQUFELEdBQVEsSUFEYTtBQUVyQjtBQUNBLFNBQUUsMkJBQTBCQSxJQUFLLEVBQWpDLEdBQXFDO0FBSGhCO0FBQVQsS0FBUCxFQUlGNUQscURBQUMsQ0FBQyxLQUFELEVBQVE7QUFBRTZELE1BQUFBLEtBQUssRUFBRTtBQUFULEtBQVIsRUFBdUMsS0FBS1MsY0FBTCxJQUF3QnRFLHFEQUFDLENBQUMsS0FBRCxFQUFRO0FBQUU2RCxNQUFBQSxLQUFLLEVBQUU7QUFBVCxLQUFSLEVBQStDN0QscURBQUMsQ0FBQyxhQUFELEVBQWdCO0FBQUUwRSxNQUFBQSxJQUFJLEVBQUUsS0FBS0o7QUFBYixLQUFoQixDQUFoRCxDQUFoRSxFQUFrSyxLQUFLRSxXQUFMLEtBQXFCckIsU0FBckIsSUFBa0MsS0FBS29CLGlCQUFMLEVBQXBNLENBSkMsQ0FBVDtBQUtEOztBQXpCaUMsQ0FBcEM7QUEyQkFMLHFCQUFxQixDQUFDSCxLQUF0QixHQUE4QjtBQUM1QlksRUFBQUEsR0FBRyxFQUFFWCwyQkFEdUI7QUFFNUJZLEVBQUFBLEVBQUUsRUFBRVg7QUFGd0IsQ0FBOUIiLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2luZGV4LWM0YjExNjc2LmpzIiwiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vaW9uLWluZmluaXRlLXNjcm9sbF8yLmVudHJ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG4vKipcbiAqIExvZ3MgYSB3YXJuaW5nIHRvIHRoZSBjb25zb2xlIHdpdGggYW4gSW9uaWMgcHJlZml4XG4gKiB0byBpbmRpY2F0ZSB0aGUgbGlicmFyeSB0aGF0IGlzIHdhcm5pbmcgdGhlIGRldmVsb3Blci5cbiAqXG4gKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBzdHJpbmcgbWVzc2FnZSB0byBiZSBsb2dnZWQgdG8gdGhlIGNvbnNvbGUuXG4gKi9cbmNvbnN0IHByaW50SW9uV2FybmluZyA9IChtZXNzYWdlLCAuLi5wYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNvbnNvbGUud2FybihgW0lvbmljIFdhcm5pbmddOiAke21lc3NhZ2V9YCwgLi4ucGFyYW1zKTtcbn07XG4vKlxuICogTG9ncyBhbiBlcnJvciB0byB0aGUgY29uc29sZSB3aXRoIGFuIElvbmljIHByZWZpeFxuICogdG8gaW5kaWNhdGUgdGhlIGxpYnJhcnkgdGhhdCBpcyB3YXJuaW5nIHRoZSBkZXZlbG9wZXIuXG4gKlxuICogQHBhcmFtIG1lc3NhZ2UgLSBUaGUgc3RyaW5nIG1lc3NhZ2UgdG8gYmUgbG9nZ2VkIHRvIHRoZSBjb25zb2xlLlxuICogQHBhcmFtIHBhcmFtcyAtIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRvIHN1cHBseSB0byB0aGUgY29uc29sZS5lcnJvci5cbiAqL1xuY29uc3QgcHJpbnRJb25FcnJvciA9IChtZXNzYWdlLCAuLi5wYXJhbXMpID0+IHtcbiAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYFtJb25pYyBFcnJvcl06ICR7bWVzc2FnZX1gLCAuLi5wYXJhbXMpO1xufTtcbi8qKlxuICogUHJpbnRzIGFuIGVycm9yIGluZm9ybWluZyBkZXZlbG9wZXJzIHRoYXQgYW4gaW1wbGVtZW50YXRpb24gcmVxdWlyZXMgYW4gZWxlbWVudCB0byBiZSB1c2VkXG4gKiB3aXRoaW4gYSBzcGVjaWZpYyBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0gZWwgVGhlIHdlYiBjb21wb25lbnQgZWxlbWVudCB0aGlzIGlzIHJlcXVpcmluZyB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSB0YXJnZXRTZWxlY3RvcnMgVGhlIHNlbGVjdG9yIG9yIHNlbGVjdG9ycyB0aGF0IHdlcmUgbm90IGZvdW5kLlxuICovXG5jb25zdCBwcmludFJlcXVpcmVkRWxlbWVudEVycm9yID0gKGVsLCAuLi50YXJnZXRTZWxlY3RvcnMpID0+IHtcbiAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYDwke2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+IG11c3QgYmUgdXNlZCBpbnNpZGUgJHt0YXJnZXRTZWxlY3RvcnMuam9pbignIG9yICcpfS5gKTtcbn07XG5cbmV4cG9ydCB7IHByaW50UmVxdWlyZWRFbGVtZW50RXJyb3IgYXMgYSwgcHJpbnRJb25FcnJvciBhcyBiLCBwcmludElvbldhcm5pbmcgYXMgcCB9O1xuIiwiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgZSBhcyBjcmVhdGVFdmVudCwgYyBhcyB3cml0ZVRhc2ssIGYgYXMgcmVhZFRhc2ssIGgsIGkgYXMgZ2V0RWxlbWVudCwgSCBhcyBIb3N0IH0gZnJvbSAnLi9pbmRleC04ZTY5MjQ0NS5qcyc7XG5pbXBvcnQgeyBiIGFzIGdldElvbk1vZGUsIGMgYXMgY29uZmlnIH0gZnJvbSAnLi9pb25pYy1nbG9iYWwtYzc0ZTQ5NTEuanMnO1xuaW1wb3J0IHsgZiBhcyBmaW5kQ2xvc2VzdElvbkNvbnRlbnQsIHAgYXMgcHJpbnRJb25Db250ZW50RXJyb3JNc2csIGcgYXMgZ2V0U2Nyb2xsRWxlbWVudCB9IGZyb20gJy4vaW5kZXgtZTZkMWE4YmUuanMnO1xuaW1wb3J0IHsgRSBhcyBFTkFCTEVfSFRNTF9DT05URU5UX0RFRkFVTFQsIGEgYXMgc2FuaXRpemVET01TdHJpbmcgfSBmcm9tICcuL2NvbmZpZy1kNGY2MTJkMi5qcyc7XG5pbXBvcnQgJy4vaGVscGVycy0zYjM5MGU0OC5qcyc7XG5pbXBvcnQgJy4vaW5kZXgtYzRiMTE2NzYuanMnO1xuXG5jb25zdCBpbmZpbml0ZVNjcm9sbENzcyA9IFwiaW9uLWluZmluaXRlLXNjcm9sbHtkaXNwbGF5Om5vbmU7d2lkdGg6MTAwJX0uaW5maW5pdGUtc2Nyb2xsLWVuYWJsZWR7ZGlzcGxheTpibG9ja31cIjtcblxuY29uc3QgSW5maW5pdGVTY3JvbGwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW9uSW5maW5pdGUgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkluZmluaXRlXCIsIDcpO1xuICAgIHRoaXMudGhyUHggPSAwO1xuICAgIHRoaXMudGhyUGMgPSAwO1xuICAgIHRoaXMuZGlkRmlyZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNCdXN5ID0gZmFsc2U7XG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBUaGUgdGhyZXNob2xkIGRpc3RhbmNlIGZyb20gdGhlIGJvdHRvbVxuICAgICAqIG9mIHRoZSBjb250ZW50IHRvIGNhbGwgdGhlIGBpbmZpbml0ZWAgb3V0cHV0IGV2ZW50IHdoZW4gc2Nyb2xsZWQuXG4gICAgICogVGhlIHRocmVzaG9sZCB2YWx1ZSBjYW4gYmUgZWl0aGVyIGEgcGVyY2VudCwgb3JcbiAgICAgKiBpbiBwaXhlbHMuIEZvciBleGFtcGxlLCB1c2UgdGhlIHZhbHVlIG9mIGAxMCVgIGZvciB0aGUgYGluZmluaXRlYFxuICAgICAqIG91dHB1dCBldmVudCB0byBnZXQgY2FsbGVkIHdoZW4gdGhlIHVzZXIgaGFzIHNjcm9sbGVkIDEwJVxuICAgICAqIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS4gVXNlIHRoZSB2YWx1ZSBgMTAwcHhgIHdoZW4gdGhlXG4gICAgICogc2Nyb2xsIGlzIHdpdGhpbiAxMDAgcGl4ZWxzIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS5cbiAgICAgKi9cbiAgICB0aGlzLnRocmVzaG9sZCA9ICcxNSUnO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIGluZmluaXRlIHNjcm9sbCB3aWxsIGJlIGhpZGRlbiBhbmQgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgKlxuICAgICAqIFNldCB0aGlzIHRvIHRydWUgdG8gZGlzYWJsZSB0aGUgaW5maW5pdGUgc2Nyb2xsIGZyb20gYWN0aXZlbHlcbiAgICAgKiB0cnlpbmcgdG8gcmVjZWl2ZSBuZXcgZGF0YSB3aGlsZSBzY3JvbGxpbmcuIFRoaXMgaXMgdXNlZnVsXG4gICAgICogd2hlbiBpdCBpcyBrbm93biB0aGF0IHRoZXJlIGlzIG5vIG1vcmUgZGF0YSB0aGF0IGNhbiBiZSBhZGRlZCwgYW5kXG4gICAgICogdGhlIGluZmluaXRlIHNjcm9sbCBpcyBubyBsb25nZXIgbmVlZGVkLlxuICAgICAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBUaGUgcG9zaXRpb24gb2YgdGhlIGluZmluaXRlIHNjcm9sbCBlbGVtZW50LlxuICAgICAqIFRoZSB2YWx1ZSBjYW4gYmUgZWl0aGVyIGB0b3BgIG9yIGBib3R0b21gLlxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb24gPSAnYm90dG9tJztcbiAgICB0aGlzLm9uU2Nyb2xsID0gKCkgPT4ge1xuICAgICAgY29uc3Qgc2Nyb2xsRWwgPSB0aGlzLnNjcm9sbEVsO1xuICAgICAgaWYgKCFzY3JvbGxFbCB8fCAhdGhpcy5jYW5TdGFydCgpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5maW5pdGVIZWlnaHQgPSB0aGlzLmVsLm9mZnNldEhlaWdodDtcbiAgICAgIGlmIChpbmZpbml0ZUhlaWdodCA9PT0gMCkge1xuICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBoZWlnaHQgb2YgdGhpcyBlbGVtZW50IHRoZW4gZG8gbm90aGluZ1xuICAgICAgICByZXR1cm4gMjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IHNjcm9sbEVsLnNjcm9sbFRvcDtcbiAgICAgIGNvbnN0IHNjcm9sbEhlaWdodCA9IHNjcm9sbEVsLnNjcm9sbEhlaWdodDtcbiAgICAgIGNvbnN0IGhlaWdodCA9IHNjcm9sbEVsLm9mZnNldEhlaWdodDtcbiAgICAgIGNvbnN0IHRocmVzaG9sZCA9IHRoaXMudGhyUGMgIT09IDAgPyBoZWlnaHQgKiB0aGlzLnRoclBjIDogdGhpcy50aHJQeDtcbiAgICAgIGNvbnN0IGRpc3RhbmNlRnJvbUluZmluaXRlID0gdGhpcy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSdcbiAgICAgICAgPyBzY3JvbGxIZWlnaHQgLSBpbmZpbml0ZUhlaWdodCAtIHNjcm9sbFRvcCAtIHRocmVzaG9sZCAtIGhlaWdodFxuICAgICAgICA6IHNjcm9sbFRvcCAtIGluZmluaXRlSGVpZ2h0IC0gdGhyZXNob2xkO1xuICAgICAgaWYgKGRpc3RhbmNlRnJvbUluZmluaXRlIDwgMCkge1xuICAgICAgICBpZiAoIXRoaXMuZGlkRmlyZSkge1xuICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmRpZEZpcmUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuaW9uSW5maW5pdGUuZW1pdCgpO1xuICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5kaWRGaXJlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gNDtcbiAgICB9O1xuICB9XG4gIHRocmVzaG9sZENoYW5nZWQoKSB7XG4gICAgY29uc3QgdmFsID0gdGhpcy50aHJlc2hvbGQ7XG4gICAgaWYgKHZhbC5sYXN0SW5kZXhPZignJScpID4gLTEpIHtcbiAgICAgIHRoaXMudGhyUHggPSAwO1xuICAgICAgdGhpcy50aHJQYyA9IHBhcnNlRmxvYXQodmFsKSAvIDEwMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnRoclB4ID0gcGFyc2VGbG9hdCh2YWwpO1xuICAgICAgdGhpcy50aHJQYyA9IDA7XG4gICAgfVxuICB9XG4gIGRpc2FibGVkQ2hhbmdlZCgpIHtcbiAgICBjb25zdCBkaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICB0aGlzLmlzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5pc0J1c3kgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5lbmFibGVTY3JvbGxFdmVudHMoIWRpc2FibGVkKTtcbiAgfVxuICBhc3luYyBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBjb25zdCBjb250ZW50RWwgPSBmaW5kQ2xvc2VzdElvbkNvbnRlbnQodGhpcy5lbCk7XG4gICAgaWYgKCFjb250ZW50RWwpIHtcbiAgICAgIHByaW50SW9uQ29udGVudEVycm9yTXNnKHRoaXMuZWwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNjcm9sbEVsID0gYXdhaXQgZ2V0U2Nyb2xsRWxlbWVudChjb250ZW50RWwpO1xuICAgIHRoaXMudGhyZXNob2xkQ2hhbmdlZCgpO1xuICAgIHRoaXMuZGlzYWJsZWRDaGFuZ2VkKCk7XG4gICAgaWYgKHRoaXMucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICB3cml0ZVRhc2soKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5zY3JvbGxFbCkge1xuICAgICAgICAgIHRoaXMuc2Nyb2xsRWwuc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxFbC5zY3JvbGxIZWlnaHQgLSB0aGlzLnNjcm9sbEVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuZW5hYmxlU2Nyb2xsRXZlbnRzKGZhbHNlKTtcbiAgICB0aGlzLnNjcm9sbEVsID0gdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBjb21wbGV0ZSgpYCB3aXRoaW4gdGhlIGBpb25JbmZpbml0ZWAgb3V0cHV0IGV2ZW50IGhhbmRsZXIgd2hlblxuICAgKiB5b3VyIGFzeW5jIG9wZXJhdGlvbiBoYXMgY29tcGxldGVkLiBGb3IgZXhhbXBsZSwgdGhlIGBsb2FkaW5nYFxuICAgKiBzdGF0ZSBpcyB3aGlsZSB0aGUgYXBwIGlzIHBlcmZvcm1pbmcgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbixcbiAgICogc3VjaCBhcyByZWNlaXZpbmcgbW9yZSBkYXRhIGZyb20gYW4gQUpBWCByZXF1ZXN0IHRvIGFkZCBtb3JlIGl0ZW1zXG4gICAqIHRvIGEgZGF0YSBsaXN0LiBPbmNlIHRoZSBkYXRhIGhhcyBiZWVuIHJlY2VpdmVkIGFuZCBVSSB1cGRhdGVkLCB5b3VcbiAgICogdGhlbiBjYWxsIHRoaXMgbWV0aG9kIHRvIHNpZ25pZnkgdGhhdCB0aGUgbG9hZGluZyBoYXMgY29tcGxldGVkLlxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIGNoYW5nZSB0aGUgaW5maW5pdGUgc2Nyb2xsJ3Mgc3RhdGUgZnJvbSBgbG9hZGluZ2BcbiAgICogdG8gYGVuYWJsZWRgLlxuICAgKi9cbiAgYXN5bmMgY29tcGxldGUoKSB7XG4gICAgY29uc3Qgc2Nyb2xsRWwgPSB0aGlzLnNjcm9sbEVsO1xuICAgIGlmICghdGhpcy5pc0xvYWRpbmcgfHwgIXNjcm9sbEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMucG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAvKipcbiAgICAgICAqIE5ldyBjb250ZW50IGlzIGJlaW5nIGFkZGVkIGF0IHRoZSB0b3AsIGJ1dCB0aGUgc2Nyb2xsVG9wIHBvc2l0aW9uIHN0YXlzIHRoZSBzYW1lLFxuICAgICAgICogd2hpY2ggY2F1c2VzIGEgc2Nyb2xsIGp1bXAgdmlzdWFsbHkuIFRoaXMgYWxnb3JpdGhtIG1ha2VzIHN1cmUgdG8gcHJldmVudCB0aGlzLlxuICAgICAgICogKEZyYW1lIDEpXG4gICAgICAgKiAgICAtIGNvbXBsZXRlKCkgaXMgY2FsbGVkLCBidXQgdGhlIFVJIGhhc24ndCBoYWQgdGltZSB0byB1cGRhdGUgeWV0LlxuICAgICAgICogICAgLSBTYXZlIHRoZSBjdXJyZW50IGNvbnRlbnQgZGltZW5zaW9ucy5cbiAgICAgICAqICAgIC0gV2FpdCBmb3IgdGhlIG5leHQgZnJhbWUgdXNpbmcgX2RvbS5yZWFkLCBzbyB0aGUgVUkgd2lsbCBiZSB1cGRhdGVkLlxuICAgICAgICogKEZyYW1lIDIpXG4gICAgICAgKiAgICAtIFJlYWQgdGhlIG5ldyBjb250ZW50IGRpbWVuc2lvbnMuXG4gICAgICAgKiAgICAtIENhbGN1bGF0ZSB0aGUgaGVpZ2h0IGRpZmZlcmVuY2UgYW5kIHRoZSBuZXcgc2Nyb2xsIHBvc2l0aW9uLlxuICAgICAgICogICAgLSBEZWxheSB0aGUgc2Nyb2xsIHBvc2l0aW9uIGNoYW5nZSB1bnRpbCBvdGhlciBwb3NzaWJsZSBkb20gcmVhZHMgYXJlIGRvbmUgdXNpbmcgX2RvbS53cml0ZSB0byBiZSBwZXJmb3JtYW50LlxuICAgICAgICogKFN0aWxsIGZyYW1lIDIsIGlmIEknbSBjb3JyZWN0KVxuICAgICAgICogICAgLSBDaGFuZ2UgdGhlIHNjcm9sbCBwb3NpdGlvbiAoPSB2aXN1YWxseSBtYWludGFpbiB0aGUgc2Nyb2xsIHBvc2l0aW9uKS5cbiAgICAgICAqICAgIC0gQ2hhbmdlIHRoZSBzdGF0ZSB0byByZS1lbmFibGUgdGhlIEluZmluaXRlU2Nyb2xsLlxuICAgICAgICogICAgLSBUaGlzIHNob3VsZCBiZSBhZnRlciBjaGFuZ2luZyB0aGUgc2Nyb2xsIHBvc2l0aW9uLCBvciBpdCBjb3VsZFxuICAgICAgICogICAgY2F1c2UgdGhlIEluZmluaXRlU2Nyb2xsIHRvIGJlIHRyaWdnZXJlZCBhZ2FpbiBpbW1lZGlhdGVseS5cbiAgICAgICAqIChGcmFtZSAzKVxuICAgICAgICogICAgRG9uZS5cbiAgICAgICAqL1xuICAgICAgdGhpcy5pc0J1c3kgPSB0cnVlO1xuICAgICAgLy8gKioqKioqKiogRE9NIFJFQUQgKioqKioqKioqKioqKioqKlxuICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBjb250ZW50IGRpbWVuc2lvbnMgYmVmb3JlIHRoZSBVSSB1cGRhdGVzXG4gICAgICBjb25zdCBwcmV2ID0gc2Nyb2xsRWwuc2Nyb2xsSGVpZ2h0IC0gc2Nyb2xsRWwuc2Nyb2xsVG9wO1xuICAgICAgLy8gKioqKioqKiogRE9NIFJFQUQgKioqKioqKioqKioqKioqKlxuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgcmVhZFRhc2soKCkgPT4ge1xuICAgICAgICAgIC8vIFVJIGhhcyB1cGRhdGVkLCBzYXZlIHRoZSBuZXcgY29udGVudCBkaW1lbnNpb25zXG4gICAgICAgICAgY29uc3Qgc2Nyb2xsSGVpZ2h0ID0gc2Nyb2xsRWwuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgIC8vIE5ldyBjb250ZW50IHdhcyBhZGRlZCBvbiB0b3AsIHNvIHRoZSBzY3JvbGwgcG9zaXRpb24gc2hvdWxkIGJlIGNoYW5nZWQgaW1tZWRpYXRlbHkgdG8gcHJldmVudCBpdCBmcm9tIGp1bXBpbmcgYXJvdW5kXG4gICAgICAgICAgY29uc3QgbmV3U2Nyb2xsVG9wID0gc2Nyb2xsSGVpZ2h0IC0gcHJldjtcbiAgICAgICAgICAvLyAqKioqKioqKiBET00gV1JJVEUgKioqKioqKioqKioqKioqKlxuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB3cml0ZVRhc2soKCkgPT4ge1xuICAgICAgICAgICAgICBzY3JvbGxFbC5zY3JvbGxUb3AgPSBuZXdTY3JvbGxUb3A7XG4gICAgICAgICAgICAgIHRoaXMuaXNCdXN5ID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgY2FuU3RhcnQoKSB7XG4gICAgcmV0dXJuICF0aGlzLmRpc2FibGVkICYmICF0aGlzLmlzQnVzeSAmJiAhIXRoaXMuc2Nyb2xsRWwgJiYgIXRoaXMuaXNMb2FkaW5nO1xuICB9XG4gIGVuYWJsZVNjcm9sbEV2ZW50cyhzaG91bGRMaXN0ZW4pIHtcbiAgICBpZiAodGhpcy5zY3JvbGxFbCkge1xuICAgICAgaWYgKHNob3VsZExpc3Rlbikge1xuICAgICAgICB0aGlzLnNjcm9sbEVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMub25TY3JvbGwpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5vblNjcm9sbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCBkaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICAnaW5maW5pdGUtc2Nyb2xsLWxvYWRpbmcnOiB0aGlzLmlzTG9hZGluZyxcbiAgICAgICAgJ2luZmluaXRlLXNjcm9sbC1lbmFibGVkJzogIWRpc2FibGVkLFxuICAgICAgfSB9KSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwidGhyZXNob2xkXCI6IFtcInRocmVzaG9sZENoYW5nZWRcIl0sXG4gICAgXCJkaXNhYmxlZFwiOiBbXCJkaXNhYmxlZENoYW5nZWRcIl1cbiAgfTsgfVxufTtcbkluZmluaXRlU2Nyb2xsLnN0eWxlID0gaW5maW5pdGVTY3JvbGxDc3M7XG5cbmNvbnN0IGluZmluaXRlU2Nyb2xsQ29udGVudElvc0NzcyA9IFwiaW9uLWluZmluaXRlLXNjcm9sbC1jb250ZW50e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7bWluLWhlaWdodDo4NHB4O3RleHQtYWxpZ246Y2VudGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uaW5maW5pdGUtbG9hZGluZ3ttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjMycHg7ZGlzcGxheTpub25lO3dpZHRoOjEwMCV9LmluZmluaXRlLWxvYWRpbmctdGV4dHttYXJnaW4tbGVmdDozMnB4O21hcmdpbi1yaWdodDozMnB4O21hcmdpbi10b3A6NHB4O21hcmdpbi1ib3R0b206MH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5pbmZpbml0ZS1sb2FkaW5nLXRleHR7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OjMycHg7bWFyZ2luLWlubGluZS1zdGFydDozMnB4Oy13ZWJraXQtbWFyZ2luLWVuZDozMnB4O21hcmdpbi1pbmxpbmUtZW5kOjMycHh9fS5pbmZpbml0ZS1zY3JvbGwtbG9hZGluZyBpb24taW5maW5pdGUtc2Nyb2xsLWNvbnRlbnQ+LmluZmluaXRlLWxvYWRpbmd7ZGlzcGxheTpibG9ja30uaW5maW5pdGUtc2Nyb2xsLWNvbnRlbnQtaW9zIC5pbmZpbml0ZS1sb2FkaW5nLXRleHR7Y29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNjAwLCAjNjY2NjY2KX0uaW5maW5pdGUtc2Nyb2xsLWNvbnRlbnQtaW9zIC5pbmZpbml0ZS1sb2FkaW5nLXNwaW5uZXIgLnNwaW5uZXItbGluZXMtaW9zIGxpbmUsLmluZmluaXRlLXNjcm9sbC1jb250ZW50LWlvcyAuaW5maW5pdGUtbG9hZGluZy1zcGlubmVyIC5zcGlubmVyLWxpbmVzLXNtYWxsLWlvcyBsaW5lLC5pbmZpbml0ZS1zY3JvbGwtY29udGVudC1pb3MgLmluZmluaXRlLWxvYWRpbmctc3Bpbm5lciAuc3Bpbm5lci1jcmVzY2VudCBjaXJjbGV7c3Ryb2tlOnZhcigtLWlvbi1jb2xvci1zdGVwLTYwMCwgIzY2NjY2Nil9LmluZmluaXRlLXNjcm9sbC1jb250ZW50LWlvcyAuaW5maW5pdGUtbG9hZGluZy1zcGlubmVyIC5zcGlubmVyLWJ1YmJsZXMgY2lyY2xlLC5pbmZpbml0ZS1zY3JvbGwtY29udGVudC1pb3MgLmluZmluaXRlLWxvYWRpbmctc3Bpbm5lciAuc3Bpbm5lci1jaXJjbGVzIGNpcmNsZSwuaW5maW5pdGUtc2Nyb2xsLWNvbnRlbnQtaW9zIC5pbmZpbml0ZS1sb2FkaW5nLXNwaW5uZXIgLnNwaW5uZXItZG90cyBjaXJjbGV7ZmlsbDp2YXIoLS1pb24tY29sb3Itc3RlcC02MDAsICM2NjY2NjYpfVwiO1xuXG5jb25zdCBpbmZpbml0ZVNjcm9sbENvbnRlbnRNZENzcyA9IFwiaW9uLWluZmluaXRlLXNjcm9sbC1jb250ZW50e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7bWluLWhlaWdodDo4NHB4O3RleHQtYWxpZ246Y2VudGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uaW5maW5pdGUtbG9hZGluZ3ttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjMycHg7ZGlzcGxheTpub25lO3dpZHRoOjEwMCV9LmluZmluaXRlLWxvYWRpbmctdGV4dHttYXJnaW4tbGVmdDozMnB4O21hcmdpbi1yaWdodDozMnB4O21hcmdpbi10b3A6NHB4O21hcmdpbi1ib3R0b206MH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5pbmZpbml0ZS1sb2FkaW5nLXRleHR7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OjMycHg7bWFyZ2luLWlubGluZS1zdGFydDozMnB4Oy13ZWJraXQtbWFyZ2luLWVuZDozMnB4O21hcmdpbi1pbmxpbmUtZW5kOjMycHh9fS5pbmZpbml0ZS1zY3JvbGwtbG9hZGluZyBpb24taW5maW5pdGUtc2Nyb2xsLWNvbnRlbnQ+LmluZmluaXRlLWxvYWRpbmd7ZGlzcGxheTpibG9ja30uaW5maW5pdGUtc2Nyb2xsLWNvbnRlbnQtbWQgLmluZmluaXRlLWxvYWRpbmctdGV4dHtjb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC02MDAsICM2NjY2NjYpfS5pbmZpbml0ZS1zY3JvbGwtY29udGVudC1tZCAuaW5maW5pdGUtbG9hZGluZy1zcGlubmVyIC5zcGlubmVyLWxpbmVzLW1kIGxpbmUsLmluZmluaXRlLXNjcm9sbC1jb250ZW50LW1kIC5pbmZpbml0ZS1sb2FkaW5nLXNwaW5uZXIgLnNwaW5uZXItbGluZXMtc21hbGwtbWQgbGluZSwuaW5maW5pdGUtc2Nyb2xsLWNvbnRlbnQtbWQgLmluZmluaXRlLWxvYWRpbmctc3Bpbm5lciAuc3Bpbm5lci1jcmVzY2VudCBjaXJjbGV7c3Ryb2tlOnZhcigtLWlvbi1jb2xvci1zdGVwLTYwMCwgIzY2NjY2Nil9LmluZmluaXRlLXNjcm9sbC1jb250ZW50LW1kIC5pbmZpbml0ZS1sb2FkaW5nLXNwaW5uZXIgLnNwaW5uZXItYnViYmxlcyBjaXJjbGUsLmluZmluaXRlLXNjcm9sbC1jb250ZW50LW1kIC5pbmZpbml0ZS1sb2FkaW5nLXNwaW5uZXIgLnNwaW5uZXItY2lyY2xlcyBjaXJjbGUsLmluZmluaXRlLXNjcm9sbC1jb250ZW50LW1kIC5pbmZpbml0ZS1sb2FkaW5nLXNwaW5uZXIgLnNwaW5uZXItZG90cyBjaXJjbGV7ZmlsbDp2YXIoLS1pb24tY29sb3Itc3RlcC02MDAsICM2NjY2NjYpfVwiO1xuXG5jb25zdCBJbmZpbml0ZVNjcm9sbENvbnRlbnQgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuY3VzdG9tSFRNTEVuYWJsZWQgPSBjb25maWcuZ2V0KCdpbm5lckhUTUxUZW1wbGF0ZXNFbmFibGVkJywgRU5BQkxFX0hUTUxfQ09OVEVOVF9ERUZBVUxUKTtcbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIGlmICh0aGlzLmxvYWRpbmdTcGlubmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgICAgdGhpcy5sb2FkaW5nU3Bpbm5lciA9IGNvbmZpZy5nZXQoJ2luZmluaXRlTG9hZGluZ1NwaW5uZXInLCBjb25maWcuZ2V0KCdzcGlubmVyJywgbW9kZSA9PT0gJ2lvcycgPyAnbGluZXMnIDogJ2NyZXNjZW50JykpO1xuICAgIH1cbiAgfVxuICByZW5kZXJMb2FkaW5nVGV4dCgpIHtcbiAgICBjb25zdCB7IGN1c3RvbUhUTUxFbmFibGVkLCBsb2FkaW5nVGV4dCB9ID0gdGhpcztcbiAgICBpZiAoY3VzdG9tSFRNTEVuYWJsZWQpIHtcbiAgICAgIHJldHVybiBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW5maW5pdGUtbG9hZGluZy10ZXh0XCIsIGlubmVySFRNTDogc2FuaXRpemVET01TdHJpbmcobG9hZGluZ1RleHQpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaChcImRpdlwiLCB7IGNsYXNzOiBcImluZmluaXRlLWxvYWRpbmctdGV4dFwiIH0sIHRoaXMubG9hZGluZ1RleHQpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBjbGFzczoge1xuICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgIC8vIFVzZWQgaW50ZXJuYWxseSBmb3Igc3R5bGluZ1xuICAgICAgICBbYGluZmluaXRlLXNjcm9sbC1jb250ZW50LSR7bW9kZX1gXTogdHJ1ZSxcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImluZmluaXRlLWxvYWRpbmdcIiB9LCB0aGlzLmxvYWRpbmdTcGlubmVyICYmIChoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaW5maW5pdGUtbG9hZGluZy1zcGlubmVyXCIgfSwgaChcImlvbi1zcGlubmVyXCIsIHsgbmFtZTogdGhpcy5sb2FkaW5nU3Bpbm5lciB9KSkpLCB0aGlzLmxvYWRpbmdUZXh0ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5yZW5kZXJMb2FkaW5nVGV4dCgpKSkpO1xuICB9XG59O1xuSW5maW5pdGVTY3JvbGxDb250ZW50LnN0eWxlID0ge1xuICBpb3M6IGluZmluaXRlU2Nyb2xsQ29udGVudElvc0NzcyxcbiAgbWQ6IGluZmluaXRlU2Nyb2xsQ29udGVudE1kQ3NzXG59O1xuXG5leHBvcnQgeyBJbmZpbml0ZVNjcm9sbCBhcyBpb25faW5maW5pdGVfc2Nyb2xsLCBJbmZpbml0ZVNjcm9sbENvbnRlbnQgYXMgaW9uX2luZmluaXRlX3Njcm9sbF9jb250ZW50IH07XG4iXSwibmFtZXMiOlsiciIsInJlZ2lzdGVySW5zdGFuY2UiLCJlIiwiY3JlYXRlRXZlbnQiLCJjIiwid3JpdGVUYXNrIiwiZiIsInJlYWRUYXNrIiwiaCIsImkiLCJnZXRFbGVtZW50IiwiSCIsIkhvc3QiLCJiIiwiZ2V0SW9uTW9kZSIsImNvbmZpZyIsImZpbmRDbG9zZXN0SW9uQ29udGVudCIsInAiLCJwcmludElvbkNvbnRlbnRFcnJvck1zZyIsImciLCJnZXRTY3JvbGxFbGVtZW50IiwiRSIsIkVOQUJMRV9IVE1MX0NPTlRFTlRfREVGQVVMVCIsImEiLCJzYW5pdGl6ZURPTVN0cmluZyIsImluZmluaXRlU2Nyb2xsQ3NzIiwiSW5maW5pdGVTY3JvbGwiLCJjb25zdHJ1Y3RvciIsImhvc3RSZWYiLCJpb25JbmZpbml0ZSIsInRoclB4IiwidGhyUGMiLCJkaWRGaXJlIiwiaXNCdXN5IiwiaXNMb2FkaW5nIiwidGhyZXNob2xkIiwiZGlzYWJsZWQiLCJwb3NpdGlvbiIsIm9uU2Nyb2xsIiwic2Nyb2xsRWwiLCJjYW5TdGFydCIsImluZmluaXRlSGVpZ2h0IiwiZWwiLCJvZmZzZXRIZWlnaHQiLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJoZWlnaHQiLCJkaXN0YW5jZUZyb21JbmZpbml0ZSIsImVtaXQiLCJ0aHJlc2hvbGRDaGFuZ2VkIiwidmFsIiwibGFzdEluZGV4T2YiLCJwYXJzZUZsb2F0IiwiZGlzYWJsZWRDaGFuZ2VkIiwiZW5hYmxlU2Nyb2xsRXZlbnRzIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJjb250ZW50RWwiLCJjbGllbnRIZWlnaHQiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsInVuZGVmaW5lZCIsImNvbXBsZXRlIiwicHJldiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5ld1Njcm9sbFRvcCIsInNob3VsZExpc3RlbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVuZGVyIiwibW9kZSIsImNsYXNzIiwid2F0Y2hlcnMiLCJzdHlsZSIsImluZmluaXRlU2Nyb2xsQ29udGVudElvc0NzcyIsImluZmluaXRlU2Nyb2xsQ29udGVudE1kQ3NzIiwiSW5maW5pdGVTY3JvbGxDb250ZW50IiwiY3VzdG9tSFRNTEVuYWJsZWQiLCJnZXQiLCJjb21wb25lbnREaWRMb2FkIiwibG9hZGluZ1NwaW5uZXIiLCJyZW5kZXJMb2FkaW5nVGV4dCIsImxvYWRpbmdUZXh0IiwiaW5uZXJIVE1MIiwibmFtZSIsImlvcyIsIm1kIiwiaW9uX2luZmluaXRlX3Njcm9sbCIsImlvbl9pbmZpbml0ZV9zY3JvbGxfY29udGVudCJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8ifQ==