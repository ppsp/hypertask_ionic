(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["main"],{

/***/ 83696:
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppRoutingModule": () => (/* binding */ AppRoutingModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/router */ 13252);
/* harmony import */ var _components_login_login_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/login/login.component */ 50927);
/* harmony import */ var _components_privacy_privacy_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/privacy/privacy.component */ 80270);
/* harmony import */ var _components_task_list_task_list_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/task-list/task-list.component */ 67168);
/* harmony import */ var _components_terms_terms_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/terms/terms.component */ 32531);
/* harmony import */ var _services_auth_guard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/auth.guard */ 43561);








const routes = [
    {
        path: '',
        redirectTo: 'task-list',
        pathMatch: 'full'
    },
    { path: 'task-list', component: _components_task_list_task_list_component__WEBPACK_IMPORTED_MODULE_2__.TaskListComponent, canActivate: [_services_auth_guard__WEBPACK_IMPORTED_MODULE_4__.AuthGuard] },
    { path: 'terms', component: _components_terms_terms_component__WEBPACK_IMPORTED_MODULE_3__.TermsComponent },
    { path: 'privacy', component: _components_privacy_privacy_component__WEBPACK_IMPORTED_MODULE_1__.PrivacyComponent },
    { path: 'login', component: _components_login_login_component__WEBPACK_IMPORTED_MODULE_0__.LoginComponent }
];
let AppRoutingModule = class AppRoutingModule {
};
AppRoutingModule = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.NgModule)({
        imports: [
            _angular_router__WEBPACK_IMPORTED_MODULE_7__.RouterModule.forRoot(routes, { preloadingStrategy: _angular_router__WEBPACK_IMPORTED_MODULE_7__.PreloadAllModules, relativeLinkResolution: 'legacy' })
        ],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_7__.RouterModule]
    })
], AppRoutingModule);



/***/ }),

/***/ 2050:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppComponent": () => (/* binding */ AppComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_app_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./app.component.html */ 75158);
/* harmony import */ var _app_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app.component.scss */ 30836);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _ionic_native_app_update_ngx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic-native/app-update/ngx */ 73124);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/environments/environment */ 18260);
/* harmony import */ var _services_changelog_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/changelog.service */ 34408);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _services_user_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/user.service */ 77524);
/* harmony import */ var _models_Core_language_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./models/Core/language.enum */ 76975);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./interfaces/i-logger */ 27388);
/* harmony import */ var _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./models/Core/user-config */ 74734);
/* harmony import */ var _models_Core_user__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./models/Core/user */ 42535);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shared/date-utils */ 85218);
/* harmony import */ var _services_data_sync_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./services/data-sync.service */ 46879);
/* harmony import */ var _services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./services/data-sync-server-service */ 26022);
/* harmony import */ var _services_data_sync_2_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./services/data-sync-2.service */ 57783);





//import { SplashScreen } from '@capacitor/splash-screen';
//import { StatusBar, Style } from '@capacitor/status-bar';













// import * as introJs from 'intro.js/intro.js';
let AppComponent = class AppComponent {
    constructor(platform, appUpdate, changeLogService, dataSync, dataSync2, translate, userService, logger) {
        this.platform = platform;
        this.appUpdate = appUpdate;
        this.changeLogService = changeLogService;
        this.dataSync = dataSync;
        this.dataSync2 = dataSync2;
        this.translate = translate;
        this.userService = userService;
        this.logger = logger;
        this.initializeApp();
    }
    initializeApp() {
        const dateStart = new Date();
        this.logger.logDebug('INITIALIZE APP', dateStart.toISOString());
        this.platform.ready().then(() => {
            // this.logger.logDebug('Platform ready ', DateUtils.getTimeSince(dateStart));
            //SplashScreen.hide()
            //StatusBar.setStyle() // TODO : CAPACITOR
            //this.statusBar.styleLightContent();
            //this.splashScreen.hide();
            _services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_12__.DataSyncServerService.GetLatestRequired = true;
            _services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_12__.DataSyncServerService.GetLatestRequiredReason = 'Initialize App';
            // this.dataSync.checkForSyncRepeat();
            this.dataSync2.checkForSyncRepeat();
            // this.logger.logDebug('GET User Initial ', DateUtils.getTimeSince(dateStart));
            this.userService.getCurrentUser().then(user => {
                if (user != null) {
                    this.logger.logDebug('GOT User Initial', _shared_date_utils__WEBPACK_IMPORTED_MODULE_10__["default"].getTimeSince(dateStart));
                    this.logger.logEvent('got user initial', {
                        key: 'user', value: JSON.stringify(user)
                    });
                    this.translate.use(_models_Core_user__WEBPACK_IMPORTED_MODULE_9__.User.getConfig(user, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.PreferedLanguageKey) === _models_Core_language_enum__WEBPACK_IMPORTED_MODULE_6__.Language.English ?
                        'en' :
                        'fr').toPromise().then(() => {
                        // this.logger.logDebug('Checking for update', DateUtils.getTimeSince(dateStart));
                        this.checkForUpdateCordova();
                        // this.logger.logDebug('Checked for update', DateUtils.getTimeSince(dateStart));
                    });
                    if (_models_Core_user__WEBPACK_IMPORTED_MODULE_9__.User.getConfig(user, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.KeepPortrait) === true) {
                        try {
                            if (this.platform.is('capacitor')) {
                                screen.orientation.lock('portrait');
                            }
                        }
                        catch (error) {
                        }
                    }
                }
                else {
                    this.translate.use('en').toPromise().then(() => {
                        this.checkForUpdateCordova();
                    });
                }
            });
        });
    }
    checkForUpdateCordova() {
        if (this.platform.is('cordova')) {
            this.checkForUpdate();
            this.changeLogService.showChangeLogsAndSetToViewed();
            /*this.platform.backButton.subscribeWithPriority(0, () => {
              this.logger.logEvent('minimizing app', {
                key: 'user', value: JSON.stringify(user)
              });
              this.appMinimize.minimize();
            });*/
        }
    }
    checkForUpdate() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const updateUrl = src_environments_environment__WEBPACK_IMPORTED_MODULE_3__.environment.apiUpdateXmlUrl;
                yield this.appUpdate.checkAppUpdate(updateUrl);
            }
            catch (error) {
                this.logger.logError(error);
                // console.log('error checking for update', error);
                // alert(this.translate.instant('login.msg-update-error') + error.msg);
            }
        });
    }
};
AppComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_15__.Platform },
    { type: _ionic_native_app_update_ngx__WEBPACK_IMPORTED_MODULE_2__.AppUpdate },
    { type: _services_changelog_service__WEBPACK_IMPORTED_MODULE_4__.ChangelogService },
    { type: _services_data_sync_service__WEBPACK_IMPORTED_MODULE_11__.DataSyncService },
    { type: _services_data_sync_2_service__WEBPACK_IMPORTED_MODULE_13__.DataSyncService2 },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_16__.TranslateService },
    { type: _services_user_service__WEBPACK_IMPORTED_MODULE_5__.UserService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_7__.ILogger }
];
AppComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_17__.Component)({
        selector: 'app-root',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_app_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_app_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], AppComponent);



/***/ }),

/***/ 34750:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTranslateLoader": () => (/* binding */ createTranslateLoader),
/* harmony export */   "appInitializerFactory": () => (/* binding */ appInitializerFactory),
/* harmony export */   "AppModule": () => (/* binding */ AppModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! @angular/platform-browser */ 86219);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! @angular/router */ 13252);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app.component */ 2050);
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./app-routing.module */ 83696);
/* harmony import */ var _components_side_menu_side_menu_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/side-menu/side-menu.component */ 78496);
/* harmony import */ var _components_task_list_task_list_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/task-list/task-list.component */ 67168);
/* harmony import */ var _components_privacy_privacy_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/privacy/privacy.component */ 80270);
/* harmony import */ var _components_terms_terms_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/terms/terms.component */ 32531);
/* harmony import */ var _components_login_login_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/login/login.component */ 50927);
/* harmony import */ var _components_TaskCard_task_card_task_card_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/TaskCard/task-card/task-card.component */ 74746);
/* harmony import */ var _components_task_selection_task_selection_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/task-selection/task-selection.component */ 20848);
/* harmony import */ var _components_task_selection_card_task_selection_card_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/task-selection-card/task-selection-card.component */ 96800);
/* harmony import */ var _components_send_feedback_send_feedback_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/send-feedback/send-feedback.component */ 95721);
/* harmony import */ var _components_welcome_welcome_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/welcome/welcome.component */ 57817);
/* harmony import */ var _components_TaskCard_task_card_popover_task_card_popover_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/TaskCard/task-card-popover/task-card-popover.component */ 28661);
/* harmony import */ var _components_user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/user-settings/user-settings.component */ 18895);
/* harmony import */ var _components_group_card_group_card_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/group-card/group-card.component */ 21139);
/* harmony import */ var _components_group_popover_group_popover_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/group-popover/group-popover.component */ 18535);
/* harmony import */ var _components_debug_log_debug_log_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/debug-log/debug-log.component */ 35839);
/* harmony import */ var _components_group_list_group_list_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/group-list/group-list.component */ 29286);
/* harmony import */ var _components_skips_popover_skips_popover_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/skips-popover/skips-popover.component */ 12525);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./interfaces/i-logger */ 27388);
/* harmony import */ var _interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./interfaces/i-authentication-service */ 39296);
/* harmony import */ var _services_authentication_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./services/authentication.service */ 89270);
/* harmony import */ var _services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./services/data-sync-server-service */ 26022);
/* harmony import */ var _services_data_sync_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./services/data-sync.service */ 46879);
/* harmony import */ var _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./interfaces/i-local-storage-service */ 5295);
/* harmony import */ var _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./interfaces/i-data-sync-local-service */ 17610);
/* harmony import */ var _services_data_sync_local_service__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./services/data-sync-local-service */ 10950);
/* harmony import */ var _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./interfaces/i-api-provider */ 67116);
/* harmony import */ var _services_changelog_service__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./services/changelog.service */ 34408);
/* harmony import */ var _services_network_service__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./services/network.service */ 42421);
/* harmony import */ var _services_alert_service__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./services/alert.service */ 34571);
/* harmony import */ var _services_task_stats_service__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./services/task-stats.service */ 18546);
/* harmony import */ var _services_event_service__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./services/event.service */ 29170);
/* harmony import */ var _services_bug_report_service__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./services/bug-report.service */ 98158);
/* harmony import */ var _services_fireworks_service__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./services/fireworks.service */ 89514);
/* harmony import */ var _services_report_service__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./services/report.service */ 91681);
/* harmony import */ var _interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./interfaces/i-user-service */ 1109);
/* harmony import */ var _services_user_service__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./services/user.service */ 77524);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! @angular/common */ 28267);
/* harmony import */ var _pipes_format_dayofweek_pipe__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./pipes/format-dayofweek-pipe */ 99022);
/* harmony import */ var _pipes_format_dayofweek_abbr_pipe__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./pipes/format-dayofweek-abbr-pipe */ 31980);
/* harmony import */ var _ionic_native_app_update_ngx__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @ionic-native/app-update/ngx */ 73124);
/* harmony import */ var _services_selectable_task_service__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./services/selectable-task.service */ 17570);
/* harmony import */ var _services_date_service__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./services/date.service */ 23516);
/* harmony import */ var _services_modal_service__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./services/modal.service */ 39853);
/* harmony import */ var _services_timer_service__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./services/timer.service */ 47557);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _ngx_translate_http_loader__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! @ngx-translate/http-loader */ 82003);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! @angular/common/http */ 83981);
/* harmony import */ var _pipes_main_pipe_module__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./pipes/main-pipe.module */ 42101);
/* harmony import */ var _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! @logisticinfotech/ionic4-datepicker */ 85925);
/* harmony import */ var _services_api_service__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./services/api-service */ 26369);
/* harmony import */ var _services_sqlite_service__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./services/sqlite.service */ 41951);
/* harmony import */ var _ionic_native_sqlite_ngx__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @ionic-native/sqlite/ngx */ 64297);
/* harmony import */ var _ionic_storage_angular__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! @ionic/storage-angular */ 2688);
/* harmony import */ var _ionic_native_file_ngx__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @ionic-native/file/ngx */ 17498);
/* harmony import */ var firebaseui_dist_firebaseui_css__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! firebaseui/dist/firebaseui.css */ 94954);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! src/environments/environment */ 18260);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! @angular/forms */ 18346);
/* harmony import */ var firebaseui_angular__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! firebaseui-angular */ 92298);
/* harmony import */ var _angular_fire_compat__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! @angular/fire/compat */ 20762);
/* harmony import */ var _angular_fire_compat_auth__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! @angular/fire/compat/auth */ 29774);
/* harmony import */ var _services_local_storage_service__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./services/local-storage.service */ 27109);
/* harmony import */ var _ionic_storage__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @ionic/storage */ 17897);
/* harmony import */ var _components_TaskCard_timer_timer_component__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./components/TaskCard/timer/timer.component */ 22368);
/* harmony import */ var _components_TaskCard_task_scores_task_scores_component__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./components/TaskCard/task-scores/task-scores.component */ 78230);
/* harmony import */ var _components_task_create_task_create_component__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./components/task-create/task-create.component */ 20391);
/* harmony import */ var _services_application_insights_service__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./services/application-insights.service */ 78492);
/* harmony import */ var _components_task_list_popover_task_list_popover_component__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./components/task-list-popover/task-list-popover.component */ 47717);
/* harmony import */ var _components_note_list_note_list_component__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./components/note-list/note-list.component */ 96428);
/* harmony import */ var _components_task_edit_task_edit_component__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./components/task-edit/task-edit.component */ 88293);
/* harmony import */ var _components_group_create_group_create_component__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./components/group-create/group-create.component */ 40722);
/* harmony import */ var _components_group_edit_group_edit_component__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./components/group-edit/group-edit.component */ 72892);














































































//import { SplashScreen } from '@ionic-native/splash-screen/ngx';
//import { AppVersion } from '@ionic-native/app-version/ngx';
//import { BackgroundMode } from '@ionic-native/background-mode/ngx';
//import { Network } from '@ionic-native/network/ngx';
//import { AppMinimize } from '@ionic-native/app-minimize/ngx';
// AoT requires an exported function for factories
function createTranslateLoader(http) {
    return new _ngx_translate_http_loader__WEBPACK_IMPORTED_MODULE_63__.TranslateHttpLoader(http, './assets/i18n/', '.json');
}
const firebaseUiAuthConfig = {
    signInOptions: [
        // EMAIL
        {
            requireDisplayName: false,
            provider: firebaseui_angular__WEBPACK_IMPORTED_MODULE_64__.firebase.auth.EmailAuthProvider.PROVIDER_ID,
        }
    ],
    tosUrl: '/terms',
    privacyPolicyUrl: '/privacy',
    credentialHelper: firebaseui_angular__WEBPACK_IMPORTED_MODULE_64__.firebaseui.auth.CredentialHelper.NONE,
};
function appInitializerFactory(translate, injector) {
    return () => new Promise((resolve) => {
        const locationInitialized = injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_65__.LOCATION_INITIALIZED, Promise.resolve(null));
        locationInitialized.then(() => {
            const langToSet = 'en'; // TODO : Use user language
            translate.setDefaultLang(langToSet);
            translate.use(langToSet).subscribe(() => {
            }, err => {
                console.error(`Problem with '${langToSet}' language initialization.'`);
            }, () => {
                resolve(null);
            });
        });
    });
}
let AppModule = class AppModule {
};
AppModule = (0,tslib__WEBPACK_IMPORTED_MODULE_66__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_67__.NgModule)({
        declarations: [
            _app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent,
            _components_task_list_task_list_component__WEBPACK_IMPORTED_MODULE_3__.TaskListComponent,
            _components_privacy_privacy_component__WEBPACK_IMPORTED_MODULE_4__.PrivacyComponent,
            _components_terms_terms_component__WEBPACK_IMPORTED_MODULE_5__.TermsComponent,
            _components_login_login_component__WEBPACK_IMPORTED_MODULE_6__.LoginComponent,
            _components_TaskCard_task_card_task_card_component__WEBPACK_IMPORTED_MODULE_7__.TaskCardComponent,
            _components_task_list_task_list_component__WEBPACK_IMPORTED_MODULE_3__.TaskListComponent,
            _components_TaskCard_task_card_task_card_component__WEBPACK_IMPORTED_MODULE_7__.TaskCardComponent,
            _components_side_menu_side_menu_component__WEBPACK_IMPORTED_MODULE_2__.SideMenuComponent,
            _components_TaskCard_task_card_task_card_component__WEBPACK_IMPORTED_MODULE_7__.TaskCardComponent,
            _components_terms_terms_component__WEBPACK_IMPORTED_MODULE_5__.TermsComponent,
            _components_task_selection_task_selection_component__WEBPACK_IMPORTED_MODULE_8__.TaskSelectionComponent,
            _components_task_selection_card_task_selection_card_component__WEBPACK_IMPORTED_MODULE_9__.TaskSelectionCardComponent,
            _components_send_feedback_send_feedback_component__WEBPACK_IMPORTED_MODULE_10__.SendFeedbackComponent,
            _components_welcome_welcome_component__WEBPACK_IMPORTED_MODULE_11__.WelcomeComponent,
            _components_TaskCard_task_card_popover_task_card_popover_component__WEBPACK_IMPORTED_MODULE_12__.TaskCardPopoverComponent,
            _components_skips_popover_skips_popover_component__WEBPACK_IMPORTED_MODULE_18__.SkipsPopoverComponent,
            _components_user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_13__.UserSettingsComponent,
            _components_group_card_group_card_component__WEBPACK_IMPORTED_MODULE_14__.GroupCardComponent,
            _components_group_popover_group_popover_component__WEBPACK_IMPORTED_MODULE_15__.GroupPopoverComponent,
            _components_debug_log_debug_log_component__WEBPACK_IMPORTED_MODULE_16__.DebugLogComponent,
            _components_task_list_task_list_component__WEBPACK_IMPORTED_MODULE_3__.TaskListComponent,
            _components_group_list_group_list_component__WEBPACK_IMPORTED_MODULE_17__.GroupListComponent,
            _components_task_list_popover_task_list_popover_component__WEBPACK_IMPORTED_MODULE_58__.TaskListPopoverComponent,
            _components_group_card_group_card_component__WEBPACK_IMPORTED_MODULE_14__.GroupCardComponent,
            _components_note_list_note_list_component__WEBPACK_IMPORTED_MODULE_59__.NoteListComponent,
            _components_TaskCard_task_card_popover_task_card_popover_component__WEBPACK_IMPORTED_MODULE_12__.TaskCardPopoverComponent,
            _components_TaskCard_timer_timer_component__WEBPACK_IMPORTED_MODULE_54__.TimerComponent,
            _components_task_create_task_create_component__WEBPACK_IMPORTED_MODULE_56__.TaskCreateComponent,
            _components_task_edit_task_edit_component__WEBPACK_IMPORTED_MODULE_60__.TaskEditComponent,
            _components_TaskCard_task_scores_task_scores_component__WEBPACK_IMPORTED_MODULE_55__.TaskScoresComponent,
            _components_group_create_group_create_component__WEBPACK_IMPORTED_MODULE_61__.GroupCreateComponent,
            _components_group_edit_group_edit_component__WEBPACK_IMPORTED_MODULE_62__.GroupEditComponent
        ],
        entryComponents: [],
        imports: [
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_68__.BrowserModule,
            _ionic_angular__WEBPACK_IMPORTED_MODULE_69__.IonicModule.forRoot(),
            _app_routing_module__WEBPACK_IMPORTED_MODULE_1__.AppRoutingModule,
            _angular_common_http__WEBPACK_IMPORTED_MODULE_70__.HttpClientModule,
            _pipes_main_pipe_module__WEBPACK_IMPORTED_MODULE_45__.MainPipeModule,
            _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_71__.Ionic4DatepickerModule,
            _ionic_storage_angular__WEBPACK_IMPORTED_MODULE_72__.IonicStorageModule.forRoot({
                name: 'tasksDb',
                driverOrder: [_ionic_storage__WEBPACK_IMPORTED_MODULE_53__.Drivers.IndexedDB, _ionic_storage__WEBPACK_IMPORTED_MODULE_53__.Drivers.LocalStorage]
            }),
            _angular_platform_browser__WEBPACK_IMPORTED_MODULE_68__.BrowserModule,
            _angular_forms__WEBPACK_IMPORTED_MODULE_73__.FormsModule,
            _app_routing_module__WEBPACK_IMPORTED_MODULE_1__.AppRoutingModule,
            _angular_fire_compat__WEBPACK_IMPORTED_MODULE_74__.AngularFireModule.initializeApp(src_environments_environment__WEBPACK_IMPORTED_MODULE_51__.environment.firebase),
            _angular_fire_compat_auth__WEBPACK_IMPORTED_MODULE_75__.AngularFireAuthModule,
            firebaseui_angular__WEBPACK_IMPORTED_MODULE_64__.FirebaseUIModule.forRoot(firebaseUiAuthConfig),
            _ngx_translate_core__WEBPACK_IMPORTED_MODULE_76__.TranslateModule.forRoot({
                loader: {
                    provide: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_76__.TranslateLoader,
                    useFactory: (createTranslateLoader),
                    deps: [_angular_common_http__WEBPACK_IMPORTED_MODULE_70__.HttpClient],
                },
            }),
        ],
        providers: [
            { provide: _angular_router__WEBPACK_IMPORTED_MODULE_77__.RouteReuseStrategy, useClass: _ionic_angular__WEBPACK_IMPORTED_MODULE_69__.IonicRouteStrategy },
            //StatusBar, TODO CAPACITOR
            //SplashScreen,
            { provide: _angular_router__WEBPACK_IMPORTED_MODULE_77__.RouteReuseStrategy, useClass: _ionic_angular__WEBPACK_IMPORTED_MODULE_69__.IonicRouteStrategy },
            { provide: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_19__.ILogger, useClass: _services_application_insights_service__WEBPACK_IMPORTED_MODULE_57__.ApplicationInsightsService },
            //{ provide: ILogger, useClass: MockLogger },
            { provide: _interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_20__.IAuthenticationService, useClass: _services_authentication_service__WEBPACK_IMPORTED_MODULE_21__.AuthenticationService },
            _services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_22__.DataSyncServerService,
            _services_data_sync_service__WEBPACK_IMPORTED_MODULE_23__.DataSyncService,
            { provide: _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_24__.ILocalStorageService, useClass: _services_local_storage_service__WEBPACK_IMPORTED_MODULE_52__.LocalStorageService },
            //{ provide: ILocalStorageService, useClass: SqliteService },
            { provide: _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_25__.IDataSyncLocalService, useClass: _services_data_sync_local_service__WEBPACK_IMPORTED_MODULE_26__.DataSyncLocalService },
            { provide: _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_27__.IApiProvider, useClass: _services_api_service__WEBPACK_IMPORTED_MODULE_46__.ApiService },
            //AppMinimize, TODO CAPACITOR
            _services_changelog_service__WEBPACK_IMPORTED_MODULE_28__.ChangelogService,
            _services_network_service__WEBPACK_IMPORTED_MODULE_29__.NetworkService,
            _services_alert_service__WEBPACK_IMPORTED_MODULE_30__.AlertService,
            _services_task_stats_service__WEBPACK_IMPORTED_MODULE_31__.TaskStatsService,
            _services_sqlite_service__WEBPACK_IMPORTED_MODULE_47__.SqliteService,
            _ionic_native_sqlite_ngx__WEBPACK_IMPORTED_MODULE_48__.SQLite,
            _ionic_native_file_ngx__WEBPACK_IMPORTED_MODULE_49__.File,
            _services_event_service__WEBPACK_IMPORTED_MODULE_32__.EventService,
            _services_bug_report_service__WEBPACK_IMPORTED_MODULE_33__.BugReportService,
            _services_fireworks_service__WEBPACK_IMPORTED_MODULE_34__.FireworksService,
            _services_report_service__WEBPACK_IMPORTED_MODULE_35__.ReportService,
            { provide: _interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_36__.IUserService, useClass: _services_user_service__WEBPACK_IMPORTED_MODULE_37__.UserService },
            //Network,
            _angular_common__WEBPACK_IMPORTED_MODULE_65__.DatePipe,
            _pipes_format_dayofweek_pipe__WEBPACK_IMPORTED_MODULE_38__.FormatDayOfWeekPipe,
            _pipes_format_dayofweek_abbr_pipe__WEBPACK_IMPORTED_MODULE_39__.FormatDayOfWeekAbbrPipe,
            //BackgroundMode,
            _ionic_native_app_update_ngx__WEBPACK_IMPORTED_MODULE_40__.AppUpdate,
            //Vibration,
            //AppVersion,
            _services_selectable_task_service__WEBPACK_IMPORTED_MODULE_41__.SelectableTaskService,
            _services_date_service__WEBPACK_IMPORTED_MODULE_42__.DateService,
            //LocalNotifications,
            //NotificationService,
            //VibrationService, TODO CAPACITOR
            //Storage,
            _services_modal_service__WEBPACK_IMPORTED_MODULE_43__.ModalService,
            _services_timer_service__WEBPACK_IMPORTED_MODULE_44__.TimerService,
            {
                provide: _angular_core__WEBPACK_IMPORTED_MODULE_67__.APP_INITIALIZER,
                useFactory: appInitializerFactory,
                deps: [_ngx_translate_core__WEBPACK_IMPORTED_MODULE_76__.TranslateService, _angular_core__WEBPACK_IMPORTED_MODULE_67__.Injector],
                multi: true
            },
            //Auth
        ],
        bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent],
    })
], AppModule);



/***/ }),

/***/ 28661:
/*!**************************************************************************************!*\
  !*** ./src/app/components/TaskCard/task-card-popover/task-card-popover.component.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskCardPopoverComponent": () => (/* binding */ TaskCardPopoverComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_card_popover_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-card-popover.component.html */ 93147);
/* harmony import */ var _task_card_popover_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-card-popover.component.scss */ 46414);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _task_edit_task_edit_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../task-edit/task-edit.component */ 88293);
/* harmony import */ var _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @logisticinfotech/ionic4-datepicker */ 85925);
/* harmony import */ var src_app_services_date_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/date.service */ 23516);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/alert.service */ 34571);
/* harmony import */ var src_app_services_task_history_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/task-history.service */ 22586);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var src_app_services_vibration_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/services/vibration.service */ 71551);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);

















let TaskCardPopoverComponent = class TaskCardPopoverComponent {
    constructor(popoverController, modalController, dateService, calendarTaskService, logger, translate, alertController, alertService, taskHistoryService, eventService, vibrationService, modalService, platform) {
        this.popoverController = popoverController;
        this.modalController = modalController;
        this.dateService = dateService;
        this.calendarTaskService = calendarTaskService;
        this.logger = logger;
        this.translate = translate;
        this.alertController = alertController;
        this.alertService = alertService;
        this.taskHistoryService = taskHistoryService;
        this.eventService = eventService;
        this.vibrationService = vibrationService;
        this.modalService = modalService;
        this.platform = platform;
        this.btnShowStatsShown = true;
        this.btnAddNoteShown = true;
        this.btnVoidResultShown = true;
        this.btnResumeTimerShown = true;
        this.datePickerObj = {};
    }
    ngOnInit() { }
    btnEditTaskClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showEditTaskModal(_task_edit_task_edit_component__WEBPACK_IMPORTED_MODULE_2__.TaskEditComponent, this.currentTask);
            yield this.popoverController.dismiss();
        });
    }
    // TODO : Extract this from here, it's duplicate
    btnPostponeClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            const datePickerModal = yield this.modalController.create({
                component: _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_13__.Ionic4DatepickerModalComponent,
                cssClass: 'li-ionic4-datePicker',
                componentProps: {
                    objConfig: this.datePickerObj,
                    selectedDate: src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_4__["default"].AddDays(this.dateService.currentWorkDate, 1)
                }
            });
            yield datePickerModal.present();
            const data = yield datePickerModal.onDidDismiss();
            const selectedDate = new Date(data.data.date);
            if (!src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_4__["default"].isValidDate(selectedDate)) { // standard cancel
                yield this.popoverController.dismiss();
                return;
            }
            this.currentTask.SkipUntil = selectedDate;
            const result = yield this.calendarTaskService.updateCalendarTask(this.currentTask);
            if (result) {
                this.viewModel.reset();
                this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ProgressBar, null));
            }
            else {
                this.logger.logError(new Error('Unable to save skip until'));
                alert(this.translate.instant('btnPostponeClick-card.error-saving-skip-until'));
            }
            yield this.popoverController.dismiss();
        });
    }
    btnShowStatsClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ShowStats + this.currentTask.CalendarTaskId, true));
            yield this.popoverController.dismiss();
        });
    }
    btnAddNoteClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => {
                this.saveNote(alertData).then(() => {
                    this.viewModel.showNote = true;
                    this.viewModel.currentNote = this.viewModel.getTaskNote();
                });
            };
            const alertOptions = this.alertService.getNoteAlertOptions(handler);
            const alert = yield this.alertController.create(alertOptions);
            yield alert.present();
            const firstInput = document.querySelector('ion-alert input');
            yield this.popoverController.dismiss();
            firstInput.focus();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
                yield alert.dismiss();
            }));
            yield alert.onDidDismiss();
            subscription.unsubscribe();
        });
    }
    saveNote(alertData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            // Disable data over 1000 characters
            if (alertData.Value.length > 2000) {
                alertData.Value = alertData.Value.substring(0, 2000);
            }
            const history = this.calendarTaskService.getTaskHistoryNoVoid(this.viewModel.currentTask, this.dateService.currentWorkDate);
            // console.log('saveNote', history);
            history.Comment = alertData.Value;
            yield this.taskHistoryService.updateTaskHistory(history);
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.CardReset + this.currentTask.CalendarTaskId, true));
        });
    }
    btnVoidResultClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => {
                this.voidResult();
            };
            const alertOptions = this.alertService.getVoidAlertOptions(handler);
            const alert = yield this.alertController.create(alertOptions);
            yield alert.present();
            yield this.popoverController.dismiss();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
                yield alert.dismiss();
            }));
            yield alert.onDidDismiss();
            subscription.unsubscribe();
        });
    }
    voidResult() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            // this.isSelected = false;
            const calendarTaskHistory = this.calendarTaskService.getTaskHistoryNoVoid(this.viewModel.currentTask, this.dateService.currentWorkDate);
            calendarTaskHistory.Void = true;
            const success = yield this.taskHistoryService.updateTaskHistory(calendarTaskHistory);
            if (success) { // TODO: Test error
                if (success === true) {
                    this.viewModel.voidResult();
                }
                else {
                    this.logger.logError(new Error('Unable to void TaskHistory, result is false'));
                    alert(this.translate.instant('task-card.msg-saving-error'));
                }
            }
            else {
                this.logger.logError(new Error('Unable to void TaskHistory : '));
            }
            return;
        });
    }
    btnResumeTimerClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            this.vibrationService.vibrate(5);
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.TimerResume + this.currentTask.CalendarTaskId, true));
            yield this.popoverController.dismiss();
        });
    }
};
TaskCardPopoverComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_14__.PopoverController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_14__.ModalController },
    { type: src_app_services_date_service__WEBPACK_IMPORTED_MODULE_3__.DateService },
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_5__.CalendarTaskService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_6__.ILogger },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_15__.TranslateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_14__.AlertController },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_7__.AlertService },
    { type: src_app_services_task_history_service__WEBPACK_IMPORTED_MODULE_8__.TaskHistoryService },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService },
    { type: src_app_services_vibration_service__WEBPACK_IMPORTED_MODULE_10__.VibrationService },
    { type: src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_11__.ModalService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_14__.Platform }
];
TaskCardPopoverComponent.propDecorators = {
    currentTask: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_16__.Input }],
    viewModel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_16__.Input }]
};
TaskCardPopoverComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_16__.Component)({
        selector: 'app-task-card-popover',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_card_popover_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_card_popover_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskCardPopoverComponent);



/***/ }),

/***/ 5278:
/*!**********************************************************************!*\
  !*** ./src/app/components/TaskCard/task-card/task-card-viewmodel.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskCardViewModel": () => (/* binding */ TaskCardViewModel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ 64008);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/models/Core/task-frequency.enum */ 90616);
/* harmony import */ var src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/Core/custom-stat.enum */ 91878);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/event.service */ 29170);






class TaskCardViewModel {
    constructor(task, calendarTaskService, logger, statsService, dateService, timerService, eventService) {
        this.calendarTaskService = calendarTaskService;
        this.logger = logger;
        this.statsService = statsService;
        this.dateService = dateService;
        this.timerService = timerService;
        this.eventService = eventService;
        this.enableDragAndDrop = false;
        this.eventLoadStats = new rxjs__WEBPACK_IMPORTED_MODULE_4__.Subject();
        this.taskStats = [];
        this.currentTask = task;
        // TODO: does not belong here
        if (this.currentTask.Histories == null) {
            this.currentTask.Histories = [];
        }
        this.reset();
    }
    showTimerIfExists() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            // TODO: Optimize with Map
            const timerObject = yield this.timerService.getTimer(this.dateService.currentWorkDate, this.currentTask.CalendarTaskId);
            if (timerObject == null) {
                return;
            }
            if (timerObject.CalendarTaskId != null &&
                timerObject.isDone === false &&
                timerObject.isStarted === true) {
                if (this.showTaskResult === true) {
                    console.log('TRYING TO SHOW TIMER BUT IT SHOULD NOT', timerObject, this.currentTask);
                    this.logger.logError(new Error('TRYING TO SHOW TIMER BUT IT SHOULD NOT'), { key: 'unSentHistories', value: JSON.stringify(timerObject.CalendarTaskId) });
                }
                else {
                    this.logger.logDebug('Showing timer ' + timerObject.CalendarTaskId);
                    this.showTimer();
                    if (timerObject.isPaused === true &&
                        timerObject.isDone === false) {
                        this.showResumeButton();
                        this.showCancelTimerButton();
                    }
                    else if (timerObject.isPaused === false &&
                        timerObject.isDone === false) {
                        this.showPauseButton();
                        this.showCancelTimerButton();
                    }
                }
            }
        });
    }
    /**
     * This function does not show timer if exists
     */
    reset() {
        // console.log('RESETTING ' + this.currentTask.Name);
        this.isShown = this.calendarTaskService.isShown(this.currentTask, this.dateService.currentWorkDate.getDay(), this.dateService.currentWorkDate);
        this.currentTask.IsShown = this.isShown;
        if (!this.isShown) {
            return;
        }
        this.enableDragAndDrop = this.calendarTaskService.enableDragAndDrop;
        // console.log('RESETTING2 ' + this.currentTask.Name, this.enableDragAndDrop);
        this.taskResult = this.calendarTaskService.getTaskResult(this.currentTask, this.dateService.currentWorkDate);
        // console.log('[AFTER GETRESULT] ', this.currentTask.Name, this.taskResult);
        this.isBodyShown = false;
        this.currentNote = this.getTaskNote();
        if (this.currentNote != null && this.currentNote.length > 0) {
            this.isBodyShown = true;
        }
        // console.log('[AFTER GETNOTE] ', this.currentTask.Name, DateUtils.getTimeSince(startDate));
        if (this.taskStats.length === 0) {
            this.loadStats(0); // need component to be initialized or else on change event doesnt work first time
        }
        // Many subsequent functions need this, so only get it once
        const taskHistoryNoVoid = this.calendarTaskService.getTaskHistoryNoVoid(this.currentTask, this.dateService.currentWorkDate);
        // console.log('[AFTER LOADSTATS] ', this.currentTask.Name, DateUtils.getTimeSince(startDate));
        this.showBtnStats = (this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Once &&
            this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.UntilDone);
        this.showBtnCancelTimer = false;
        this.showBtnResume = false;
        this.showBtnPause = false;
        this.showBtnDelete = false;
        this.showPostponeBtn = false;
        this.showBtnMenu = true;
        this.showCheckedBox = this.calendarTaskService.isDoneAtDate(this.currentTask, this.dateService.currentWorkDate, taskHistoryNoVoid) &&
            this.currentTask.isBinary();
        if (!this.showCheckedBox) {
            this.showBrokenHeart = this.calendarTaskService.isSkipped(taskHistoryNoVoid);
            // console.log('[IS SKIPPED ?] ', this.currentTask.Name, this.showBrokenHeart, taskHistoryNoVoid);
        }
        else {
            this.showBrokenHeart = false;
        }
        this.showText = this.calendarTaskService.isDone(this.currentTask, taskHistoryNoVoid) === true &&
            this.currentTask.isBinary() === false;
        this.showBtnVoid = this.calendarTaskService.isDoneAtDate(this.currentTask, this.dateService.currentWorkDate, taskHistoryNoVoid) === true ||
            this.calendarTaskService.isSkipped(taskHistoryNoVoid) === true;
        this.showTaskResult = this.calendarTaskService.isDoneAtDate(this.currentTask, this.dateService.currentWorkDate, taskHistoryNoVoid) === true ||
            this.calendarTaskService.isSkipped(taskHistoryNoVoid) === true;
        this.showMainTaskButtons = !this.showTaskResult;
        this.showBtnSkip = true;
        this.showNote = this.calendarTaskService.hasNote(this.currentTask, this.dateService.currentWorkDate);
        this.timePicked = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_0__["default"].getLocalMysqlTimeFloored(new Date()).substring(0, 5);
        // console.log('timepicked', this.timePicked);
        // TODO : Optimize between AFTER STATS and HERE, it takes 5-10 ms it should take 1
        // console.log('[AFTER ALL BASE RESET CHECKS] ', this.currentTask.Name, DateUtils.getTimeSince(startDate));
        // Future
        if (this.dateService.currentWorkDate > src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_0__["default"].RemoveHours(new Date())) {
            this.showBtnDone = false;
            this.showBtnStart = false;
            this.showBtnPause = false;
            this.showBtnEnterDuration = false;
            this.showBtnEnterTime = false;
            this.showBtnEnterValue = false;
            this.showBtnSkip = false;
            this.hideTimer = true;
            /*if (this.currentTask.Name === 'Reading') {
              console.log('HIDING TIMER READING FUTURE', this.timerComponent);
            }*/
        }
        else { // Present and past
            this.showBtnStart = this.currentTask.isDuration();
            this.showBtnEnterTime = this.currentTask.isTime();
            this.showBtnEnterDuration = this.currentTask.isDuration();
            this.showBtnEnterValue = this.currentTask.isDecimal();
            this.showBtnDone = this.currentTask.isBinary();
            this.hideTimer = true;
            /*if (this.currentTask.Name === 'Reading') {
              console.log('HIDING TIMER READING PRESENT PAST', this.timerComponent);
            }*/
            this.hideStats = true;
            this.showBtnNote = this.showBtnVoid && (taskHistoryNoVoid.Comment == null || taskHistoryNoVoid.Comment.length === 0);
            if (this.showTaskResult &&
                this.currentTask.isDuration() &&
                this.calendarTaskService.isSkipped(taskHistoryNoVoid) === false) {
                this.showBtnResumeTimer = true;
            }
            else {
                this.showBtnResumeTimer = false;
            }
        }
        // console.log('[AFTER FUTURE VS PRESENT CHECK] ', this.currentTask.Name, DateUtils.getTimeSince(startDate));
        // console.log('[RESET END] ', this.currentTask.Name, new Date().toISOString());
        // console.log('[RESET END] ', this.currentTask.Name, DateUtils.getTimeSince(startDate));
        this.showTimerIfExists();
        if (this.enableDragAndDrop === true && this.hideTimer === true) {
            this.showBtnDone = false;
            this.showBtnStart = false;
            this.showBtnEnterDuration = false;
            this.showBtnEnterTime = false;
            this.showBtnEnterValue = false;
            this.showBtnDelete = true;
            if (this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.UntilDone &&
                !this.calendarTaskService.isDone(this.currentTask, taskHistoryNoVoid)) {
                this.showPostponeBtn = true;
            }
        }
    }
    toggleStats() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            this.hideStats = !this.hideStats;
            if (!this.hideStats) {
                this.eventLoadStats.next();
            }
        });
    }
    voidResult() {
        this.reset();
        this.statsLoaded = false;
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.TimerCancel + this.currentTask.CalendarTaskId, null));
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.ProgressBar, null));
    }
    showPauseButton() {
        this.showBtnStart = false;
        this.showBtnPause = true;
    }
    showTimer() {
        // console.log('SHOWING TIMER');
        this.isBodyShown = true;
        this.hideTimer = false;
        this.showBtnEnterDuration = false;
        this.showBtnDone = true;
        this.showBtnResume = false;
        this.showBtnSkip = false;
        this.showBtnStart = false;
    }
    showResumeButton() {
        this.showBtnPause = false;
        this.showBtnResume = true;
        this.showBtnStart = false;
    }
    showCancelTimerButton() {
        this.showBtnCancelTimer = true;
    }
    getTaskNote() {
        // console.log('Origin GetTaskNote');
        const history = this.calendarTaskService.getTaskHistoryNoVoid(this.currentTask, this.dateService.currentWorkDate);
        if (history != null && history.Comment != null && history.Comment.length > 0) {
            return history.Comment;
        }
        else {
            return '';
        }
    }
    loadStats(weeksBehind) {
        const defaultStats = this.statsService.getTaskStats(this.currentTask.CalendarTaskId, this.dateService.currentWorkDate, weeksBehind);
        if (this.currentTask.StatType != null) {
            // console.log('SETTING STATTYPE : ', this.currentTask.StatType);
            defaultStats.StatType = this.currentTask.StatType;
        }
        if (defaultStats != null) {
            this.insertUpdateStats(defaultStats);
        }
        if (this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_2__.StatType.TimeUp ||
            this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_2__.StatType.TimeSleep) {
            const sleepStats = this.statsService.getSleepDurationStats(this.dateService.currentWorkDate, weeksBehind);
            if (sleepStats != null) {
                this.insertUpdateStats(sleepStats);
            }
        }
        if (this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_2__.StatType.TimeNonWaterStart ||
            this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_2__.StatType.TimeNonWaterStop) {
            const nonWaterStats = this.statsService.getTimeRestrictedDurationStats(this.dateService.currentWorkDate, weeksBehind);
            if (nonWaterStats != null) {
                this.insertUpdateStats(nonWaterStats);
            }
        }
        if (this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_2__.StatType.TimeEatStart ||
            this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_2__.StatType.TimeEatStop) {
            const eatingStats = this.statsService.getFastingDurationStats(this.dateService.currentWorkDate, weeksBehind);
            if (eatingStats != null) {
                this.insertUpdateStats(eatingStats);
            }
        }
    }
    insertUpdateStats(stats) {
        const existingTaskIndex = this.taskStats.findIndex(p => p.Name === stats.Name);
        if (existingTaskIndex === -1) {
            this.taskStats.push(stats);
        }
        else {
            const existingTask = this.taskStats[existingTaskIndex];
            existingTask.MinusWeeksArray = stats.MinusWeeksArray;
            existingTask.StartingMinusDays = stats.StartingMinusDays;
            existingTask.TaskInsertWorkDate = stats.TaskInsertWorkDate;
            existingTask.doneDays = stats.doneDays;
            existingTask.results = stats.results;
            existingTask.skippedDays = stats.skippedDays;
        }
    }
}


/***/ }),

/***/ 74746:
/*!**********************************************************************!*\
  !*** ./src/app/components/TaskCard/task-card/task-card.component.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskCardComponent": () => (/* binding */ TaskCardComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_card_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-card.component.html */ 62523);
/* harmony import */ var _task_card_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-card.component.scss */ 955);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_models_Core_task_history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/Core/task-history */ 42367);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_task_history_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/task-history.service */ 22586);
/* harmony import */ var src_app_pipes_main_pipe_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/pipes/main-pipe.module */ 42101);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/alert.service */ 34571);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_services_task_stats_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/task-stats.service */ 18546);
/* harmony import */ var src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/models/Core/custom-stat.enum */ 91878);
/* harmony import */ var _task_card_viewmodel__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./task-card-viewmodel */ 5278);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var _task_card_popover_task_card_popover_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../task-card-popover/task-card-popover.component */ 28661);
/* harmony import */ var src_app_services_date_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/services/date.service */ 23516);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var src_app_services_timer_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/services/timer.service */ 47557);
/* harmony import */ var _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @logisticinfotech/ionic4-datepicker */ 85925);
/* harmony import */ var src_app_services_vibration_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/services/vibration.service */ 71551);
/* harmony import */ var src_app_services_user_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! src/app/services/user.service */ 77524);

























let TaskCardComponent = class TaskCardComponent {
    constructor(alertController, taskHistoryService, mainPipe, logger, alertService, taskStatsService, translate, calendarTaskService, userService, pickerCtrl, popoverController, dateService, eventService, timerService, modalController, vibrationService, platform) {
        this.alertController = alertController;
        this.taskHistoryService = taskHistoryService;
        this.mainPipe = mainPipe;
        this.logger = logger;
        this.alertService = alertService;
        this.taskStatsService = taskStatsService;
        this.translate = translate;
        this.calendarTaskService = calendarTaskService;
        this.userService = userService;
        this.pickerCtrl = pickerCtrl;
        this.popoverController = popoverController;
        this.dateService = dateService;
        this.eventService = eventService;
        this.timerService = timerService;
        this.modalController = modalController;
        this.vibrationService = vibrationService;
        this.platform = platform;
        this.devMode = false;
        this.datePickerObj = {};
        this.subscriptions = [];
    }
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // const startDate = new Date();
            // this.logger.logDebug('[0] TASK ' + this.currentTask.Name + ' INIT STARTED', new Date().toISOString());
            // this.changeDetector.detach();
            // this.logger.logDebug('[0.1] TASK ' + this.currentTask.Name + ' LOADING VIEW MODEL', DateUtils.getTimeSince(startDate));
            try {
                this.viewModel = new _task_card_viewmodel__WEBPACK_IMPORTED_MODULE_10__.TaskCardViewModel(this.currentTask, this.calendarTaskService, this.logger, this.taskStatsService, this.dateService, this.timerService, this.eventService);
            }
            catch (error) {
                // console.error('ERROR LOADING VIEWMODEL', error);
                this.logger.logError(error);
                alert('Error loading viewModel');
            }
            // this.logger.logDebug('[0.2] TASK ' + this.currentTask.Name + ' View Model loaded', DateUtils.getTimeSince(startDate));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.DateChanged, () => {
                this.viewModel.reset();
            }));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.CardReset + this.currentTask.CalendarTaskId, () => {
                this.viewModel.reset();
            }));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.TimerResume + this.currentTask.CalendarTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield this.voidResultAndResumeTimer();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.ShowStats + this.currentTask.CalendarTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield this.btnMoreStatsClick();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.HideStats + this.currentTask.CalendarTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                this.viewModel.reset();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.SkipTask + this.currentTask.CalendarTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield this.skip();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.DeleteTask + this.currentTask.CalendarTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield this.btnDeleteClick(null);
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.PostponeTask + this.currentTask.CalendarTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield this.btnPostponeClick(null);
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.ToggleDragAndDrop, (enable) => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                this.viewModel.enableDragAndDrop = enable;
                this.viewModel.reset();
            })));
            // this.logger.logDebug('[0.3] TASK ' + this.currentTask.Name + ' Subscribed date change ', DateUtils.getTimeSince(startDate));
            const user = yield this.userService.getCurrentUser();
            // this.logger.logDebug('[0.4] TASK ' + this.currentTask.Name + ' Got Current User ', DateUtils.getTimeSince(startDate));
            this.viewModel.hourValues = src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.getHourValues(user.Config);
            this.viewModel.minuteValues = src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.getMinutesValues();
            // if (user.UserId === 'NSm32K4BF6Y7NFc2kwqWeGmy6KG2') {
            this.devMode = true;
            // }
            // this.logger.logDebug('[0.5] TASK ' + this.currentTask.Name + 'Got values, Reattaching', DateUtils.getTimeSince(startDate));
            // this.changeDetector.reattach();
            // this.logger.logDebug('[0.6] TASK ' + this.currentTask.Name + ' Reattached', DateUtils.getTimeSince(startDate));
            /*const lastGroup = this.calendarTaskService.allGroups[this.calendarTaskService.allGroups.length - 1];
            if (lastGroup.Tasks.length > 0) {
              console.log('LAST TASK GROUP', this.currentTask.Name);
              const laskTask = lastGroup.Tasks[lastGroup.Tasks.length - 1];
              if (laskTask.CalendarTaskId === this.currentTask.CalendarTaskId) {
                this.logger.logDebug('LAST ITEM LOADED', DateUtils.getTimeSince(startDate));
                // alert('LAST ITEM LOADED');
              } else {
                console.log('NOT LAST TASK', this.currentTask.Name);
              }
            } else {
              console.log('NOT LAST GROUP', this.currentTask.Name, lastGroup.Tasks);
            }*/
        });
    }
    ngOnDestroy() {
        for (const sub of this.subscriptions) {
            sub.unsubscribe();
        }
    }
    voidResultAndResumeTimer() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            const history = this.calendarTaskService.getTaskHistoryNoVoid(this.viewModel.currentTask, this.dateService.currentWorkDate);
            yield this.voidResult();
            const seconds = Number(history.TaskResult);
            // this.timerComponent.first.currentTimerObject.currentTimerSeconds = history.TaskResult;
            yield this.startTimer(seconds);
        });
    }
    ngAfterViewInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // if (this.currentTask.Name === 'Side Hustle') {
            // console.log('ngAfterViewInit', this.currentTask.Name, new Date().toISOString());
            // this.logger.logEvent('ngAfterViewInit', this.currentTask.Name);
            // console.log('after init', new Date().toISOString());
            // }
            // console.log('YYYYYYYYYYYYYY NG AFTER VIEW INIT', this.currentTask.Name);
            this.viewModel.timerComponent = this.timerComponent;
            /*if (this.currentTask.Name === 'Reading') {
              console.log('xxxxxxxxxxx CHECK IF EXISTS IN INIT');
            }*/
            // this.viewModel.showTimerIfExists();
            // this.logger.logDebug('[2] TASK ' + this.currentTask.Name + ' AFTER VIEW INIT', new Date().toISOString());
        });
    }
    btnSkipClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            this.vibrationService.vibrate(5);
            this.logger.logEvent('btnSkipClick started', { key: 'date', value: JSON.stringify(new Date().toISOString()) });
            if (event != null) {
                event.stopPropagation();
            }
            // Add this feature later
            /*const daysBehindModulo = 7; // this is also the threshold of how many skips in a row triggers a popup
        
            let skipsInARow = 0;
            let dateIterator: Date;
        
            // console.log('no doneworkdate lul', this.currentTask.Histories.filter(p => p.DoneWorkDate == null));
        
            // Need to sort histories
            this.currentTask.Histories.sort((a, b) => {
              return a.DoneWorkDate.getTime() - b.DoneWorkDate.getTime();
            });
        
            // Traverse array backwards to find how many skips in a row we did
            for (let i = this.currentTask.Histories.length - 1 ; i > 0 ; i--) {
              dateIterator = DateUtils.AddDays(DateUtils.Today(), - skipsInARow - 1);
              // console.log('dateIterator : ', dateIterator);
        
              if (this.currentTask.Histories[i].DoneWorkDate == null) {
                // console.log('DONEDATE IS NULL', this.currentTask.Histories[i]);
                continue;
              }
        
              if (DateUtils.datesAreEqual(this.currentTask.Histories[i].DoneWorkDate, dateIterator) &&
                  this.currentTask.Histories[i].TaskSkipped === true &&
                  this.currentTask.Histories[i].Void !== true) {
                skipsInARow++;
                // console.log('skipsInARow : ', skipsInARow);
              }
            }
        
            if (skipsInARow > 0 && skipsInARow % daysBehindModulo === 0) {
              console.log('TOO MANY SKIPS, POPOVER', skipsInARow);
              // console.log('TASK : ', this.currentTask);
              const popover = await this.popoverController.create({
                component: SkipsPopoverComponent,
                cssClass: 'group-popover',
                componentProps: {
                  currentTask: this.currentTask,
                  viewModel: this.viewModel,
                  daysInARow: skipsInARow
                },
                event,
                translucent: false,
                animated: true,
                showBackdrop: true,
              });
              return await popover.present();
            } else {
              console.log('Not too many skips, no popover', skipsInARow);
            }*/
            yield this.skip();
        });
    }
    skip() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logEvent('skip started', { key: 'date', value: JSON.stringify(new Date().toISOString())});
            const calendarTaskHistory = yield this.createNewHistory(null, false, true);
            yield this.saveTaskHistory(calendarTaskHistory);
            this.viewModel.showTaskResult = true;
            this.viewModel.showMainTaskButtons = false;
            // this.logger.logEvent('skip ended', { key: 'date', value: JSON.stringify(new Date().toISOString())});
        });
    }
    btnEnterTimeClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            event.stopPropagation();
            yield this.getTimeValueFromPicker();
        });
    }
    btnStartClick(event) {
        this.vibrationService.vibrate(5);
        event.stopPropagation();
        this.startTimer(0);
    }
    btnPauseClick(event) {
        this.vibrationService.vibrate(5);
        event.stopPropagation();
        this.pauseTimer();
    }
    btnUnpauseClick(event) {
        this.vibrationService.vibrate(5);
        event.stopPropagation();
        this.UnpauseTimer();
    }
    btnDoneClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            this.vibrationService.vibrate(5);
            this.logger.logEvent('btnDoneClick started', { key: 'date', value: JSON.stringify(new Date().toISOString()) });
            event.stopPropagation();
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.TimerComplete + this.currentTask.CalendarTaskId, null));
            if (this.viewModel.currentTask.isBinary()) {
                yield this.saveDoneTaskHistory();
            }
            else if (this.viewModel.currentTask.isDuration()) {
                yield this.saveDurationTaskHistory();
            }
            this.logger.logEvent('btnDoneClick ended', { key: 'date', value: JSON.stringify(new Date().toISOString()) });
        });
    }
    btnEnterValueClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            event.stopPropagation();
            yield this.getDecimalValueFromAlert();
        });
    }
    btnEnterDurationClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            event.stopPropagation();
            yield this.getDurationValueFromAlert(0, 0, 0);
        });
    }
    btnMoreStatsClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('showstats', this.currentTask.Name);
            if (!this.viewModel.statsLoaded) {
                // console.log('loading stats');
                this.viewModel.loadStats(52);
                // console.log('stats loaded');
                this.viewModel.statsLoaded = true;
            }
            // console.log('click1');
            this.viewModel.isBodyShown = true;
            yield this.viewModel.toggleStats();
            // console.log('click2');
        });
    }
    btnResumeTimerClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            event.stopPropagation();
            const history = this.calendarTaskService.getTaskHistoryNoVoid(this.viewModel.currentTask, this.dateService.currentWorkDate);
            yield this.voidResult();
            const seconds = Number(history.TaskResult);
            // this.timerComponent.first.currentTimerObject.currentTimerSeconds = history.TaskResult;
            this.startTimer(seconds);
        });
    }
    btnCancelTimerClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            if (event != null) {
                event.stopPropagation();
            }
            const handler = (alertData) => {
                this.cancelTimer();
            };
            const alertOptions = this.alertService.getCancelTimerAlertOptions(handler);
            const alert = yield this.alertController.create(alertOptions);
            yield alert.present();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield alert.dismiss();
            }));
            yield alert.onDidDismiss();
            subscription.unsubscribe();
        });
    }
    // TODO : Extract this ? it's duplicated
    btnPostponeClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            if (event != null) {
                event.stopPropagation();
            }
            const datePickerModal = yield this.modalController.create({
                component: _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_21__.Ionic4DatepickerModalComponent,
                cssClass: 'li-ionic4-datePicker',
                componentProps: {
                    objConfig: this.datePickerObj,
                    selectedDate: src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].AddDays(this.dateService.currentWorkDate, 1)
                }
            });
            yield datePickerModal.present();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield datePickerModal.dismiss();
            }));
            const data = yield datePickerModal.onDidDismiss();
            subscription.unsubscribe();
            const selectedDate = new Date(data.data.date);
            if (!src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].isValidDate(selectedDate)) { // standard cancel
                return;
            }
            yield this.postponeTask(selectedDate);
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.ProgressBar, null));
        });
    }
    // This is accessed by group-card
    postponeTask(selectedDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            this.currentTask.SkipUntil = selectedDate;
            const result = yield this.calendarTaskService.updateCalendarTask(this.currentTask);
            if (result) {
                this.viewModel.reset();
            }
            else {
                this.logger.logError(new Error('Unable to save skip until'));
                alert(this.translate.instant('btnPostponeClick-card.error-saving-skip-until'));
            }
        });
    }
    // TODO : Extract this ? it's duplicated
    btnDeleteClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            if (event != null) {
                event.stopPropagation();
            }
            const handler = (alertData) => {
                this.deleteTask();
            };
            const alertOptions = this.alertService.getDeleteTaskAlertOptions(handler);
            const alert = yield this.alertController.create(alertOptions);
            yield alert.present();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield alert.dismiss();
            }));
            yield alert.onDidDismiss();
            subscription.unsubscribe();
        });
    }
    deleteTask() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            /*const loading = await this.loadingController.create({
              message: this.translate.instant('edit-task.msg-deleting-task'),
            });
            loading.present();*/
            console.log('deleting started', new Date().toISOString(), this.currentTask);
            this.currentTask.Void = true;
            this.currentTask.UserId = yield this.userService.getCurrentUserId();
            const result = yield this.calendarTaskService.updateCalendarTask(this.currentTask);
            try {
                // loading.dismiss();
                if (result === true) {
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.CardReset + this.currentTask.CalendarTaskId, true));
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.ProgressBar, true));
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.NotificationSyncedFalse, null));
                }
                else {
                    this.logger.logError(new Error('Unable to delete this task, result is false'));
                }
                return;
            }
            catch (error) {
                // loading.dismiss();
                this.logger.logError(new Error('Unable to delete this task : ' + error.message));
                alert('Unable to delete this task');
                return;
            }
        });
    }
    onCardClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            const dateStart = new Date();
            this.logger.logDebug('CARD CLICK', dateStart.toISOString());
            const popover = yield this.popoverController.create({
                component: _task_card_popover_task_card_popover_component__WEBPACK_IMPORTED_MODULE_14__.TaskCardPopoverComponent,
                cssClass: 'group-popover',
                componentProps: {
                    currentTask: this.currentTask,
                    viewModel: this.viewModel,
                },
                event,
                translucent: false,
                animated: false,
                showBackdrop: false,
            });
            // this.logger.logDebug('CARD CLICK POPOVER CREATED ', DateUtils.getTimeSince(dateStart));
            yield popover.present();
            // this.logger.logDebug('CARD CLICK POPOVER PRESENTED ', DateUtils.getTimeSince(dateStart));
        });
    }
    timeEntered() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('EVENT TIMEENTERED', this.viewModel.timePicked);
            // console.log('EVENT TIMEENTERED2', event);
            if (this.viewModel.timePicked == null) {
                return;
            }
            // this.isSelected = false; // This probably does nothing, to be tested
            if (this.currentTask.StatType !== src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_9__.StatType.Regular) { // TODO : Make it optionnal
                const isBetweenAllowedHours = this.getIsBetweenAllowedHours();
                if (!isBetweenAllowedHours) {
                    this.validateTimeEntered();
                }
                else {
                    yield this.saveTimeEntered();
                }
            }
            else {
                yield this.saveTimeEntered();
            }
        });
    }
    getIsBetweenAllowedHours() {
        let resultHours = Number(this.viewModel.timePicked.substring(0, 2));
        const maximumEarlySleepHours = 12;
        const maximumPreviousDayHour = 12;
        let endOfDayHour = Number(this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.EndOfDayTimeKey).substring(0, 2));
        if (endOfDayHour < maximumPreviousDayHour) {
            endOfDayHour = 24 + endOfDayHour;
        }
        if (resultHours < maximumPreviousDayHour) {
            resultHours = resultHours + 24;
        }
        if (this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_9__.StatType.TimeEatStop ||
            this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_9__.StatType.TimeNonWaterStop ||
            this.currentTask.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_9__.StatType.TimeSleep) {
            const min = endOfDayHour - maximumEarlySleepHours;
            const max = endOfDayHour;
            const isBetweenAllowedHours = min <= resultHours && resultHours <= max;
            return isBetweenAllowedHours;
        }
        else {
            const min = endOfDayHour;
            const max = endOfDayHour + maximumEarlySleepHours;
            const isBetweenAllowedHours = min <= resultHours && resultHours <= max;
            return isBetweenAllowedHours;
        }
    }
    validateTimeEntered() {
        const handlerYes = (alertData2) => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.logEvent('time started', { key: 'date', value: JSON.stringify(new Date().toISOString()) });
            yield this.saveTimeEntered();
            this.logger.logEvent('time ended', { key: 'date', value: JSON.stringify(new Date().toISOString()) });
            return true;
        });
        const handlerNo = (alertData2) => {
            this.viewModel.timePicked = null;
            return false;
        };
        const alertOptions2 = this.alertService.getConfirmationAlertOptions(this.translate.instant('task-card.msg-confirmation') + ' ' + this.viewModel.timePicked, handlerYes, handlerNo);
        this.alertController.create(alertOptions2).then(alert2 => {
            alert2.present();
        });
    }
    saveTimeEntered() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            const endOfDayHour = Number((yield this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.EndOfDayTimeKey).substring(0, 2)));
            const hourEntered = Number(this.viewModel.timePicked.substring(0, 2));
            // let resultString = this.currentWorkDate.toISOString().substring(0, 10) + ' ' + this.viewModel.timePicked.substring(11, 16) + ':00';
            let resultString = this.dateService.currentWorkDate.toISOString().substring(0, 10) + ' ' + this.viewModel.timePicked + ':00';
            if (hourEntered <= endOfDayHour && endOfDayHour < 12) {
                resultString = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].AddDays(this.dateService.currentWorkDate, 1)
                    .toISOString().substring(0, 10) + ' ' + this.viewModel.timePicked + ':00';
            }
            // console.log('resultString', resultString);
            const resultDate = new Date(resultString);
            // console.log('resultDate', resultDate);
            const calendarTaskHistory = yield this.createNewHistory(resultDate, true, false);
            // console.log('SAVE TIME ENTERED 1 ', calendarTaskHistory);
            yield this.saveTaskHistory(calendarTaskHistory);
            // this.viewModel.reset();
        });
    }
    timerIsStarted() {
        return this.timerComponent.first.currentTimerObject.isDone === true;
    }
    createNewHistory(taskResult, taskCompleted, taskSkipped) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            const calendarTaskHistory = yield src_app_models_Core_task_history__WEBPACK_IMPORTED_MODULE_2__.TaskHistory.createNew(taskResult, taskCompleted, taskSkipped, new Date(), this.dateService.currentWorkDate, this.viewModel.currentTask.CalendarTaskId, src_app_services_user_service__WEBPACK_IMPORTED_MODULE_19__.UserService.currentUserId);
            return calendarTaskHistory;
        });
    }
    saveTaskHistory(calendarTaskHistory) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('SAVING TASK HISTORY', calendarTaskHistory, this.viewModel.currentTask);
            /*const loading = await this.loadingController.create({
              message: this.translate.instant('task-card.loading-update-calendartask'),
            });*/
            try {
                /*if (LocalStorageService.currentlyUsed === true) {
                  loading.present();
                }*/
                const success = yield this.taskHistoryService.insertTaskHistory(calendarTaskHistory);
                if (success === true) {
                    // console.log('SUCCESS, here are the histories ', this.viewModel.currentTask.Histories);
                    // this.viewModel.currentTask.Histories.push(calendarTaskHistory);
                    // console.log('added again to task', this.viewModel.currentTask.Histories);
                    // console.log(' SAVE SUCCESSFULT, EMITTING');
                    this.viewModel.reset();
                    this.viewModel.statsLoaded = false;
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.ProgressBar, null));
                    return;
                }
                else {
                    this.logger.logError(new Error('Unable to save taskHistory, historyId is null'));
                    alert(this.translate.instant('task-card.msg-saving-error'));
                    return;
                }
            }
            catch (error) {
                // console.log('Unable to save taskHistory : ', error);
                this.logger.logError(new Error('Unable to save taskHistory : ' + error.message));
                alert('Unable to save task history');
                return;
            }
            finally {
                // await loading.dismiss();
            }
        });
    }
    voidCurrentTaskHistory() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            const calendarTaskHistory = this.calendarTaskService.getTaskHistoryNoVoid(this.viewModel.currentTask, this.dateService.currentWorkDate);
            calendarTaskHistory.Void = true;
            const success = yield this.taskHistoryService.updateTaskHistory(calendarTaskHistory);
            if (success) { // TODO: Test error
                if (success === true) {
                    this.viewModel.reset();
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.ProgressBar, null));
                }
                else {
                    this.logger.logError(new Error('Unable to void TaskHistory, result is false'));
                    alert(this.translate.instant('task-card.msg-saving-error'));
                }
            }
            else {
                this.logger.logError(new Error('Unable to void TaskHistory : '));
            }
        });
    }
    saveDoneTaskHistory() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('saveDoneTaskHistory started');
            // this.isSelected = false;
            const calendarTaskHistory = yield this.createNewHistory(true, true, false);
            // console.log('Saving task history :', calendarTaskHistory);
            yield this.saveTaskHistory(calendarTaskHistory);
            // console.log('saveDoneTaskHistory ended');
            return;
        });
    }
    saveDurationTaskHistory() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // this.isSelected = false;
            let seconds = 0;
            if (this.timerComponent.first != null) {
                seconds = Math.round(this.timerComponent.first.currentTimerObject.currentTimerSeconds);
                // console.log('CURRENT TIMER SECONDS SAVED', seconds);
            }
            const calendarTaskHistory = yield this.createNewHistory(seconds, true, false);
            yield this.saveTaskHistory(calendarTaskHistory);
            return;
        });
    }
    getDecimalValueFromAlert() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                // if string is empty don't save
                if (String(alertData.Value).length === 0) {
                    return;
                }
                yield this.saveDecimalValue(alertData);
                this.logger.logEvent('decimal ended', { key: 'date', value: JSON.stringify(new Date().toISOString()) });
            });
            const alertOptions = this.alertService.getDecimalAlertOptions(handler);
            const alert = yield this.alertController.create(alertOptions);
            yield alert.present();
            const firstInput = document.querySelector('ion-alert input');
            firstInput.focus();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield alert.dismiss();
            }));
            yield alert.onDidDismiss();
            subscription.unsubscribe();
        });
    }
    getDurationValueFromAlert(hours, minutes, seconds) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                const resultHours = Number(alertData.Hours);
                const resultMinutes = Number(alertData.Minutes);
                const resultSeconds = Number(alertData.Seconds);
                if (resultHours < 0 || resultHours > 24 ||
                    resultMinutes < 0 || resultMinutes > 60 ||
                    resultSeconds < 0 || resultSeconds > 60) {
                    this.logger.logEvent('invalid times', { key: 'resultHours', value: JSON.stringify(resultHours) });
                    return;
                }
                this.logger.logEvent('duration started', { key: 'date', value: JSON.stringify(new Date().toISOString()) });
                yield this.saveDuration(resultMinutes, resultHours, resultSeconds);
                this.logger.logEvent('duration ended', { key: 'date', value: JSON.stringify(new Date().toISOString()) });
            });
            const alertOptions = this.alertService.getDurationAlertOptions(handler, hours, minutes, seconds);
            const alert = yield this.alertController.create(alertOptions);
            yield alert.present();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield alert.dismiss();
            }));
            yield alert.onDidDismiss();
            subscription.unsubscribe();
        });
    }
    getTimeValueFromPicker() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            const picker = yield this.pickerCtrl.create({
                columns: this.getColumns(),
                cssClass: 'time-picker',
                animated: false,
                backdropDismiss: false,
                buttons: [
                    {
                        text: this.translate.instant('alert.lbl-cancel'),
                        role: 'cancel'
                    },
                    {
                        text: this.translate.instant('alert.lbl-ok'),
                        handler: (value) => {
                            // console.log('HOUR', value.Hours.value);
                            // console.log('MINUTES', value.Minutes.value);
                            const hourString = Number(value.Hours.value) > 9 ?
                                value.Hours.value :
                                '0' + value.Hours.value;
                            const minutesString = Number(value.Minutes.value) > 9 ?
                                value.Minutes.value :
                                '0' + value.Minutes.value;
                            this.viewModel.timePicked = hourString + ':' + minutesString;
                            this.timeEntered();
                        }
                    }
                ]
            });
            yield picker.present();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
                yield picker.dismiss();
            }));
            yield picker.onDidDismiss();
            subscription.unsubscribe();
        });
    }
    getColumnOptions1() {
        const options = [];
        for (const hourValue of this.viewModel.hourValues) {
            options.push({
                text: hourValue,
                value: Number(hourValue)
            });
        }
        return options;
    }
    getColumnOptions2() {
        const options = [];
        for (const minuteValue of this.viewModel.minuteValues) {
            options.push({
                text: minuteValue,
                value: Number(minuteValue)
            });
        }
        return options;
    }
    getColumns() {
        const currentSelection = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].getLocalMysqlTimeFloored(new Date()).substring(0, 5);
        const currentHour = Number(currentSelection.substring(0, 2));
        const currentMinutes = Number(currentSelection.substring(3, 3 + 2));
        const HourIndex = this.viewModel.hourValues.findIndex(p => p === currentHour);
        const MinuteIndex = this.viewModel.minuteValues.findIndex(p => p === currentMinutes);
        const columns = [];
        columns.push({
            name: 'Hours',
            selectedIndex: HourIndex,
            options: this.getColumnOptions1(),
        });
        columns.push({
            name: 'Minutes',
            selectedIndex: MinuteIndex,
            options: this.getColumnOptions2()
        });
        // console.log('columns');
        return columns;
    }
    startTimer(initialSeconds) {
        // console.log('starting timer');
        this.viewModel.showPauseButton();
        this.viewModel.showCancelTimerButton();
        this.showTimer();
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.TimerStart + this.currentTask.CalendarTaskId, initialSeconds));
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.NotificationSyncedFalse, null));
    }
    UnpauseTimer() {
        // this.viewModel.voidResult();
        // console.log('<<<<<<<<< RESUME TIMER', this.currentTask.Name);
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.TimerUnpause + this.currentTask.CalendarTaskId, null));
        this.viewModel.showTimer();
        this.viewModel.showPauseButton();
        this.viewModel.showCancelTimerButton();
    }
    pauseTimer() {
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.TimerPause + this.currentTask.CalendarTaskId, null));
        this.viewModel.showResumeButton();
    }
    cancelTimer() {
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.TimerCancel + this.currentTask.CalendarTaskId, null));
        this.viewModel.reset();
    }
    showTimer() {
        this.viewModel.showTimer();
    }
    voidResult() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // this.isSelected = false;
            yield this.voidCurrentTaskHistory();
            return;
        });
    }
    saveNote(alertData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // Disable data over 1000 characters
            if (alertData.Value.length > 2000) {
                alertData.Value = alertData.Value.substring(0, 2000);
            }
            const history = this.calendarTaskService.getTaskHistoryNoVoid(this.viewModel.currentTask, this.dateService.currentWorkDate);
            // console.log('saveNote', history);
            history.Comment = alertData.Value;
            yield this.taskHistoryService.updateTaskHistory(history);
            this.viewModel.showNote = true;
        });
    }
    saveDuration(minutes, hours, seconds) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // this.isSelected = false;
            const durationSeconds = minutes * 60 + hours * 60 * 60 + seconds;
            const calendarTaskHistory = yield this.createNewHistory(durationSeconds, true, false);
            yield this.saveTaskHistory(calendarTaskHistory);
            return;
        });
    }
    saveDecimalValue(alertData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__awaiter)(this, void 0, void 0, function* () {
            // this.isSelected = false;
            const calendarTaskHistory = yield this.createNewHistory(alertData.Value, true, false);
            yield this.saveTaskHistory(calendarTaskHistory);
            return;
        });
    }
};
TaskCardComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.AlertController },
    { type: src_app_services_task_history_service__WEBPACK_IMPORTED_MODULE_3__.TaskHistoryService },
    { type: src_app_pipes_main_pipe_module__WEBPACK_IMPORTED_MODULE_4__.MainPipeModule },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_7__.ILogger },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_6__.AlertService },
    { type: src_app_services_task_stats_service__WEBPACK_IMPORTED_MODULE_8__.TaskStatsService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_23__.TranslateService },
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_11__.CalendarTaskService },
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_12__.IUserService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.PickerController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.PopoverController },
    { type: src_app_services_date_service__WEBPACK_IMPORTED_MODULE_15__.DateService },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService },
    { type: src_app_services_timer_service__WEBPACK_IMPORTED_MODULE_17__.TimerService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.ModalController },
    { type: src_app_services_vibration_service__WEBPACK_IMPORTED_MODULE_18__.VibrationService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_22__.Platform }
];
TaskCardComponent.propDecorators = {
    currentTask: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.Input }],
    timerComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChildren, args: ['htmlTimer',] }],
    currentCardComponent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChildren, args: ['currentcard',] }],
    datePicker: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_24__.ViewChildren, args: ['picker',] }]
};
TaskCardComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_20__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_24__.Component)({
        selector: 'app-task-card',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_card_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_card_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskCardComponent);



/***/ }),

/***/ 78230:
/*!**************************************************************************!*\
  !*** ./src/app/components/TaskCard/task-scores/task-scores.component.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChartPoint": () => (/* binding */ ChartPoint),
/* harmony export */   "TaskScoresComponent": () => (/* binding */ TaskScoresComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_scores_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-scores.component.html */ 33183);
/* harmony import */ var _task_scores_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-scores.component.scss */ 90931);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/number-utils */ 26173);
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! chart.js */ 71871);
/* harmony import */ var src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/models/Core/result-type.enum */ 82869);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var src_app_services_date_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/date.service */ 23516);
/* harmony import */ var src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/models/Core/custom-stat.enum */ 91878);
/* harmony import */ var src_app_services_user_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/user.service */ 77524);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/services/event.service */ 29170);















class ChartPoint {
}
let TaskScoresComponent = class TaskScoresComponent {
    constructor(translate, dateService, userService, logger, eventService) {
        this.translate = translate;
        this.dateService = dateService;
        this.userService = userService;
        this.logger = logger;
        this.eventService = eventService;
        this.loaded = false;
        this.minusDaysArray = [6, 5, 4, 3, 2, 1, 0];
        this.minusWeeksArray = [];
        this.cardsMinusWeeksArray = [];
    }
    ngOnInit() {
        // console.log('[3] SCORES ' + this.taskStats.Name + ' INIT STARTED', new Date().toISOString());
        this.loadSubscription = this.loadEvent.subscribe(() => this.loadStats());
        this.showCharVsDetails = this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary;
        this.showChart = this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary;
        this.show1AButton = this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary;
        this.showAverage = this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary;
        this.showTotal = this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary &&
            this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.TimeOfDay;
        this.showMax = this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary &&
            this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.TimeOfDay;
        this.showDetails = this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary;
        this.showCompletionRate = true;
        /*if (this.taskStats.Name === 'Wim Hof 3') {
          console.log('{}{}{} STATS', this.taskStats);
        }*/
        // this.logger.logDebug('[4] SCORES ' + this.taskStats.Name + ' INIT ENDED', new Date().toISOString());
    }
    ngOnDestroy() {
        this.loadSubscription.unsubscribe();
    }
    loadStats() {
        // console.log('loadstats3');
        if (this.loaded) {
            return;
        }
        // console.log('loading stats', new Date().toISOString());
        this.btnStatsClick(7);
        this.loaded = true;
        // console.log('stats loaded', new Date().toISOString());
    }
    showSkipped(minusDays) {
        // console.log('showSkipped', this.previousDaySkipped(minusDays));
        return this.previousDaySkipped(minusDays);
    }
    showCheckbox(minusDays) {
        // console.log('showcheckbox');
        return this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary &&
            this.previousDayDone(minusDays);
    }
    btnCloseStatsClick() {
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_11__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_11__.EventService.EventIds.HideStats + this.calendarTaskId, true));
    }
    showTime(minusDays) {
        // console.log('showTime');
        return this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.TimeOfDay &&
            this.previousDayDone(minusDays);
    }
    showDuration(minusDays) {
        // console.log('SHOW DURATION MINUSDAYS', minusDays);
        // const showit = this.taskStats.resultType === ResultType.Duration && this.previousDayDone(minusDays);
        // console.log('showduration', showit);
        return this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Duration && this.previousDayDone(minusDays);
    }
    showDecimal(minusDays) {
        // console.log('showdecimal');
        return this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Decimal && this.previousDayDone(minusDays);
    }
    btnStatsClick(daysBehind) {
        // console.log('btnStatsClick', daysBehind, this.taskStats);
        this.minusWeeksArray = [];
        this.cardsMinusWeeksArray = [];
        // console.log('STATS INSERT DATE', this.taskStats.TaskInsertWorkDate);
        const maximumDaysBehind = -1 * src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].daysBetween(this.dateService.currentWorkDate, this.taskStats.TaskInsertWorkDate);
        // console.log('MAXIMUM DAYS BEHIND', maximumDaysBehind, daysBehind);
        if (daysBehind > maximumDaysBehind) {
            // console.log('REDUCE DAYSBEHIND TO ', maximumDaysBehind);
            daysBehind = maximumDaysBehind;
        }
        let weeksBehind = Math.floor(daysBehind / 7);
        if (weeksBehind === 0) {
            weeksBehind = 1;
        }
        // console.log('weeksbehind', weeksBehind);
        // console.log('minusWeeksArray', this.minusWeeksArray);
        if (weeksBehind < this.taskStats.MinusWeeksArray.length) {
            // console.log('weeksBehind smaller than this.taskStats.MinusWeeksArray.length');
            for (let i = 0; i < weeksBehind; i++) {
                this.minusWeeksArray.push(weeksBehind - i - 1);
                if (this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary || i < 12) {
                    if (this.taskStats.resultType !== src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary) {
                        const maxWeeksbehind = Math.min(12, weeksBehind);
                        this.cardsMinusWeeksArray.push(maxWeeksbehind - i - 1);
                        // this.cardsMinusWeeksArray.push(11 - i);
                    }
                    else {
                        this.cardsMinusWeeksArray.push(weeksBehind - i - 1);
                    }
                }
            }
            // console.log('this.minusWeeksArray', this.minusWeeksArray);
            // console.log('this.cardsMinusWeeksArray', this.cardsMinusWeeksArray);
        }
        else {
            // console.log('weeksBehind NOT smaller than this.taskStats.MinusWeeksArray.length');
            this.minusWeeksArray = this.taskStats.MinusWeeksArray;
            daysBehind = this.taskStats.MinusWeeksArray.length * 7;
            this.cardsMinusWeeksArray = this.minusWeeksArray.filter(p => p < 12);
            // console.log('this.cardsMinusWeeksArray2', this.cardsMinusWeeksArray);
            // console.log('this.minusWeeksArray', this.minusWeeksArray);
        }
        // We want the first date of stats to be the task insert date
        if (this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Decimal) {
            this.createDecimalChart(daysBehind);
        }
        else if (this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Duration) {
            this.createDurationChart(daysBehind);
        }
        else if (this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.TimeOfDay) {
            this.createTimeChart(daysBehind);
        }
        else if (this.taskStats.resultType === src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_4__.ResultType.Binary) {
            this.createBinaryChart(daysBehind);
        }
    }
    getPreviousDayResult(minusDays) {
        const result = this.taskStats.results[this.taskStats.results.length - minusDays - 1];
        if (result != null) {
            return String(result);
        }
        else {
            return ' n/a ';
        }
    }
    getPreviousDayDuration(minusDays) {
        const result = this.taskStats.results[this.taskStats.results.length - minusDays - 1];
        // console.log('previousdayduration = ', result, this.taskStats.results);
        if (result != null && Number(result) > 0) {
            return this.getShortDurationString(Number(result));
        }
        else {
            return ' n/a ';
        }
    }
    getPreviousDayDone(minusDays) {
        const result = this.taskStats.doneDays[this.taskStats.doneDays.length - minusDays - 1];
        if (result != null) {
            return result;
        }
        else {
            return false;
        }
    }
    getShortDurationString(totalSeconds) {
        if (totalSeconds != null) {
            const hours = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].getHoursFromSeconds(totalSeconds);
            const minutes = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].getMinutesFromSeconds(totalSeconds);
            const seconds = totalSeconds - src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].SecondsInMinute * minutes - hours * src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].SecondsInHour;
            const secondsString = seconds > 10 ? String(seconds) : '0' + seconds;
            const minutesString = minutes > 10 ? String(minutes) : '0' + minutes;
            if (hours === 0 && minutes < 1) {
                return '00:' + secondsString;
            }
            else if (hours === 0) {
                return minutes + ':' + secondsString;
            }
            else {
                return hours + ':' + minutesString;
            }
        }
        else {
            return '';
        }
    }
    chartChanged(event) {
        if (event.detail.value === 'Chart') {
            this.showChart = true;
            this.showDetails = false;
        }
        else {
            this.showChart = false;
            this.showDetails = true;
        }
    }
    previousDaySkipped(minusDays) {
        if (this.taskStats.skippedDays.length < minusDays + 1) {
            // throw Error('minusDays is too big ' + minusDays);
            return false;
        }
        // console.log('previousDaySkipped: MinusDays', this.taskStats.skippedDays);
        const result = this.taskStats.skippedDays[this.taskStats.skippedDays.length - minusDays - 1];
        return result;
    }
    previousDayDone(minusDays) {
        if (this.taskStats.doneDays.length < minusDays + 1) {
            // throw Error('minusDays is too big ' + minusDays);
            return false;
        }
        const result = this.taskStats.doneDays[this.taskStats.doneDays.length - minusDays - 1];
        return result;
    }
    getPreviousDayTimeResultHours(minusDays) {
        // console.log('getPreviousDayTimeResultHours: MinusDays', minusDays);
        const result = this.taskStats.results[this.taskStats.results.length - minusDays - 1];
        if (result != null) {
            let hours = Number(result.substring(0, 2));
            const minutes = Number(result.substring(3));
            if (this.taskStats.StatType === src_app_models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_7__.StatType.TimeSleep) {
                const endOfDayTime = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_9__.UserConfig.EndOfDayTimeKey);
                const endOfDayHours = Number(endOfDayTime.substring(0, 2));
                if (hours < endOfDayHours) {
                    hours += 24;
                }
            }
            return hours + (minutes / 60);
        }
        else {
            return 0;
        }
    }
    createDecimalChart(minusDays) {
        const chartPoints = this.getDecimalChartPoints(minusDays);
        this.lines = new chart_js__WEBPACK_IMPORTED_MODULE_3__.Chart(this.lineChart.nativeElement, {
            type: 'line',
            data: {
                labels: chartPoints.map(p => p.X),
                datasets: [{
                        data: chartPoints.map(p => p.Y),
                        fill: false,
                        backgroundColor: 'rgb(255, 255, 255)',
                        borderColor: 'rgb(0, 0, 0)',
                        borderWidth: 1
                    }]
            },
            options: {
            /*scales: {
              yAxes: [{
                ticks: {
                  beginAtZero: true
                }
              }]
            },
            legend: {
              display: false
            },*/
            }
        });
    }
    createDurationChart(minusDays) {
        const chartPoints = this.getDurationChartPoints(minusDays);
        // console.log('chartpoints');
        const maxTime = Math.max(...chartPoints.map(p => p.Y));
        let myLabel = this.translate.instant('task-scores.lbl-minutes');
        if (maxTime > 60) {
            myLabel = this.translate.instant('task-scores.lbl-hours');
            chartPoints.forEach(p => p.Y = p.Y / 60);
        }
        this.lines = new chart_js__WEBPACK_IMPORTED_MODULE_3__.Chart(this.lineChart.nativeElement, {
            type: 'line',
            data: {
                labels: chartPoints.map(p => p.X),
                datasets: [{
                        data: chartPoints.map(p => p.Y),
                        fill: false,
                        backgroundColor: 'rgb(255, 255, 255)',
                        borderColor: 'rgb(0, 0, 0)',
                        borderWidth: 1
                    }]
            },
            options: {
            /*title: {
              display: true,
              text: myLabel,
            },
            legend: {
              display: false
            },*/
            }
        });
    }
    createTimeChart(minusDays) {
        const chartPoints = this.getTimeChartPoints(minusDays);
        this.lines = new chart_js__WEBPACK_IMPORTED_MODULE_3__.Chart(this.lineChart.nativeElement, {
            type: 'line',
            data: {
                labels: chartPoints.map(p => p.X),
                datasets: [{
                        data: chartPoints.map(p => p.Y),
                        fill: false,
                        backgroundColor: 'rgb(255, 255, 255)',
                        borderColor: 'rgb(0, 0, 0)',
                        borderWidth: 1
                    }]
            },
            options: {
            /*title: {
              display: true,
              text: this.translate.instant('task-scores.lbl-time'),
            },
            legend: {
              display: false
            },*/
            }
        });
    }
    createBinaryChart(minusDays) {
        // console.log('createBinaryChart', minusDays);
        const chartPoints = this.getBinaryChartPoints(minusDays);
        // console.log('chartpoints', chartPoints);
        const completed = chartPoints.filter(p => p.Y > 0).length;
        // console.log('completed', chartPoints.filter(p => p.Y > 0));
        if (chartPoints.length > 0) {
            const percentage = ' (' + (100.0 * completed / chartPoints.length).toFixed(1) + '%)';
            this.txtCompletionRate = completed.toString() + '/' + chartPoints.length.toString() + percentage;
            // console.log('txtCompletionRate', this.txtCompletionRate);
        }
        else {
            this.txtCompletionRate = '';
        }
    }
    getDecimalChartPoints(minusDays) {
        // console.log('getDecimalChartPoints', this.currentWorkDate);
        const chartPoints = [];
        for (const plusDay of src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_2__["default"].Range(-minusDays, 0, 1)) {
            const chartPoint = this.getDecimalChartPoint(plusDay);
            chartPoints.push(chartPoint);
        }
        this.setStatsStringsDecimal(chartPoints);
        return chartPoints;
    }
    setStatsStringsDecimal(chartPoints) {
        // Max
        const yValues = chartPoints.map(p => Number(p.Y))
            .filter(p => p > 0);
        // console.log('numbers', numbers);
        // console.log('max', Math.max.apply(Math, numbers));
        if (yValues.length > 0) {
            this.txtMaximum = String(Math.max.apply(Math, yValues));
        }
        else {
            this.txtMaximum = '0';
        }
        // Total
        const sum = yValues.reduce((a, b) => a + b, 0);
        // console.log('sum', sum.toFixed(1));
        this.txtTotal = sum.toFixed(1);
        // Average
        const avg = (sum / yValues.length) || 0;
        this.txtAverage = avg.toFixed(1);
        const completed = yValues.filter(p => p > 0).length;
        // console.log('completed', yValues.filter(p => p > 0));
        if (yValues.length > 0) {
            const percentage = ' (' + (100.0 * completed / chartPoints.length).toFixed(1) + '%)';
            this.txtCompletionRate = completed.toString() + '/' + chartPoints.length.toString() + percentage;
            // console.log('chartPoints.length', chartPoints.length);
            // console.log('txtCompletionRate', this.txtCompletionRate);
        }
        else {
            this.txtCompletionRate = '';
        }
    }
    getDurationChartPoints(minusDays) {
        // console.log('getDurationChartPoints', this.currentWorkDate);
        const chartPoints = [];
        for (const plusDay of src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_2__["default"].Range(-minusDays, 0, 1)) {
            const chartPoint = this.getDurationChartPoint(plusDay);
            chartPoints.push(chartPoint);
        }
        this.setStatsStringsDuration(chartPoints);
        return chartPoints;
    }
    setStatsStringsDuration(chartPoints) {
        // Max
        const numbers = chartPoints.map(p => Number(p.Y / 60))
            .filter(p => p > 0);
        // console.log('numbers', numbers);
        // console.log('chartPoints', chartPoints);
        if (numbers.length > 0) {
            this.txtMaximum = Math.max.apply(Math, numbers).toFixed(2) + ' ' +
                this.translate.instant('task-scores.lbl-hours');
        }
        else {
            this.txtMaximum = 0 + ' ' + this.translate.instant('task-scores.lbl-hours');
        }
        // Total
        const sum = numbers.reduce((a, b) => a + b, 0);
        this.txtTotal = sum.toFixed(1) + ' ' + this.translate.instant('task-scores.lbl-hours');
        // Average
        const avg = (sum / numbers.length) || 0;
        this.txtAverage = avg.toFixed(1) + ' ' + this.translate.instant('task-scores.lbl-hours');
        const completed = chartPoints.filter(p => p.Y > 0).length;
        // console.log('completed', chartPoints.filter(p => p.Y > 0));
        if (chartPoints.length > 0) {
            const percentage = ' (' + (100.0 * completed / chartPoints.length).toFixed(1) + '%)';
            this.txtCompletionRate = completed.toString() + '/' + chartPoints.length.toString() + percentage;
            // console.log('txtCompletionRate', this.txtCompletionRate);
        }
        else {
            this.txtCompletionRate = '';
        }
    }
    getTimeChartPoints(minusDays) {
        // console.log('getTimeChartPoints', this.currentWorkDate);
        const chartPoints = [];
        // console.log('before range minusdays', minusDays);
        // console.log('before range start', -minusDays);
        // console.log('range=', NumberUtils.Range(-minusDays, 0, 1));
        for (const plusDay of src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_2__["default"].Range(-minusDays, 0, 1)) {
            const chartPoint = this.getTimeChartPoint(plusDay);
            chartPoints.push(chartPoint);
        }
        this.setStatsStringsTime(chartPoints);
        return chartPoints;
    }
    getBinaryChartPoints(minusDays) {
        const chartPoints = [];
        // console.log('before range minusdays', minusDays);
        // console.log('before range start', -minusDays);
        // console.log('range=', NumberUtils.Range(-minusDays, 0, 1));
        for (const plusDay of src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_2__["default"].Range(-minusDays, 0, 1)) {
            const chartPoint = this.getBinaryChartPoint(plusDay);
            chartPoints.push(chartPoint);
        }
        // console.log('points pushed');
        this.setStatsStringsDecimal(chartPoints);
        return chartPoints;
    }
    setStatsStringsTime(chartPoints) {
        // Max
        const numbers = chartPoints.map(p => Number(p.Y))
            .filter(p => p > 0);
        if (numbers.length > 0) {
            this.txtMaximum = Math.max.apply(Math, numbers).toFixed(2);
        }
        else {
            this.txtMaximum = '';
        }
        // Total
        const sum = numbers.reduce((a, b) => a + b, 0);
        this.txtTotal = sum.toFixed(1);
        // Average
        const avg = (sum / numbers.length) || 0;
        this.txtAverage = avg.toFixed(1);
        const completed = chartPoints.filter(p => p.Y > 0).length;
        // console.log('completed', chartPoints.filter(p => p.Y > 0));
        if (chartPoints.length > 0) {
            const percentage = ' (' + (100.0 * completed / chartPoints.length).toFixed(1) + '%)';
            this.txtCompletionRate = completed.toString() + '/' + chartPoints.length.toString() + percentage;
            // console.log('txtCompletionRate', this.txtCompletionRate);
        }
        else {
            this.txtCompletionRate = '';
        }
    }
    getTimeChartPoint(plusDay) {
        const chartPoint = new ChartPoint();
        chartPoint.X = this.dateService.GetmmddFromMinusDays(-plusDay, this.dateService.currentWorkDate);
        const result = this.getPreviousDayTimeResultHours(-plusDay);
        if (result != null && result > 0) {
            chartPoint.Y = result;
        }
        else {
            chartPoint.Y = null;
        }
        return chartPoint;
    }
    getDurationChartPoint(plusDay) {
        // console.log('getting durationchartpoint');
        const chartPoint = new ChartPoint();
        chartPoint.X = this.dateService.GetmmddFromMinusDays(-plusDay, this.dateService.currentWorkDate);
        const result = this.getPreviousDayResult(-plusDay);
        if (result != null && Number(result) > 0) {
            chartPoint.Y = Number(result) / 60;
        }
        else {
            chartPoint.Y = 0;
        }
        return chartPoint;
    }
    getDecimalChartPoint(plusDay) {
        const chartPoint = new ChartPoint();
        chartPoint.X = this.dateService.GetmmddFromMinusDays(-plusDay, this.dateService.currentWorkDate);
        const result = Number(this.getPreviousDayResult(-plusDay));
        if (result != null && result > 0) {
            chartPoint.Y = result;
        }
        else {
            chartPoint.Y = null;
        }
        return chartPoint;
    }
    getBinaryChartPoint(plusDay) {
        const chartPoint = new ChartPoint();
        chartPoint.X = this.dateService.GetmmddFromMinusDays(-plusDay, this.dateService.currentWorkDate);
        const result = this.getPreviousDayDone(-plusDay);
        if (result != null && result === true) {
            chartPoint.Y = 1;
        }
        else {
            chartPoint.Y = null;
        }
        return chartPoint;
    }
};
TaskScoresComponent.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_12__.TranslateService },
    { type: src_app_services_date_service__WEBPACK_IMPORTED_MODULE_6__.DateService },
    { type: src_app_services_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_10__.ILogger },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_11__.EventService }
];
TaskScoresComponent.propDecorators = {
    calendarTaskId: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__.Input }],
    taskStats: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__.Input }],
    loadEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__.Input }],
    lineChart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_13__.ViewChild, args: ['lineChart',] }]
};
TaskScoresComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_13__.Component)({
        selector: 'app-task-scores',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_scores_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_scores_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskScoresComponent);



/***/ }),

/***/ 22368:
/*!**************************************************************!*\
  !*** ./src/app/components/TaskCard/timer/timer.component.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TimerComponent": () => (/* binding */ TimerComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_timer_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./timer.component.html */ 81126);
/* harmony import */ var _timer_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timer.component.scss */ 28228);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_services_timer_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/timer.service */ 47557);
/* harmony import */ var src_app_models_Core_task_timer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/models/Core/task-timer */ 85153);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var src_app_services_date_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/date.service */ 23516);









let TimerComponent = class TimerComponent {
    constructor(timerService, eventService, dateService, logger) {
        this.timerService = timerService;
        this.eventService = eventService;
        this.dateService = dateService;
        this.logger = logger;
        this.subscriptions = [];
    }
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('INIT TIMER',  this.startEvent);
            // this.logger.logDebug('[6] TIMER ' + this.currentTaskId + ' INIT STARTED', new Date().toISOString());
            this.currentTimerObject = new src_app_models_Core_task_timer__WEBPACK_IMPORTED_MODULE_3__.TaskTimer(this.currentTaskId, this.dateService.currentWorkDate);
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventService.EventIds.TimerStart + this.currentTaskId, (seconds) => {
                this.startTimer(seconds);
            }));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventService.EventIds.TimerPause + this.currentTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                yield this.pauseTimer();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventService.EventIds.TimerUnpause + this.currentTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                yield this.resumeTimer();
            })));
            // Resume timer is handled in the card component
            /*this.eventService.on(EventService.EventIds.TimerResume + this.currentTaskId, async () => {
              await this.resumeTimer();
            });*/
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventService.EventIds.TimerComplete + this.currentTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                yield this.completeTimer();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventService.EventIds.TimerCancel + this.currentTaskId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                yield this.cancelTimer();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventService.EventIds.DateChanged, (date) => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                yield this.getTimer(date);
            })));
            // this.logger.logDebug('[7] TIMER ' + this.currentTaskId + ' INIT DONE', new Date().toISOString());
            yield this.getTimer(this.dateService.currentWorkDate);
        });
    }
    ngOnDestroy() {
        for (const sub of this.subscriptions) {
            sub.unsubscribe();
        }
    }
    getTimer(date) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('GET TIMER');
            const timer = yield this.timerService.getTimer(date, this.currentTaskId);
            // console.log('GOT TIMER', timer);
            if (timer != null) {
                this.logger.logDebug('GOT TIMER');
                // this.logger.logDebug('GOT TIMER ', JSON.stringify(timer));
                // console.log('TIMER RETRIEVED ' + this.currentTaskId, timer);
                this.currentTimerObject = timer;
            }
            else {
                // console.log('TIMER NOT RETRIEVED ' + this.currentTaskId);
                // We still have to initialize an empty timer object or else it doesnt work
                this.currentTimerObject = new src_app_models_Core_task_timer__WEBPACK_IMPORTED_MODULE_3__.TaskTimer(this.currentTaskId, date);
            }
        });
    }
    startTimer(initialSeconds) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('STARTING TIMER', initialSeconds);
            this.logger.logDebug('START TIMER ' + this.currentTaskId);
            this.currentTimerObject = new src_app_models_Core_task_timer__WEBPACK_IMPORTED_MODULE_3__.TaskTimer(this.currentTaskId, this.dateService.currentWorkDate);
            this.currentTimerObject.currentTimerSeconds = initialSeconds;
            this.currentTimerObject.start();
            yield this.timerService.addTimer(this.currentTimerObject);
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventService.EventIds.SyncRequired, null));
            // console.log('currenttimer2', this.currentTimerObject);
        });
    }
    resumeTimer() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('RESUME TIMER');
            this.logger.logDebug('RESUME TIMER ' + this.currentTaskId);
            // console.log('Resumed timer', this.currentTimerObject);
            this.currentTimerObject.resume();
            yield this.timerService.updateTimer(this.currentTimerObject);
            // console.log('currenttimer2', this.currentTimerObject);
        });
    }
    pauseTimer() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('PAUSE TIMER');
            this.logger.logDebug('PAUSE TIMER ' + this.currentTaskId);
            this.currentTimerObject.pause();
            yield this.timerService.updateTimer(this.currentTimerObject);
            // console.log('currenttimer2', this.currentTimerObject);
        });
    }
    completeTimer() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('STOP TIMER');
            this.logger.logDebug('STOP TIMER ' + this.currentTaskId);
            this.currentTimerObject.complete();
            yield this.timerService.updateTimer(this.currentTimerObject);
            // console.log('currenttimer2', this.currentTimerObject);
        });
    }
    cancelTimer() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('CANCEL TIMER');
            this.logger.logDebug('CANCEL TIMER ' + this.currentTaskId);
            // console.log('currenttimer1', this.currentTimerObject);
            this.currentTimerObject.cancel();
            yield this.timerService.voidTimer(this.currentTimerObject);
            // console.log('currenttimer2', this.currentTimerObject);
        });
    }
};
TimerComponent.ctorParameters = () => [
    { type: src_app_services_timer_service__WEBPACK_IMPORTED_MODULE_2__.TimerService },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_5__.EventService },
    { type: src_app_services_date_service__WEBPACK_IMPORTED_MODULE_6__.DateService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__.ILogger }
];
TimerComponent.propDecorators = {
    currentTaskId: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input }]
};
TimerComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Component)({
        selector: 'app-timer',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_timer_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_timer_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TimerComponent);



/***/ }),

/***/ 35839:
/*!*************************************************************!*\
  !*** ./src/app/components/debug-log/debug-log.component.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DebugLogComponent": () => (/* binding */ DebugLogComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_debug_log_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./debug-log.component.html */ 85974);
/* harmony import */ var _debug_log_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug-log.component.scss */ 99263);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);







let DebugLogComponent = class DebugLogComponent {
    constructor(logger, modal, platform) {
        this.logger = logger;
        this.modal = modal;
        this.platform = platform;
    }
    ngOnInit() {
        this.currentLogs = this.logger.getDebugLogs();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            return yield this.modal.dismiss(null, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_3__.ModalService.ModalIds.Logs);
        });
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
};
DebugLogComponent.ctorParameters = () => [
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_2__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_5__.Platform }
];
DebugLogComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.Component)({
        selector: 'app-debug-log',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_debug_log_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_debug_log_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], DebugLogComponent);



/***/ }),

/***/ 21139:
/*!***************************************************************!*\
  !*** ./src/app/components/group-card/group-card.component.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroupCardComponent": () => (/* binding */ GroupCardComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_card_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./group-card.component.html */ 64679);
/* harmony import */ var _group_card_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./group-card.component.scss */ 54034);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _group_popover_group_popover_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../group-popover/group-popover.component */ 18535);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @logisticinfotech/ionic4-datepicker */ 85925);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var src_app_services_date_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/date.service */ 23516);
/* harmony import */ var src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/models/Core/task-frequency.enum */ 90616);












let GroupCardComponent = class GroupCardComponent {
    constructor(popoverController, eventService, platform, taskService, dateService, modalController) {
        this.popoverController = popoverController;
        this.eventService = eventService;
        this.platform = platform;
        this.taskService = taskService;
        this.dateService = dateService;
        this.modalController = modalController;
        this.disableDragAndDrop = true;
        this.subscriptions = [];
        this.datePickerObj = {};
    }
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            yield this.platform.ready();
            // Show timers retrieved from persistance
            /*for (const card of this.currentCards as TaskCardComponent[]) {
              card.viewModel.showTimerIfExists();
            }*/
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.SkipAllGroup + this.currentGroup.GroupId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
                yield this.skipAll();
                this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.ProgressBar, null));
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.PostponeAllGroup + this.currentGroup.GroupId, () => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
                yield this.postponeAll();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.SkipAll, () => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
                yield this.skipAll();
            })));
            this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.ToggleDragAndDrop, (enable) => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
                this.disableDragAndDrop = !enable;
            })));
            this.disableDragAndDrop = !this.taskService.enableDragAndDrop;
        });
    }
    ngOnDestroy() {
        for (const sub of this.subscriptions) {
            sub.unsubscribe();
        }
    }
    doReorder(ev) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            // Before complete is called with the items they will remain in the
            // order before the drag
            // console.log('EVENT', ev);
            // console.log('FROM, TO', ev.detail.from, ev.detail.to);
            // console.log('Before complete', this.currentGroup.Tasks);
            const from = Number(ev.detail.from);
            const to = Number(ev.detail.to);
            if (from < 0) {
                return;
            }
            if (to > this.currentGroup.Tasks.length - 1) {
                ev.detail.complete();
                return;
            }
            const fromTask = this.currentGroup.Tasks[from];
            const toTask = this.currentGroup.Tasks[to];
            // console.log('FROM ABSOLUTE', fromTask.AbsolutePosition);
            // console.log('TO ABSOLUTE', toTask.AbsolutePosition);
            fromTask.AbsolutePosition = toTask.AbsolutePosition;
            yield this.taskService.updateCalendarTask(fromTask);
            ev.detail.complete();
            // Finish the reorder and position the item in the DOM based on
            // where the gesture ended. Update the items variable to the
            // new order of items
            // this.currentGroup.Tasks = ev.detail.complete(this.currentGroup.Tasks);
            // After complete is called the items will be in the new order
            // console.log('After complete', this.currentGroup.Tasks);
        });
    }
    skipAll() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            for (const card of this.currentCards) {
                if (card.viewModel.isShown === true &&
                    card.viewModel.showMainTaskButtons === true &&
                    card.viewModel.showBtnSkip === true) {
                    // console.log('SKIPPING', card.currentTask.Name);
                    // console.log('skipping', card.viewModel.currentTask.Name);
                    yield card.skip();
                    card.viewModel.reset();
                }
            }
            // console.log('EMITTING PROGRESSBAR');
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.ProgressBar, null));
        });
    }
    postponeAll() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            const datePickerModal = yield this.modalController.create({
                component: _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_9__.Ionic4DatepickerModalComponent,
                cssClass: 'li-ionic4-datePicker',
                componentProps: {
                    objConfig: this.datePickerObj,
                    selectedDate: src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].AddDays(this.dateService.currentWorkDate, 1)
                }
            });
            yield datePickerModal.present();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
                yield datePickerModal.dismiss();
            }));
            const data = yield datePickerModal.onDidDismiss();
            subscription.unsubscribe();
            const selectedDate = new Date(data.data.date);
            if (!src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_5__["default"].isValidDate(selectedDate)) { // standard cancel
                return;
            }
            for (const card of this.currentCards) {
                if (card.viewModel.isShown === true &&
                    card.viewModel.showMainTaskButtons === true &&
                    card.viewModel.showBtnSkip === true &&
                    (card.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.UntilDone ||
                        card.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Once)) {
                    // console.log('SKIPPING', card.currentTask.Name);
                    // console.log('postponing ', card.viewModel.currentTask.Name);
                    yield card.postponeTask(selectedDate);
                    card.viewModel.reset();
                }
            }
            // console.log('EMITTING PROGRESSBAR');
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.ProgressBar, null));
        });
    }
    toggleGroup() {
        this.currentGroup.isExpanded = !this.currentGroup.isExpanded;
    }
    groupMenuClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            event.stopPropagation();
            const popover = yield this.popoverController.create({
                component: _group_popover_group_popover_component__WEBPACK_IMPORTED_MODULE_2__.GroupPopoverComponent,
                cssClass: 'group-popover',
                componentProps: {
                    group: this.currentGroup,
                },
                event,
                translucent: false,
                animated: false,
                showBackdrop: false,
            });
            return yield popover.present();
        });
    }
};
GroupCardComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.PopoverController },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.Platform },
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_4__.CalendarTaskService },
    { type: src_app_services_date_service__WEBPACK_IMPORTED_MODULE_6__.DateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.ModalController }
];
GroupCardComponent.propDecorators = {
    currentGroup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.Input }],
    currentCards: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ViewChildren, args: ['taskcard',] }],
    reorderGroup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_11__.ViewChildren, args: ['reorderGroup',] }]
};
GroupCardComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_11__.Component)({
        selector: 'app-group-card',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_card_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_group_card_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], GroupCardComponent);



/***/ }),

/***/ 40722:
/*!*******************************************************************!*\
  !*** ./src/app/components/group-create/group-create.component.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroupCreateComponent": () => (/* binding */ GroupCreateComponent),
/* harmony export */   "TaskSelectionViewModel": () => (/* binding */ TaskSelectionViewModel),
/* harmony export */   "GroupPositionViewModel": () => (/* binding */ GroupPositionViewModel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_create_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./group-create.component.html */ 98370);
/* harmony import */ var _group_create_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./group-create.component.scss */ 49578);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_models_Core_task_group__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/Core/task-group */ 33890);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_models_Exceptions_InvalidTaskGroupError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/models/Exceptions/InvalidTaskGroupError */ 85613);
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/alert.service */ 34571);
/* harmony import */ var src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/number-utils */ 26173);
/* harmony import */ var src_app_services_user_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/user.service */ 77524);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);














let GroupCreateComponent = class GroupCreateComponent {
    constructor(platform, modalController, calendarTaskService, loadingController, translate, logger, alertCtrl, alertService, userService) {
        this.platform = platform;
        this.modalController = modalController;
        this.calendarTaskService = calendarTaskService;
        this.loadingController = loadingController;
        this.translate = translate;
        this.logger = logger;
        this.alertCtrl = alertCtrl;
        this.alertService = alertService;
        this.userService = userService;
        this.selectableTasks = [];
        this.allOtherGroups = [];
        this.taskTypeValue = 'Once';
    }
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            this.resetBackButton();
            const otherGroups = this.calendarTaskService.allGroups
                .filter(p => p.Void !== true)
                .sort((x, y) => x.Position > y.Position ? 1 : -1);
            this.currentGroup = new src_app_models_Core_task_group__WEBPACK_IMPORTED_MODULE_2__.TaskGroup();
            this.currentGroup.GroupId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__["default"].getRandomId();
            this.currentGroup.InsertDate = new Date();
            this.currentGroup.UserId = yield this.userService.getCurrentUserId();
            // First task position 1
            if (!otherGroups.some(p => p.GroupId !== src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__.CalendarTaskService.UnassignedId)) {
                this.currentGroup.Position = 1;
                this.currentGroup.InitialPosition = 500;
            }
            else {
                this.currentGroup.Position = Math.max(...otherGroups.map(p => p.Position)) + 1;
                this.currentGroup.InitialPosition = 500;
            }
            // FILL UNASSIGNED
            // TODO: we could call GetAllPresentTasks instead but for now we show all tasks
            for (const task of this.calendarTaskService.getAllPresentTasks()) {
                // TODO: Remove this later, same for edit/create
                if (task.GroupId == null || task.GroupId.length === 0) {
                    task.GroupId = src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__.CalendarTaskService.UnassignedId;
                    //console.log('FILLED UNASSIGNED : ', task.GroupId);
                }
                if (task.GroupId === src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__.CalendarTaskService.UnassignedId) {
                    const selectableTask = new TaskSelectionViewModel();
                    selectableTask.calendarTaskId = task.CalendarTaskId;
                    selectableTask.Name = task.Name;
                    selectableTask.isChecked = false;
                    this.selectableTasks.push(selectableTask);
                }
            }
            this.selectAllChecked = false;
            // Set all other groups
            for (const group of otherGroups) {
                const groupViewModel = new GroupPositionViewModel();
                groupViewModel.Name = group.Name;
                groupViewModel.groupId = group.GroupId;
                groupViewModel.isSelected = false;
                groupViewModel.Position = group.Position;
                this.allOtherGroups.push(groupViewModel);
            }
            // Set After Group
            const maxPosition = Math.max(...this.allOtherGroups.map(p => p.Position));
            const index = this.allOtherGroups.findIndex(p => p.Position === maxPosition);
            this.selectedAfterGroup = this.allOtherGroups[index];
            this.selectedAfterGroup.isSelected = true;
            this.currentGroup.Position = maxPosition + 1;
        });
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_9__.ModalService.ModalIds.CreateGroup);
        });
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    checkAllClick() {
        const result = !this.selectAllChecked;
        for (const task of this.selectableTasks) {
            task.isChecked = result;
        }
    }
    btnSaveClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            try {
                this.currentGroup.validate(this.translate);
            }
            catch (error) {
                if (error instanceof src_app_models_Exceptions_InvalidTaskGroupError__WEBPACK_IMPORTED_MODULE_5__.InvalidTaskGroupError) {
                    // console.log('error04');
                    this.logger.logError(new Error('invalidtaskgrouperror'), { key: 'error', value: JSON.stringify(error) });
                    alert(error.message);
                    return;
                }
            }
            const loading = yield this.loadingController.create({
                message: this.translate.instant('group-create.msg-saving'),
            });
            loading.present();
            try {
                // Save all GroupIds // TODO: Move into insertGroup ?
                // const selectedTasks: CalendarTask[] = [];
                for (const taskViewModel of this.selectableTasks) {
                    if (taskViewModel.isChecked) {
                        const task = this.calendarTaskService.getTask(taskViewModel.calendarTaskId);
                        task.Synced = false;
                        task.GroupId = this.currentGroup.GroupId;
                        this.currentGroup.Tasks.push(task);
                    }
                }
                // Save Group
                yield this.calendarTaskService.insertGroup(this.currentGroup);
                yield this.modalController.dismiss(true, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_9__.ModalService.ModalIds.CreateGroup);
                // Refresh TaskList
                // Handle Errors
            }
            catch (error) {
                this.logger.logError(error);
                // console.log('ERROR SAVING GROUP', error);
                alert('error saving group');
            }
            finally {
                loading.dismiss();
            }
        });
    }
    btnEditPositionClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const handlerOk = (alertData) => {
                this.selectedAfterGroup = this.allOtherGroups.filter(p => p.Name === alertData)[0];
                this.absolutePositionChange(this.selectedAfterGroup.Position);
            };
            const handlerCancel = (alertData) => {
                return;
            };
            const handlerSetAsFirst = (alertData) => {
                this.setToFirst();
            };
            const alertOptions = this.alertService.getChangeGroupPositionAlertOptions(handlerOk, handlerCancel, handlerSetAsFirst, this.allOtherGroups.map(p => p.Name), this.selectedAfterGroup.Name);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    setBackButtonAlert(alert) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            yield alert.dismiss();
        }));
    }
    resetBackButton() {
        if (this.backButtonSubscription != null) {
            this.backButtonSubscription.unsubscribe();
        }
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
    setToFirst() {
        this.currentGroup.Position = 1;
        this.selectedAfterGroup = null;
    }
    absolutePositionChange(absolutePosition) {
        this.currentGroup.Position = absolutePosition + 1;
    }
    taskTypeChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (event.detail.value === 'Once') {
                this.currentGroup.RecurringDefault = false;
            }
            else {
                this.currentGroup.RecurringDefault = true;
            }
        });
    }
};
GroupCreateComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_11__.Platform },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_11__.ModalController },
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__.CalendarTaskService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_11__.LoadingController },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_12__.TranslateService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_11__.AlertController },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_6__.AlertService },
    { type: src_app_services_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService }
];
GroupCreateComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_13__.Component)({
        selector: 'app-group-create',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_create_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_group_create_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], GroupCreateComponent);

class TaskSelectionViewModel {
}
class GroupPositionViewModel {
}


/***/ }),

/***/ 72892:
/*!***************************************************************!*\
  !*** ./src/app/components/group-edit/group-edit.component.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroupEditComponent": () => (/* binding */ GroupEditComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_edit_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./group-edit.component.html */ 267);
/* harmony import */ var _group_edit_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./group-edit.component.scss */ 90971);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/alert.service */ 34571);
/* harmony import */ var src_app_interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/interfaces/i-data-sync-local-service */ 17610);
/* harmony import */ var _group_create_group_create_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../group-create/group-create.component */ 40722);
/* harmony import */ var src_app_models_Exceptions_InvalidTaskGroupError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/models/Exceptions/InvalidTaskGroupError */ 85613);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);













let GroupEditComponent = class GroupEditComponent {
    constructor(modalController, platform, calendarTaskService, translate, logger, loadingController, localDataSync, alertCtrl, alertService) {
        this.modalController = modalController;
        this.platform = platform;
        this.calendarTaskService = calendarTaskService;
        this.translate = translate;
        this.logger = logger;
        this.loadingController = loadingController;
        this.localDataSync = localDataSync;
        this.alertCtrl = alertCtrl;
        this.alertService = alertService;
        this.selectableTasks = [];
        this.allOtherGroups = [];
        this.taskTypeValue = 'Once';
    }
    ngOnInit() {
        this.resetBackButton();
        // FILL UNASSIGNED
        // TODO: we could call GetAllPresentTasks instead but for now we show all tasks
        for (const task of this.calendarTaskService.getAllPresentTasks()) {
            // TODO: Remove this later, same for edit/create
            if (task.GroupId == null || task.GroupId.length === 0) {
                task.GroupId = src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__.CalendarTaskService.UnassignedId;
            }
            if (task.GroupId === src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__.CalendarTaskService.UnassignedId ||
                task.GroupId === this.currentGroup.GroupId) {
                const selectableTask = new _group_create_group_create_component__WEBPACK_IMPORTED_MODULE_6__.TaskSelectionViewModel();
                selectableTask.calendarTaskId = task.CalendarTaskId;
                selectableTask.Name = task.Name;
                selectableTask.isChecked = task.GroupId === this.currentGroup.GroupId;
                this.selectableTasks.push(selectableTask);
            }
        }
        this.selectAllChecked = false;
        const otherGroups = this.calendarTaskService.allGroups
            .filter(p => p.GroupId !== this.currentGroup.GroupId &&
            p.Void !== true)
            .sort((x, y) => x.Position > y.Position ? 1 : -1);
        // Set all other groups
        for (const group of otherGroups) {
            const groupViewModel = new _group_create_group_create_component__WEBPACK_IMPORTED_MODULE_6__.GroupPositionViewModel();
            groupViewModel.Name = group.Name;
            groupViewModel.groupId = group.GroupId;
            groupViewModel.isSelected = false;
            groupViewModel.Position = group.Position;
            this.allOtherGroups.push(groupViewModel);
        }
        // Set After Group
        const afterGroups = this.allOtherGroups.filter(p => p.Position < this.currentGroup.Position);
        if (afterGroups.length > 0) {
            this.selectedAfterGroup = afterGroups[afterGroups.length - 1];
            this.selectedAfterGroup.isSelected = true;
        }
        if (this.currentGroup.Position === 0) {
            this.currentGroup.Position = 1;
        }
        this.taskTypeValue = this.currentGroup.RecurringDefault === false ? 'Once' : 'Recurring';
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_8__.ModalService.ModalIds.EditGroup);
        });
    }
    checkAllClick() {
        const result = !this.selectAllChecked;
        for (const task of this.selectableTasks) {
            task.isChecked = result;
        }
    }
    btnSaveClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            try {
                this.currentGroup.validate(this.translate);
            }
            catch (error) {
                if (error instanceof src_app_models_Exceptions_InvalidTaskGroupError__WEBPACK_IMPORTED_MODULE_7__.InvalidTaskGroupError) {
                    // console.log('error04');
                    this.logger.logError(new Error('invalidtaskgrouperror'), { key: 'error', value: JSON.stringify(error) });
                    alert(error.message);
                    return;
                }
            }
            const loading = yield this.loadingController.create({
                message: this.translate.instant('group-create.msg-saving'),
            });
            loading.present();
            try {
                // Save Group
                this.currentGroup.UpdateDate = new Date();
                // Verify all tasks in list, if they changed, update it
                // const selectedTasks: CalendarTask[] = [];
                for (const selectableTask of this.selectableTasks) {
                    const task = this.calendarTaskService.getTask(selectableTask.calendarTaskId);
                    if (selectableTask.isChecked && task.GroupId !== this.currentGroup.GroupId) {
                        task.Synced = false;
                        task.GroupId = this.currentGroup.GroupId;
                        this.currentGroup.Tasks.push(this.calendarTaskService.getTask(selectableTask.calendarTaskId));
                        yield this.localDataSync.queueUpdateCalendarTask(task.toDTO(), false);
                        // First add, make it visible
                        if (this.currentGroup.Tasks.length === 1) {
                            this.currentGroup.isVisible = true;
                        }
                        // selectedTasks.push(this.calendarTaskService.getTask(selectableTask.calendarTaskId));
                    }
                    else if (!selectableTask.isChecked && task.GroupId === this.currentGroup.GroupId) {
                        task.Synced = false;
                        task.GroupId = src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__.CalendarTaskService.UnassignedId;
                        yield this.localDataSync.queueUpdateCalendarTask(task.toDTO(), false);
                        const index = this.currentGroup.Tasks.findIndex(p => p.CalendarTaskId === selectableTask.calendarTaskId);
                        this.currentGroup.Tasks.splice(index, 1);
                        // Last Remove, make it invisible
                        if (this.currentGroup.Tasks.length === 0) {
                            this.currentGroup.isVisible = false;
                        }
                    }
                }
                // TODO : This await might be removable
                yield this.calendarTaskService.updateGroup(this.currentGroup);
                yield this.modalController.dismiss(true, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_8__.ModalService.ModalIds.EditGroup);
                // Refresh TaskList
                // Handle Errors
            }
            catch (error) {
                // console.log('ERROR SAVING GROUP', error);
                alert('error saving group');
            }
            finally {
                loading.dismiss();
            }
        });
    }
    btnEditPositionClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('EDITBUTTON CLICK');
            const handlerOk = (alertData) => {
                this.selectedAfterGroup = this.allOtherGroups.filter(p => p.Name === alertData)[0];
                this.absolutePositionChange(this.selectedAfterGroup.Position);
            };
            const handlerCancel = (alertData) => {
                return;
            };
            const handlerSetAsFirst = (alertData) => {
                this.setToFirst();
            };
            const alertOptions = this.alertService.getChangeGroupPositionAlertOptions(handlerOk, handlerCancel, handlerSetAsFirst, this.allOtherGroups.map(p => p.Name), this.selectedAfterGroup == null ?
                null :
                this.selectedAfterGroup.Name);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    btnDeleteClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => {
                this.deleteGroup();
            };
            const alertOptions = this.alertService.getDeleteGroupAlertOptions(handler);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    deleteGroup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            /*const loading = await this.loadingController.create({
              message: this.translate.instant('edit-task.msg-deleting-task'),
            });
            loading.present();*/
            // console.log('deleting started', new Date().toISOString());
            this.currentGroup.Void = true;
            this.currentGroup.VoidDate = new Date();
            this.currentGroup.isVisible = false;
            const result = yield this.calendarTaskService.updateGroup(this.currentGroup);
            try {
                // loading.dismiss();
                if (result === true) {
                    yield this.modalController.dismiss(true, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_8__.ModalService.ModalIds.EditGroup);
                }
                else {
                    this.logger.logError(new Error('Unable to delete this task, result is false'));
                }
                return;
            }
            catch (error) {
                // loading.dismiss();
                this.logger.logError(new Error('Unable to delete this task : ' + error.message));
                alert('Unable to delete this task');
                return;
            }
        });
    }
    setBackButtonAlert(alert) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            yield alert.dismiss();
        }));
    }
    resetBackButton() {
        if (this.backButtonSubscription != null) {
            this.backButtonSubscription.unsubscribe();
        }
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
    setToFirst() {
        this.currentGroup.Position = 1;
        this.selectedAfterGroup = null;
    }
    absolutePositionChange(absolutePosition) {
        this.currentGroup.Position = absolutePosition + 1;
    }
    taskTypeChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__awaiter)(this, void 0, void 0, function* () {
            if (event.detail.value === 'Once') {
                this.currentGroup.RecurringDefault = false;
            }
            else {
                this.currentGroup.RecurringDefault = true;
            }
        });
    }
};
GroupEditComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.Platform },
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__.CalendarTaskService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_11__.TranslateService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_3__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.LoadingController },
    { type: src_app_interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_5__.IDataSyncLocalService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_10__.AlertController },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_4__.AlertService }
];
GroupEditComponent.propDecorators = {
    currentGroup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_12__.Input }]
};
GroupEditComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_12__.Component)({
        selector: 'app-group-edit',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_edit_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_group_edit_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], GroupEditComponent);



/***/ }),

/***/ 29286:
/*!***************************************************************!*\
  !*** ./src/app/components/group-list/group-list.component.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroupListComponent": () => (/* binding */ GroupListComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_list_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./group-list.component.html */ 23033);
/* harmony import */ var _group_list_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./group-list.component.scss */ 95193);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);
/* harmony import */ var _group_create_group_create_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../group-create/group-create.component */ 40722);
/* harmony import */ var _group_edit_group_edit_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../group-edit/group-edit.component */ 72892);









let GroupListComponent = class GroupListComponent {
    constructor(platform, modalController, calendarTaskService, modalService) {
        this.platform = platform;
        this.modalController = modalController;
        this.calendarTaskService = calendarTaskService;
        this.modalService = modalService;
    }
    ngOnInit() {
        this.resetBackButton();
        this.refreshGroupList();
    }
    refreshGroupList() {
        this.calendarTaskService.reorderAllRamGroups();
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_3__.ModalService.ModalIds.Groups);
        });
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    addGroupButtonClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            this.backButtonSubscription.unsubscribe();
            const result = yield this.modalService.showCreateGroupModal(_group_create_group_create_component__WEBPACK_IMPORTED_MODULE_4__.GroupCreateComponent);
            this.resetBackButton();
            if (result === true) {
                this.refreshGroupList();
            }
        });
    }
    btnGroupHeaderClick(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const result = yield this.modalService.showEditGroupModal(_group_edit_group_edit_component__WEBPACK_IMPORTED_MODULE_5__.GroupEditComponent, group);
            if (result === true) {
                this.refreshGroupList();
            }
        });
    }
    setBackButtonModal(picker) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            yield picker.dismiss();
        }));
    }
    resetBackButton() {
        if (this.backButtonSubscription != null) {
            this.backButtonSubscription.unsubscribe();
        }
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
};
GroupListComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.Platform },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.ModalController },
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__.CalendarTaskService },
    { type: src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_3__.ModalService }
];
GroupListComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Component)({
        selector: 'app-group-list',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_list_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_group_list_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], GroupListComponent);



/***/ }),

/***/ 18535:
/*!*********************************************************************!*\
  !*** ./src/app/components/group-popover/group-popover.component.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroupPopoverComponent": () => (/* binding */ GroupPopoverComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_popover_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./group-popover.component.html */ 15617);
/* harmony import */ var _group_popover_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./group-popover.component.scss */ 17217);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);
/* harmony import */ var _group_edit_group_edit_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../group-edit/group-edit.component */ 72892);
/* harmony import */ var _task_create_task_create_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../task-create/task-create.component */ 20391);









let GroupPopoverComponent = class GroupPopoverComponent {
    constructor(popoverController, eventService, modalService) {
        this.popoverController = popoverController;
        this.eventService = eventService;
        this.modalService = modalService;
        this.skipAllBtnShown = true;
        this.postponeAllBtnShown = true;
    }
    ngOnInit() { }
    btnCreateTaskClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            yield this.popoverController.dismiss();
            yield this.modalService.showCreateTaskModal(_task_create_task_create_component__WEBPACK_IMPORTED_MODULE_5__.TaskCreateComponent, this.group.GroupId);
        });
    }
    btnEditGroupClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const result = yield this.modalService.showEditGroupModal(_group_edit_group_edit_component__WEBPACK_IMPORTED_MODULE_4__.GroupEditComponent, this.group);
            if (result === true) {
                yield this.popoverController.dismiss();
            }
        });
    }
    btnSkipAllClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService.EventIds.SkipAllGroup + this.group.GroupId, null));
            yield this.popoverController.dismiss();
        });
    }
    btnPostponeAllClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService.EventIds.PostponeAllGroup + this.group.GroupId, null));
            yield this.popoverController.dismiss();
        });
    }
};
GroupPopoverComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_7__.PopoverController },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService },
    { type: src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_3__.ModalService }
];
GroupPopoverComponent.propDecorators = {
    group: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_8__.Input }]
};
GroupPopoverComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_8__.Component)({
        selector: 'app-group-popover',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_group_popover_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_group_popover_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], GroupPopoverComponent);



/***/ }),

/***/ 50927:
/*!*****************************************************!*\
  !*** ./src/app/components/login/login.component.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LoginComponent": () => (/* binding */ LoginComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_login_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./login.component.html */ 71081);
/* harmony import */ var _login_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./login.component.scss */ 93069);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/router */ 13252);
/* harmony import */ var src_app_interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/interfaces/i-authentication-service */ 39296);
/* harmony import */ var src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/models/Core/language.enum */ 76975);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/models/Core/user */ 42535);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_user_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/user.service */ 77524);
/* harmony import */ var src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/data-sync-server-service */ 26022);
/* harmony import */ var src_app_shared_thread_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/shared/thread.utils */ 39023);
















let LoginComponent = class LoginComponent {
    constructor(router, auth, userService, translate, logger, menuCtrl, platform) {
        this.router = router;
        this.auth = auth;
        this.userService = userService;
        this.translate = translate;
        this.logger = logger;
        this.menuCtrl = menuCtrl;
        this.platform = platform;
    }
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__awaiter)(this, void 0, void 0, function* () {
            this.menuCtrl.enable(false);
            this.showLogin = true;
            if ((yield this.auth.currentUserIsAuthenticated()) === true) {
                this.redirectToTaskList();
            }
            else {
                //console.log('logging out1');
                yield this.userService.logout();
            }
        });
    }
    ngAfterViewInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__awaiter)(this, void 0, void 0, function* () {
            // Select first input
            try {
                yield src_app_shared_thread_utils__WEBPACK_IMPORTED_MODULE_10__["default"].sleep(500);
                const firstInput = document.querySelector('#ui-sign-in-email-input');
                // console.log('firstinput', firstInput);
                firstInput.focus();
            }
            catch (error) {
                // console.log('error', error);
                this.logger.logError(error);
            }
        });
    }
    successCallback(signInSuccessData) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('successcallback');
            this.menuCtrl.enable(true);
            this.logger.logDebug('~ Success Signin Callback', JSON.stringify(signInSuccessData), new Date().toISOString());
            this.showLogin = false;
            yield this.auth.setLoginPersistance();
            //console.log('persistance set');
            this.logger.logDebug('~ Login persistance set', new Date().toISOString());
            this.userService.getUserForLogin().then(user => {
                this.logger.logDebug('~ Got Current User, setting language', new Date().toISOString());
                if (user == null) {
                    this.logger.logDebug('user is null, redirecting to tasklist for FirstTime()');
                    this.redirectToTaskList();
                    return;
                }
                src_app_services_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser = user;
                src_app_services_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUserId = user.UserId;
                src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_9__.DataSyncServerService.GetLatestRequired = true;
                src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_9__.DataSyncServerService.GetLatestRequiredReason = 'Login success';
                // console.log('got user', user);
                if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_7__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_6__.UserConfig.PreferedLanguageKey) === src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_3__.Language.French) {
                    this.logger.logDebug('~ Use Fr', new Date().toISOString());
                    this.translate.use('fr');
                    this.logger.logDebug('~ Fr Used', new Date().toISOString());
                }
                else {
                    this.logger.logDebug('~ Use En', new Date().toISOString());
                    this.translate.use('en');
                    this.logger.logDebug('~ En Used', new Date().toISOString());
                }
                if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_7__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_6__.UserConfig.KeepPortrait) === true) {
                    try {
                        if (this.platform.is('capacitor')) {
                            screen.orientation.lock('portrait');
                        }
                    }
                    catch (error) {
                    }
                }
                this.redirectToTaskList();
            }).catch(error => {
                // console.log('Error get user for login', error);
                alert('Unable to get user from server, please try again later');
                this.redirectToLogin();
            });
        });
    }
    errorCallback(errorData) {
        this.logger.logEvent('login failed', { key: 'errorDate', value: JSON.stringify(errorData) });
    }
    redirectToTaskList() {
        this.logger.logDebug('~ Redirecting to task list', new Date().toISOString());
        this.router.navigate(['/task-list']);
    }
    redirectToLogin() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.logDebug('~ Redirecting to login', new Date().toISOString());
            yield this.userService.logout();
            location.reload();
        });
    }
};
LoginComponent.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_12__.Router },
    { type: src_app_interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_2__.IAuthenticationService },
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_5__.IUserService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_13__.TranslateService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_14__.MenuController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_14__.Platform }
];
LoginComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_15__.Component)({
        selector: 'app-login',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_login_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_login_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], LoginComponent);



/***/ }),

/***/ 96428:
/*!*************************************************************!*\
  !*** ./src/app/components/note-list/note-list.component.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoteListComponent": () => (/* binding */ NoteListComponent),
/* harmony export */   "NoteViewModel": () => (/* binding */ NoteViewModel),
/* harmony export */   "TaskFilterViewModel": () => (/* binding */ TaskFilterViewModel)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_note_list_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./note-list.component.html */ 31947);
/* harmony import */ var _note_list_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note-list.component.scss */ 22424);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/alert.service */ 34571);
/* harmony import */ var src_app_services_task_history_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/task-history.service */ 22586);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);











let NoteListComponent = class NoteListComponent {
    constructor(platform, modalController, calendarTaskService, translate, loadingController, alertCtrl, alertService, historyService) {
        this.platform = platform;
        this.modalController = modalController;
        this.calendarTaskService = calendarTaskService;
        this.translate = translate;
        this.loadingController = loadingController;
        this.alertCtrl = alertCtrl;
        this.alertService = alertService;
        this.historyService = historyService;
        this.taskFilters = [];
        this.allNotes = [];
        this.filteredNotes = [];
        this.keywordSearch = '';
    }
    ngOnInit() {
        this.resetBackButton();
        this.startDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].AddDays(src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].Today(), -365);
        this.endDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].Today();
        this.startDateText = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].getLocalMysqlDateString(this.startDate);
        this.endDateText = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].getLocalMysqlDateString(this.endDate);
        this.initializeFilters();
        this.initializeAllNotes();
        this.setFilteredNotes();
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    checkboxChanged() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('note-list.loading-filters'),
            });
            yield loading.present();
            yield this.setFilteredNotes();
            yield loading.dismiss();
        });
    }
    btnDeleteCommentClick(note) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                // console.log('DELETING NOTE', note);
                const index = this.filteredNotes.findIndex(p => p.historyId === note.historyId);
                this.filteredNotes.splice(index, 1);
                const index2 = this.allNotes.findIndex(p => p.historyId === note.historyId);
                this.allNotes.splice(index2, 1);
                const task = this.calendarTaskService.getTask(note.calendarTaskId);
                const taskHistoryIndex = task.Histories.findIndex(p => p.TaskHistoryId === note.historyId);
                const history = task.Histories[taskHistoryIndex];
                history.Comment = '';
                history.UpdateDate = new Date();
                yield this.historyService.updateTaskHistory(history);
            });
            const alertOptions = this.alertService.getDeleteNoteAlertOptions(handler);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    keywordChanged() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            if (this.keywordSearch.length > 1) {
                yield this.setFilteredNotes();
            }
        });
    }
    textClick(note) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
                // console.log('UPDATE NOTE', alertData.Note);
                // Update NoteViewModel
                const index = this.filteredNotes.findIndex(p => p.historyId === note.historyId);
                this.filteredNotes[index].text = alertData.Note;
                // Update Note
                const task = this.calendarTaskService.getTask(note.calendarTaskId);
                const taskHistoryIndex = task.Histories.findIndex(p => p.TaskHistoryId === note.historyId);
                const history = task.Histories[taskHistoryIndex];
                history.Comment = alertData.Note;
                history.UpdateDate = new Date();
                yield this.historyService.updateTaskHistory(history);
                // console.log('NOTE UPDATED', JSON.stringify(history));
                // TODO : We need to update the cardViewModels that changed
            });
            const alertOptions = this.alertService.getEditNoteAlertOptions(handler, note.text);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_6__.ModalService.ModalIds.Notes);
        });
    }
    initializeFilters() {
        for (const task of this.calendarTaskService.getAllTasks()) {
            for (const history of task.Histories) {
                if (history.Comment != null) {
                    const filter = new TaskFilterViewModel();
                    filter.calendarTaskId = task.CalendarTaskId;
                    filter.isChecked = false;
                    filter.Name = task.Name;
                    this.taskFilters.push(filter);
                    break;
                }
            }
        }
    }
    initializeAllNotes() {
        this.allNotes = [];
        for (const task of this.calendarTaskService.getAllTasks()) { // TODO : Might need to sort ?
            for (const history of task.Histories) {
                if (history.Comment != null) {
                    const note = new NoteViewModel();
                    if (history.DoneWorkDate == null) {
                        // console.log('+++++++ workdatedone is null');
                        continue;
                    }
                    note.date = history.DoneWorkDate;
                    note.dateText = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].getLocalMysqlDateString(history.DoneWorkDate); // TODO: Use Datepipe instead ?
                    note.historyId = history.TaskHistoryId;
                    note.taskName = task.Name;
                    note.calendarTaskId = task.CalendarTaskId;
                    note.text = history.Comment;
                    note.result = this.calendarTaskService.getTaskResultFromHistory(task, history);
                    note.showCheckedBox = this.calendarTaskService.isDoneAtDate(task, note.date, history) &&
                        task.isBinary();
                    if (!note.showCheckedBox) {
                        note.showBrokenHeart = this.calendarTaskService.isSkipped(history);
                    }
                    else {
                        note.showBrokenHeart = false;
                    }
                    note.showText = this.calendarTaskService.isDone(task, history) &&
                        !task.isBinary();
                    this.allNotes.push(note);
                }
            }
        }
    }
    setFilteredNotes() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            /*const loading = await this.loadingController.create({
              message: this.translate.instant('note-list.loading-filters'),
            });
            loading.present();*/
            const startTime = this.startDate.getTime();
            const endTime = this.endDate.getTime();
            // console.log('SETTING FILTERED NOTES', this.startDate, this.endDate);
            const calendarTaskIdsSelected = [];
            for (const taskFilter of this.taskFilters) {
                if (taskFilter.isChecked) {
                    calendarTaskIdsSelected.push(taskFilter.calendarTaskId);
                }
            }
            if (this.keywordSearch.length > 0) {
                if (calendarTaskIdsSelected.length > 0) { // Keyword and tasks selected
                    this.filteredNotes = this.allNotes.filter(p => p.date.getTime() >= startTime &&
                        p.date.getTime() <= endTime &&
                        calendarTaskIdsSelected.some(t => t === p.calendarTaskId) &&
                        p.text.includes(this.keywordSearch));
                }
                else { // Keyword and no task selected
                    this.filteredNotes = this.allNotes.filter(p => p.date.getTime() >= startTime &&
                        p.date.getTime() <= endTime &&
                        p.text.includes(this.keywordSearch));
                }
            }
            else { // No keyword selected
                this.filteredNotes = this.allNotes.filter(p => p.date.getTime() >= startTime &&
                    p.date.getTime() <= endTime &&
                    calendarTaskIdsSelected.some(t => t === p.calendarTaskId));
            }
            // loading.dismiss();
            // console.log('FILTERED NOTES : ', this.filteredNotes);
        });
    }
    setBackButtonAlert(alert) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            yield alert.dismiss();
        }));
    }
    resetBackButton() {
        if (this.backButtonSubscription != null) {
            this.backButtonSubscription.unsubscribe();
        }
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
};
NoteListComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_8__.Platform },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_8__.ModalController },
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__.CalendarTaskService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_9__.TranslateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_8__.LoadingController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_8__.AlertController },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_4__.AlertService },
    { type: src_app_services_task_history_service__WEBPACK_IMPORTED_MODULE_5__.TaskHistoryService }
];
NoteListComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_10__.Component)({
        selector: 'app-note-list',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_note_list_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_note_list_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], NoteListComponent);

class NoteViewModel {
}
class TaskFilterViewModel {
}


/***/ }),

/***/ 80270:
/*!*********************************************************!*\
  !*** ./src/app/components/privacy/privacy.component.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PrivacyComponent": () => (/* binding */ PrivacyComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_privacy_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./privacy.component.html */ 18204);
/* harmony import */ var _privacy_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./privacy.component.scss */ 25376);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);






let PrivacyComponent = class PrivacyComponent {
    constructor(modalController, platform) {
        this.modalController = modalController;
        this.platform = platform;
    }
    ngOnInit() {
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(null, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_2__.ModalService.ModalIds.Privacy);
        });
    }
};
PrivacyComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.Platform }
];
PrivacyComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Component)({
        selector: 'app-privacy',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_privacy_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_privacy_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], PrivacyComponent);



/***/ }),

/***/ 95721:
/*!*********************************************************************!*\
  !*** ./src/app/components/send-feedback/send-feedback.component.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SendFeedbackComponent": () => (/* binding */ SendFeedbackComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_send_feedback_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./send-feedback.component.html */ 36979);
/* harmony import */ var _send_feedback_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./send-feedback.component.scss */ 58595);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_models_DTO_dto_bug_report__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/DTO/dto-bug-report */ 19664);
/* harmony import */ var src_app_models_Core_bug_report_type_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/models/Core/bug-report-type.enum */ 18670);
/* harmony import */ var src_app_services_bug_report_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/bug-report.service */ 98158);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);












let SendFeedbackComponent = class SendFeedbackComponent {
    constructor(modalController, loadingController, translate, bugReportService, userService, logger, platform) {
        this.modalController = modalController;
        this.loadingController = loadingController;
        this.translate = translate;
        this.bugReportService = bugReportService;
        this.userService = userService;
        this.logger = logger;
        this.platform = platform;
    }
    ngOnInit() {
        this.bugReport = new src_app_models_DTO_dto_bug_report__WEBPACK_IMPORTED_MODULE_2__.DTOBugReport();
        this.bugReport.BugReportType = src_app_models_Core_bug_report_type_enum__WEBPACK_IMPORTED_MODULE_3__.BugReportType.Bug;
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(null, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_7__.ModalService.ModalIds.Feedback);
        }));
        this.showSurveyTab = true;
        this.showBugsTab = false;
        this.showSupportTab = false;
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    btnSendClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            if (this.bugReport.Title == null || this.bugReport.Title.length < 10) {
                alert(this.translate.instant('menu.title-too-short'));
                return;
            }
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.sending-feedback'),
            });
            loading.present();
            this.bugReport.UserId = yield this.userService.getCurrentUserId();
            this.bugReport.InsertDate = new Date();
            const response = yield this.bugReportService.SendReport(this.bugReport);
            loading.dismiss();
            if (response === true) {
                yield this.modalController.dismiss(null, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_7__.ModalService.ModalIds.Feedback);
                return;
            }
            else {
                this.logger.logEvent('Bug report failed');
                return false;
            }
        });
    }
    btnCancelClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('Cancelclick');
            yield this.modalController.dismiss(null, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_7__.ModalService.ModalIds.Feedback);
        });
    }
    feedbackTypeChanged(data) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            if (data.detail.value === 'bug') {
                this.bugReport.BugReportType = src_app_models_Core_bug_report_type_enum__WEBPACK_IMPORTED_MODULE_3__.BugReportType.Bug;
                this.showBugsTab = true;
                this.showSurveyTab = false;
                this.showSupportTab = false;
                // Select first input
                try {
                    const firstInput = document.querySelector('ion-modal input');
                    // console.log('firstinput:', firstInput);
                    setTimeout(() => {
                        firstInput.focus();
                    }, 250);
                }
                catch (error) {
                    // console.log('error', error);
                    this.logger.logError(error);
                }
            }
            else if (data.detail.value === 'feedback') {
                this.bugReport.BugReportType = src_app_models_Core_bug_report_type_enum__WEBPACK_IMPORTED_MODULE_3__.BugReportType.Survey;
                this.showSurveyTab = true;
                this.showBugsTab = false;
                this.showSupportTab = false;
            }
            else {
                this.bugReport.BugReportType = src_app_models_Core_bug_report_type_enum__WEBPACK_IMPORTED_MODULE_3__.BugReportType.Support;
                this.showSurveyTab = false;
                this.showBugsTab = false;
                this.showSupportTab = true;
            }
        });
    }
    btnSurveyClick() {
        window.open('https://www.surveymonkey.com/r/JD8K3N5', '_system');
    }
    btnSupportClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            window.open('mailto:hypertaskhelp@gmail.com', '_system');
        });
    }
};
SendFeedbackComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.LoadingController },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_10__.TranslateService },
    { type: src_app_services_bug_report_service__WEBPACK_IMPORTED_MODULE_4__.BugReportService },
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_6__.IUserService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_5__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.Platform }
];
SendFeedbackComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_11__.Component)({
        selector: 'app-send-feedback',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_send_feedback_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_send_feedback_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], SendFeedbackComponent);



/***/ }),

/***/ 78496:
/*!*************************************************************!*\
  !*** ./src/app/components/side-menu/side-menu.component.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SideMenuComponent": () => (/* binding */ SideMenuComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_side_menu_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./side-menu.component.html */ 27919);
/* harmony import */ var _side_menu_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./side-menu.component.scss */ 24720);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/environments/environment */ 18260);
/* harmony import */ var src_app_services_changelog_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/changelog.service */ 34408);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_services_timer_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/services/timer.service */ 47557);
/* harmony import */ var src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/data-sync-server-service */ 26022);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);
/* harmony import */ var src_app_services_data_sync_2_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/data-sync-2.service */ 57783);
/* harmony import */ var src_app_interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/interfaces/i-local-storage-service */ 5295);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/interfaces/i-data-sync-local-service */ 17610);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var _send_feedback_send_feedback_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../send-feedback/send-feedback.component */ 95721);
/* harmony import */ var _note_list_note_list_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../note-list/note-list.component */ 96428);
/* harmony import */ var _task_selection_task_selection_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../task-selection/task-selection.component */ 20848);
/* harmony import */ var _user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../user-settings/user-settings.component */ 18895);
/* harmony import */ var _privacy_privacy_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../privacy/privacy.component */ 80270);
/* harmony import */ var _debug_log_debug_log_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../debug-log/debug-log.component */ 35839);
/* harmony import */ var _group_list_group_list_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../group-list/group-list.component */ 29286);
/* harmony import */ var _terms_terms_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../terms/terms.component */ 32531);


























let SideMenuComponent = class SideMenuComponent {
    constructor(menu, local, loadingController, alertCtrl, logger, 
    //private appVersion: AppVersion,
    platform, 
    //private appUpdate: AppUpdate,
    changeLog, translate, modalController, serverDataSync, localDataSync, userService, timerService, eventService, modalService) {
        this.menu = menu;
        this.local = local;
        this.loadingController = loadingController;
        this.alertCtrl = alertCtrl;
        this.logger = logger;
        this.platform = platform;
        this.changeLog = changeLog;
        this.translate = translate;
        this.modalController = modalController;
        this.serverDataSync = serverDataSync;
        this.localDataSync = localDataSync;
        this.userService = userService;
        this.timerService = timerService;
        this.eventService = eventService;
        this.modalService = modalService;
        this.appVersionText = '';
        this.packageName = '';
        this.versionCode = '';
        this.appName = '';
        this.showCheckForUpdateBtn = false;
        this.showViewChangelogBtn = false;
        this.showDevMode = false;
        this.showRefresh = false;
    }
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            try {
                // console.log('[ SIDE MENU AFTER INIT STARTED ]', new Date().toISOString());
                /*console.log('%%%% LOADING SIDE Menu, WAITING FOR PLATFORM %%%% ' + new Date().toISOString(),
                            JSON.stringify(UserService.currentUser), UserService.currentUserId);*/
                yield this.platform.ready();
                // console.log('%%%% LOADING SIDE Menu, WAITING FOR USER %%%% ' + new Date().toISOString());
                yield this.userService.awaitUserReady(true);
                // console.log('%%%% USER READY Side Menu %%%%', UserService.currentUser, UserService.currentUserId);
                this.showViewChangelogBtn = true;
                /*if (this.platform.is('cordova')) { //TODO : CAPACITOR
                  this.showCheckForUpdateBtn = true;
                  this.appVersionText = await this.appVersion.getVersionNumber();
                  this.versionCode = await this.appVersion.getVersionCode();
                  this.appName = await this.appVersion.getAppName();
                  this.packageName = await this.appVersion.getPackageName();
                }*/
                this.backButtonSubscription = this.platform.backButton.subscribe(() => {
                    this.menu.close();
                });
                //const userId = await this.userService.getCurrentUserId();
                // if (userId === 'Hwnf3hxuFjgIai5QxvyDNdsCZFB2' || userId === 'Ashvg7vzEhOL7gdZDeVBHzbYp4C2') {
                // console.log('DEV MODE ENABLED');
                this.showDevMode = true; // TODO : Deactivate for prod
                // }
                // Show Refresh if user syncs to cloud
                // console.log('ENABLE1');
                if (this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_6__.UserConfig.EnableCloudSyncKey) === true) {
                    this.showRefresh = true;
                }
                // console.log('[ SIDE MENU AFTER INIT ENDED ]', new Date().toISOString());
            }
            catch (error) {
                // console.log('error01', error);
                this.logger.logError(error);
                alert(this.translate.instant('menu.error-version'));
                alert(error);
            }
        });
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    btnCloseMenuClick() {
        this.menu.close();
    }
    btnReloadFromServerClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('RELOADING STARTING');
            // console.log('refresh');
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.reloading-tasks'),
                id: 'reload-server'
            });
            yield loading.present();
            let canReloadDataSynced = yield this.serverDataSync.allDataIsSynced();
            let canReloadTimerOn = !this.timerService.anyTimerOn();
            // console.log('canReloadDataSynced', canReloadDataSynced);
            // console.log('canReloadTimerOn', canReloadTimerOn);
            if (canReloadDataSynced === false) {
                yield loading.dismiss();
                // console.log('refresh2');
                canReloadDataSynced = yield this.showReloadConfirmationDataSyncAlert();
                if (canReloadDataSynced === false) {
                    return;
                }
            }
            if (canReloadTimerOn === false) {
                this.logger.logDebug('STILL TIMERS : ', JSON.stringify(this.timerService.allTimers.filter(p => p.isDone === false &&
                    p.isPaused === false)));
                yield loading.dismiss();
                // console.log('refresh3');
                canReloadTimerOn = yield this.showReloadConfirmationTimerAlert();
                if (canReloadTimerOn === false) {
                    return;
                }
                else {
                    yield loading.present();
                }
            }
            yield this.reloadAllTasks();
            yield loading.dismiss();
            // console.log('RELOADING DONE');
        });
    }
    btnSendDataToServerClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.msg-sending-tasks'),
                id: 'upload-server'
            });
            yield loading.present();
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventService.EventIds.SyncRequired, null));
            yield loading.dismiss();
        });
    }
    btnLogoutClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.msg-logging-out')
            });
            yield loading.present();
            this.logger.logDebug('logoutClick, terminating', new Date().toISOString());
            yield this.local.terminate();
            src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_5__.DataSyncServerService.GetLatestInvalid = true;
            this.logger.logDebug('terminated', new Date().toISOString());
            yield this.userService.logout();
            this.logger.logDebug('logged out', new Date().toISOString());
            location.reload();
        });
    }
    btnShowDebugLogs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showLogsModal(_debug_log_debug_log_component__WEBPACK_IMPORTED_MODULE_19__.DebugLogComponent); //TODO COMPONENT
        });
    }
    btnExitAppClick() {
        const appString = 'app';
        navigator[appString].exitApp();
    }
    btnCheckForUpdateClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.checking-update'),
            });
            const updateUrl = src_environments_environment__WEBPACK_IMPORTED_MODULE_2__.environment.apiUpdateXmlUrl;
            try {
                yield loading.present();
                /*const result = await this.appUpdate.checkAppUpdate(updateUrl); TODO CAPACITOR
                alert(this.translate.instant('menu.update-successful') + ' : ' + result.msg);*/
            }
            catch (error) {
                // console.log('error02');
                this.logger.logError(error);
                alert(this.translate.instant('menu.update-failed'));
                alert(error.msg);
            }
            finally {
                yield loading.dismiss();
            }
        });
    }
    btnChangeLogClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            this.changeLog.showAllChangeLogs();
        });
    }
    btnBugReportClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showFeedbackModal(_send_feedback_send_feedback_component__WEBPACK_IMPORTED_MODULE_14__.SendFeedbackComponent);
        });
    }
    btnNoteClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showNotesModal(_note_list_note_list_component__WEBPACK_IMPORTED_MODULE_15__.NoteListComponent);
        });
    }
    btnSelectNewTasksClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showTaskSelectionModal(_task_selection_task_selection_component__WEBPACK_IMPORTED_MODULE_16__.TaskSelectionComponent);
        });
    }
    btnUserSettingsClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showUserSettingsModal(_user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_17__.UserSettingsComponent);
        });
    }
    btnPrivacyClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showPrivacyModal(_privacy_privacy_component__WEBPACK_IMPORTED_MODULE_18__.PrivacyComponent);
        });
    }
    btnResetLocalDatabase() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.clear-database'),
            });
            yield loading.present();
            yield this.local.clear();
            yield loading.dismiss();
        });
    }
    btnTermsClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showTermsModal(_terms_terms_component__WEBPACK_IMPORTED_MODULE_21__.TermsComponent);
        });
    }
    btnShowUnsyncedData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.msg-loading-unsynced-data')
            });
            yield loading.present();
            const localData = yield this.serverDataSync.getUnsynchronized();
            yield loading.dismiss();
            alert('LOCAL DATA : ' + localData);
            // console.log('LOCAL DATA : ', localData);
            yield loading.present();
            const queueData = yield this.localDataSync.getUnsynchronized();
            yield loading.dismiss();
            // console.log('QUEUE DATA : ', queueData);
            alert('QUEUE DATA : ' + queueData);
        });
    }
    btnResumeClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventService.EventIds.Resume, null));
        });
    }
    btnCalendarClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            /*const modal = await this.modalController.create({
              component: CalendarModeComponent, TODO component
              backdropDismiss: false,
            });
        
            modal.present();
            await modal.onDidDismiss();*/
        });
    }
    emptyStorage() {
        this.local.clear();
    }
    btnTaskGroupsClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showGroupsModal(_group_list_group_list_component__WEBPACK_IMPORTED_MODULE_20__.GroupListComponent);
        });
    }
    btnWalkthroughClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventService.EventIds.Walkthrough, null));
            this.menu.close();
        });
    }
    reloadAllTasks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            console.log("reloading all tasks from server");
            this.logger.logEvent('reloading all tasks from server');
            try {
                yield this.serverDataSync.reloadAllGroupsAndTasksServer(new src_app_services_data_sync_2_service__WEBPACK_IMPORTED_MODULE_9__.CancellationToken());
                this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventService.EventIds.ProgressBar, null));
                this.menu.close();
            }
            catch (error) {
                this.logger.logError(new Error('Unable to reload tasks from server : ' + error.message));
                alert(this.translate.instant('menu.unable-to-reload'));
            }
        });
    }
    showReloadConfirmationDataSyncAlert() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            let resolveFunction;
            const promise = new Promise(resolve => {
                resolveFunction = resolve;
            });
            const alert = yield this.alertCtrl.create({
                message: this.translate.instant('alert.msg-unsynchronised'),
                backdropDismiss: false,
                buttons: [
                    {
                        text: this.translate.instant('alert.lbl-no'),
                        handler: () => resolveFunction(false)
                    },
                    {
                        text: this.translate.instant('alert.lbl-yes'),
                        handler: () => resolveFunction(true)
                    }
                ]
            });
            yield alert.present();
            return promise;
        });
    }
    showReloadConfirmationTimerAlert() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__awaiter)(this, void 0, void 0, function* () {
            let resolveFunction;
            const promise = new Promise(resolve => {
                resolveFunction = resolve;
            });
            const alert = yield this.alertCtrl.create({
                message: this.translate.instant('alert.msg-timers'),
                backdropDismiss: false,
                buttons: [
                    {
                        text: this.translate.instant('alert.lbl-no'),
                        handler: () => resolveFunction(false)
                    },
                    {
                        text: this.translate.instant('alert.lbl-yes'),
                        handler: () => resolveFunction(true)
                    }
                ]
            });
            yield alert.present();
            return promise;
        });
    }
};
SideMenuComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_23__.MenuController },
    { type: src_app_interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_10__.ILocalStorageService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_23__.LoadingController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_23__.AlertController },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_11__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_23__.Platform },
    { type: src_app_services_changelog_service__WEBPACK_IMPORTED_MODULE_3__.ChangelogService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_24__.TranslateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_23__.ModalController },
    { type: src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_5__.DataSyncServerService },
    { type: src_app_interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_12__.IDataSyncLocalService },
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_13__.IUserService },
    { type: src_app_services_timer_service__WEBPACK_IMPORTED_MODULE_4__.TimerService },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_7__.EventService },
    { type: src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_8__.ModalService }
];
SideMenuComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_22__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_25__.Component)({
        selector: 'app-side-menu',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_side_menu_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_side_menu_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], SideMenuComponent);



/***/ }),

/***/ 12525:
/*!*********************************************************************!*\
  !*** ./src/app/components/skips-popover/skips-popover.component.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SkipsPopoverComponent": () => (/* binding */ SkipsPopoverComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_skips_popover_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./skips-popover.component.html */ 11265);
/* harmony import */ var _skips_popover_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./skips-popover.component.scss */ 13805);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/event.service */ 29170);






let SkipsPopoverComponent = class SkipsPopoverComponent {
    constructor(popoverController, eventService) {
        this.popoverController = popoverController;
        this.eventService = eventService;
    }
    ngOnInit() { }
    btnCancelClick() {
        this.popoverController.dismiss();
    }
    btnYesClick() {
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService.EventIds.SkipTask + this.currentTask.CalendarTaskId, null));
        this.popoverController.dismiss();
    }
    btnPostponeClick() {
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService.EventIds.PostponeTask + this.currentTask.CalendarTaskId, null));
        this.popoverController.dismiss();
    }
    btnEnableNotificationsClick() {
        this.popoverController.dismiss();
    }
    btnDeleteClick() {
        // confirmation
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService.EventIds.DeleteTask + this.currentTask.CalendarTaskId, null));
        this.popoverController.dismiss();
    }
};
SkipsPopoverComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__.PopoverController },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService }
];
SkipsPopoverComponent.propDecorators = {
    currentTask: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    viewModel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }],
    daysInARow: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_4__.Input }]
};
SkipsPopoverComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Component)({
        selector: 'app-skips-popover',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_skips_popover_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_skips_popover_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], SkipsPopoverComponent);



/***/ }),

/***/ 20391:
/*!*****************************************************************!*\
  !*** ./src/app/components/task-create/task-create.component.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskCreateComponent": () => (/* binding */ TaskCreateComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_create_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-create.component.html */ 50740);
/* harmony import */ var _task_create_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-create.component.scss */ 97477);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/Core/calendar-task */ 2908);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/models/Core/day-of-week.enum */ 64591);
/* harmony import */ var src_app_pipes_format_dayofweek_pipe__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/pipes/format-dayofweek-pipe */ 99022);
/* harmony import */ var src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/models/Core/task-frequency.enum */ 90616);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/common */ 28267);
/* harmony import */ var src_app_models_Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/models/Exceptions/InvalidCalendarTaskError */ 92623);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/services/alert.service */ 34571);
/* harmony import */ var src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/shared/number-utils */ 26173);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @logisticinfotech/ionic4-datepicker */ 85925);
/* harmony import */ var src_app_services_date_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/services/date.service */ 23516);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var _group_create_group_create_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../group-create/group-create.component */ 40722);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);
























let TaskCreateComponent = class TaskCreateComponent {
    constructor(calendarTaskService, modalController, logger, loadingController, formatDayOfWeekPipe, datepipe, platform, translate, userService, alertService, alertCtrl, dateService, pickerCtrl, eventService, modalService, navCtrl, navParams) {
        this.calendarTaskService = calendarTaskService;
        this.modalController = modalController;
        this.logger = logger;
        this.loadingController = loadingController;
        this.formatDayOfWeekPipe = formatDayOfWeekPipe;
        this.datepipe = datepipe;
        this.platform = platform;
        this.translate = translate;
        this.userService = userService;
        this.alertService = alertService;
        this.alertCtrl = alertCtrl;
        this.dateService = dateService;
        this.pickerCtrl = pickerCtrl;
        this.eventService = eventService;
        this.modalService = modalService;
        this.navCtrl = navCtrl;
        this.navParams = navParams;
        this.hourChoices = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11',
            '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];
        this.selectedPositive = '0';
        this.showSetToTomorrow = true;
        this.preSelectedGroupId = "";
        this.recurringValue = "Recurring";
        this.datePickerObj = {};
        this.resultTypeCaptions = [
            this.translate.instant('create-task.select-binary'),
            this.translate.instant('create-task.select-decimal'),
            this.translate.instant('create-task.select-time-of-day'),
            this.translate.instant('create-task.select-time-duration')
        ];
        this.daysOfWeek = [
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Monday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Tuesday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Wednesday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Thursday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Friday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Saturday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Sunday
        ];
        this.preSelectedGroupId = navParams.get("preSelectedGroupId");
        //console.log('PRESELECTED GROUPID = ' + this.preSelectedGroupId);
    }
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('CREATE ON INIT START', new Date().toISOString());
            this.currentTask = new src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_2__.CalendarTask();
            this.currentTask.RequiredDays = this.daysOfWeek;
            this.recurringSelected = true;
            this.onceSelected = false;
            this.groups = this.calendarTaskService.allGroups.filter(p => p.Void === false);
            yield this.initializeGroup();
            yield this.initializeOtherTasks();
            this.assignedDatePicked = new Date().toISOString();
            this.setShownComponents();
            this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
                yield this.closePopup();
            }));
            const todayDate = this.dateService.GetTodayWorkDate();
            const result = this.datepipe.transform(todayDate, 'yyyy-MM-dd');
            this.currentAssignedDateString = result;
            this.currentTask.AssignedDate = todayDate;
            this.selectedResultTypeCaption = this.resultTypeCaptions[0];
            // console.log('TASK CREATE GROUPS', this.groups);
            this.notificationEnabled = false;
            this.notificationTimeValue = '12:00';
            // console.log('CREATE ON INIT ENDED', new Date().toISOString());
            this.setToLast();
        });
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    ngAfterViewInit() {
        // console.log('CREATE AFTER VIEW INIT', new Date().toISOString());
    }
    btnSaveClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('create-task.saving-new-task'),
            });
            yield loading.present();
            if (this.recurringSelected === true) {
                this.currentTask.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Daily;
            }
            else {
                if (this.onceSelected === true) {
                    this.currentTask.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Once;
                }
                else {
                    this.currentTask.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.UntilDone;
                }
            }
            try {
                this.currentTask.validate(this.translate);
            }
            catch (error) {
                if (error instanceof src_app_models_Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_8__.InvalidCalendarTaskError) {
                    // console.log('error03');
                    this.logger.logError(new Error('invalidcalendartaskerror'), { key: 'error', value: JSON.stringify(error) });
                    alert(error.message);
                    yield loading.dismiss();
                    return;
                }
            }
            // Validation 1
            if (this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Daily) {
                this.currentTask.RequiredDays = [];
            }
            // Validation 2
            if (this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Daily) {
                this.currentTask.AssignedDate = null;
            }
            // Notifications
            // console.log('notification enabled', this.notificationEnabled);
            // console.log('notification id', this.currentTask.NotificationId);
            if (this.notificationEnabled === true &&
                (this.currentTask.NotificationId == null ||
                    Number.isNaN(this.currentTask.NotificationId))) {
                // console.log('SETTING NOTIFICATION ID');
                this.currentTask.NotificationId = Math.max(...this.calendarTaskService.getAllTasks()
                    .filter(p => p.NotificationId < 1000000).map(p => p.NotificationId)) + 1;
                if (Number.isNaN(this.currentTask.NotificationId)) {
                    this.currentTask.NotificationId = 1;
                    if (this.calendarTaskService.getAllTasks().filter(p => p.NotificationId === 1 && p.Void === false).length > 0) {
                        // 1 already exists
                        this.logger.logError(new Error('NotificationId = 1 already exists'));
                    }
                }
                else {
                    this.logger.logDebug('SETTING NOTIFICATION TO ' + this.currentTask.NotificationId);
                }
            }
            // console.log('NOTIFICATIONID=', this.currentTask.NotificationId);
            this.currentTask.InsertDate = new Date();
            this.currentTask.UpdateDate = new Date();
            this.currentTask.UserId = yield this.userService.getCurrentUserId();
            this.currentTask.CalendarTaskId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_11__["default"].getRandomId(); // we need it in case we void it before syncing
            this.currentTask.GroupId = this.selectedGroup.GroupId;
            try {
                const result = yield this.calendarTaskService.insertCalendarTask(this.currentTask);
                yield loading.dismiss();
                if (result === true) {
                    yield this.modalController.dismiss(true, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_17__.ModalService.ModalIds.CreateTask);
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.NotificationSyncedFalse, null));
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService.EventIds.ProgressBar, true));
                }
                else {
                    this.logger.logError(new Error('Unable to create new task, result is false'));
                    alert(this.translate.instant('create-task.saving-error'));
                }
                return;
            }
            catch (error) {
                yield loading.dismiss();
                this.logger.logError(new Error('Unable to create new task : ' + error.message));
                alert(this.translate.instant('create-task.saving-error'));
                return;
            }
        });
    }
    cbDayOfWeek(event, dayOfWeek) {
        if (event.detail.checked) {
            this.currentTask.RequiredDays.push(dayOfWeek);
        }
        else {
            this.currentTask.RequiredDays = this.currentTask.RequiredDays.filter(p => p.valueOf() !== dayOfWeek);
        }
    }
    absolutePositionChange(absolutePosition) {
        this.currentTask.AbsolutePosition = absolutePosition + 1;
    }
    setToFirst() {
        this.currentTask.AbsolutePosition = 1;
        this.selectedAfterTask = null;
    }
    setToLast() {
        if (this.otherTasks.length == 0) {
            this.currentTask.AbsolutePosition = 1;
            this.selectedAfterTask = null;
        }
        else {
            const max = this.otherTasks.reduce((oa, u) => Math.max(oa, u.AbsolutePosition), 0);
            this.selectedAfterTask = this.otherTasks.filter((oa, u) => oa.AbsolutePosition == max, 0)[0];
            this.currentTask.AbsolutePosition = max + 1;
        }
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_17__.ModalService.ModalIds.CreateTask);
        });
    }
    btnAssignedDateClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            const data = yield this.modalService.showAssignedDateModal(_logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_19__.Ionic4DatepickerModalComponent, this.datePickerObj, this.currentTask);
            if (data != null) {
                const selectedDate = new Date(data.data.date);
                if (!src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_7__["default"].isValidDate(selectedDate)) { // standard cancel
                    return;
                }
                this.currentAssignedDateString = this.datepipe.transform(selectedDate, 'yyyy-MM-dd');
                this.currentTask.AssignedDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_7__["default"].RemoveHours(selectedDate);
            }
        });
    }
    btnSetToTomorrow() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            this.currentTask.AssignedDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_7__["default"].AddDays(this.dateService.GetTodayWorkDate(), 1);
            this.currentAssignedDateString = this.datepipe.transform(this.currentTask.AssignedDate, 'yyyy-MM-dd');
            this.showSetToTomorrow = false;
        });
    }
    selectResultType() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            const handlerOk = (alertData) => {
                for (let i = 0; i < 4; i++) {
                    if (this.resultTypeCaptions[i] === alertData) {
                        this.currentTask.ResultType = i;
                        this.selectedResultTypeCaption = this.resultTypeCaptions[i];
                        break;
                    }
                }
            };
            const handlerCancel = (alertData) => {
                return;
            };
            // TODO: Implement a default result type
            /*const handlerSetAsDefault: (alertData: any) => void = (alertData) => {
              this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
              this.selectedAfterTask = null;
        
              console.log('SETTING AS DEFAULT', this.selectedGroup);
        
              if (this.recurringSelected) {
                this.userService.setDefaultRecurringGroupId(this.selectedGroup.GroupId);
              } else {
                this.userService.setDefaultNonRecurringGroupId(this.selectedGroup.GroupId);
              }
        
              // this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
            };*/
            const alertOptions = this.alertService.getChangeResultTypeOptions(handlerOk, handlerCancel, 
            // handlerSetAsDefault,
            this.resultTypeCaptions, this.selectedResultTypeCaption);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    btnNotificationEnterTimeClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            const picker = yield this.pickerCtrl.create({
                columns: this.getNotificationColumns(),
                cssClass: 'time-picker',
                animated: false,
                buttons: [
                    {
                        text: this.translate.instant('alert.lbl-cancel'),
                        role: 'cancel'
                    },
                    {
                        text: this.translate.instant('alert.lbl-ok'),
                        handler: (value) => {
                            const hourString = Number(value.Hours.value) > 9 ?
                                value.Hours.value :
                                '0' + value.Hours.value;
                            const minutesString = Number(value.Minutes.value) > 9 ?
                                value.Minutes.value :
                                '0' + value.Minutes.value;
                            this.notificationTimeValue = hourString + ':' + minutesString;
                            this.currentTask.NotificationTime = this.notificationTimeValue;
                            if (this.currentTask.NotificationId == null) {
                                this.currentTask.NotificationId = Math.max(...this.calendarTaskService.getAllTasks().map(p => p.NotificationId)) + 1;
                            }
                        }
                    }
                ]
            });
            yield picker.present();
            this.setBackButtonPicker(picker);
            yield picker.onDidDismiss();
            this.resetBackButton();
        });
    }
    getNotificationColumns() {
        const currentHour = Number(this.notificationTimeValue.substring(0, 2));
        // console.log('CURRENT HOUR', currentHour);
        // const currentMinutes = Number(currentSelection.substring(3, 3 + 2));
        const HourIndex = this.hourChoices.findIndex(p => Number(p) === currentHour);
        // console.log('CURRENT HourIndex', HourIndex, this.hourChoices);
        const MinuteIndex = 0;
        const columns = [];
        columns.push({
            name: 'Hours',
            selectedIndex: HourIndex,
            options: this.getColumnOptions1(),
        });
        columns.push({
            name: 'Minutes',
            selectedIndex: MinuteIndex,
            options: this.getColumnOptions2()
        });
        // console.log('columns');
        return columns;
    }
    getColumnOptions1() {
        const options = [];
        for (const hourValue of this.hourChoices) {
            options.push({
                text: hourValue,
                value: Number(hourValue)
            });
        }
        return options;
    }
    getColumnOptions2() {
        const options = [];
        for (const minuteValue of src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__.UserConfig.getMinutesValues()) {
            options.push({
                text: minuteValue,
                value: Number(minuteValue)
            });
        }
        return options;
    }
    recurringChanged(event, isOnce) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            if (event != null && event.detail.value == '') {
                return;
            }
            console.log('recurringChanged isOnce', event, isOnce);
            if ((event != null && event.detail.value === 'Once') || isOnce === true) {
                console.log('recurringChanged isOnce true');
                this.showAssignedDate = true;
                this.showReccuringFrequency = false;
                this.showRequiredDays = false;
                this.showSingleDay = true;
                this.recurringSelected = false;
                // Get default group
                const defaultGroupId = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__.UserConfig.DefaultNonRecurringGroupId);
                const defaultAfterTaskName = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__.UserConfig.DefaultNonRecurringAfterTaskNameKey);
                yield this.changeToDefaultGroup(defaultGroupId, defaultAfterTaskName);
                this.recurringSelected = this.selectedGroup.RecurringDefault !== false;
                //this.onceSelected = this.selectedGroup.RecurringDefault === false;
            }
            else {
                console.log('recurring false value : ', this.recurringValue, isOnce);
                this.showAssignedDate = false;
                this.showReccuringFrequency = true;
                this.showRequiredDays = true;
                this.showSingleDay = false;
                this.recurringSelected = true;
                const defaultGroupId = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__.UserConfig.DefaultRecurringGroupId);
                const defaultAfterTaskName = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__.UserConfig.DefaultRecurringAfterTaskNameKey);
                yield this.changeToDefaultGroup(defaultGroupId, defaultAfterTaskName);
                this.recurringSelected = this.selectedGroup.RecurringDefault !== false;
                //this.onceSelected = this.selectedGroup.RecurringDefault === false;
            }
        });
    }
    changeToDefaultGroup(defaultGroupId, defaultAfterTaskName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            // PRESELECTED GROUP
            if (this.preSelectedGroupId != "") {
                this.selectedGroup = this.calendarTaskService.getGroup(this.preSelectedGroupId);
                this.currentTask.GroupId = this.selectedGroup.GroupId;
            }
            else {
                // DEFAULT GROUP
                if (defaultGroupId != null) {
                    // console.log('found a default group id');
                    this.selectedGroup = this.calendarTaskService.getGroup(defaultGroupId);
                    this.currentTask.GroupId = this.selectedGroup.GroupId;
                }
                yield this.refreshOtherTasks();
                // Get default position
                if (this.selectedGroup != null && defaultAfterTaskName != null &&
                    this.otherTasks.some(p => p.Name === defaultAfterTaskName &&
                        p.GroupId === this.selectedGroup.GroupId)) {
                    // tslint:disable-next-line:max-line-length
                    this.selectedAfterTask = this.otherTasks.filter(p => p.Name === defaultAfterTaskName)[0];
                    this.currentTask.AbsolutePosition = this.selectedAfterTask.AbsolutePosition + 1;
                }
                else {
                    this.selectedAfterTask = null;
                    this.currentTask.AbsolutePosition = 1;
                }
            }
        });
    }
    singleDateChanged(event) {
        if (event.detail.value === 'ChosenDayOnly') {
            this.onceSelected = true;
        }
        else {
            this.onceSelected = false;
        }
    }
    setShownComponents() {
        console.log('setShownComponents', this.currentTask.Frequency);
        this.showRequiredDays = this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Daily;
        this.showAssignedDate = this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Daily;
        this.showSingleDay = this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Daily;
        ;
    }
    selectPosition() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            const handlerOk = (alertData) => {
                this.selectedAfterTask = this.otherTasks.filter(p => p.Name === alertData)[0];
                if (this.selectedAfterTask != null) {
                    this.absolutePositionChange(this.selectedAfterTask.AbsolutePosition);
                }
                else {
                    this.absolutePositionChange(0);
                }
            };
            const handlerCancel = (alertData) => {
                return;
            };
            const handlerSetAsDefault = (alertData) => {
                // console.log('SETTING AS DEFAULT', alertData);
                if (this.recurringSelected) {
                    this.userService.setDefaultRecurringPositionName(alertData);
                }
                else {
                    this.userService.setDefaultNonRecurringPositionName(alertData);
                }
                this.selectedAfterTask = this.otherTasks.filter(p => p.Name === alertData)[0];
                if (this.selectedAfterTask != null) {
                    this.absolutePositionChange(this.selectedAfterTask.AbsolutePosition);
                }
                else {
                    this.absolutePositionChange(0);
                }
            };
            const handlerSetAsFirst = (alertData) => {
                this.setToFirst();
            };
            const handlerSetAsLast = (alertData) => {
                this.setToLast();
            };
            const afterTaskName = this.selectedAfterTask != null ?
                this.selectedAfterTask.Name :
                '';
            const alertOptions = this.alertService.getChangePositionAlertOptions(handlerOk, handlerCancel, handlerSetAsDefault, handlerSetAsFirst, handlerSetAsLast, this.otherTasks.map(p => p.Name), afterTaskName);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    selectGroup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            const handlerOk = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
                this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
                this.selectedAfterTask = null;
                this.currentTask.GroupId = this.selectedGroup.GroupId;
                yield this.refreshOtherTasks();
                // console.log('SETTING', this.selectedGroup);
            });
            const handlerNew = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
                const result = yield this.modalService.showCreateGroupModal(_group_create_group_create_component__WEBPACK_IMPORTED_MODULE_15__.GroupCreateComponent);
                if (result === true) {
                    this.groups = this.calendarTaskService.allGroups.filter(p => p.Void === false);
                    // select last created group
                    this.selectedGroup = this.groups.filter(p => p.Void !== true && p.InsertDate != null)
                        .sort((a, b) => {
                        return b.InsertDate.getTime() - a.InsertDate.getTime();
                    })[0];
                    this.currentTask.GroupId = this.selectedGroup.GroupId;
                    this.selectedAfterTask = null;
                    yield this.refreshOtherTasks();
                }
            });
            const handlerCancel = (alertData) => {
                return;
            };
            const handlerSetAsDefault = (alertData) => {
                this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
                this.selectedAfterTask = null;
                // console.log('SETTING AS DEFAULT', this.selectedGroup);
                if (this.recurringSelected) {
                    this.userService.setDefaultRecurringGroupId(this.selectedGroup.GroupId);
                }
                else {
                    this.userService.setDefaultNonRecurringGroupId(this.selectedGroup.GroupId);
                }
                // this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
            };
            const currentGroupName = this.selectedGroup != null ?
                this.selectedGroup.Name :
                '';
            const alertOptions = this.alertService.getChangeDefaultGroupAlertOptions(handlerOk, handlerCancel, handlerSetAsDefault, handlerNew, this.groups.map(p => p.Name), currentGroupName);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    setBackButtonAlert(alert) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            yield alert.dismiss();
        }));
    }
    setBackButtonPicker(picker) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            yield picker.dismiss();
        }));
    }
    resetBackButton() {
        if (this.backButtonSubscription != null) {
            this.backButtonSubscription.unsubscribe();
        }
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
    initializeGroup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            // PRESELECTED GROUP
            if (this.preSelectedGroupId != "") {
                this.selectedGroup = this.calendarTaskService.getGroup(this.preSelectedGroupId);
                this.currentTask.GroupId = this.selectedGroup.GroupId;
                console.log('ReccuringDefault : ', this.selectedGroup.RecurringDefault);
                this.recurringValue = this.selectedGroup.RecurringDefault === false ? 'Once' : 'Recurring';
                this.currentTask.Frequency = this.selectedGroup.RecurringDefault === false ? src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Once : src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Daily;
                console.log('Sending isone value :', this.selectedGroup.RecurringDefault === false, this.selectedGroup.RecurringDefault);
                this.recurringChanged(null, this.selectedGroup.RecurringDefault === false);
            }
            else {
                // Set groupId to default, should only be done when init
                if (this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__.UserConfig.DefaultRecurringGroupId) != null) {
                    // console.log('found a default group id');
                    // tslint:disable-next-line:max-line-length
                    this.selectedGroup = this.calendarTaskService.getGroup(this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__.UserConfig.DefaultRecurringGroupId));
                    this.currentTask.GroupId = this.selectedGroup.GroupId;
                }
                else { // this should not happen but we need to handle that case
                    this.logger.logError(new Error('No default group found'));
                    this.selectedGroup = this.groups[0];
                }
            }
            yield this.refreshOtherTasks();
        });
    }
    initializeOtherTasks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            const defaultAfterTaskName = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_14__.UserConfig.DefaultRecurringAfterTaskNameKey);
            // Set groupId to default, should only be done when init
            if (this.selectedGroup != null && defaultAfterTaskName != null &&
                this.otherTasks.some(p => p.Name === defaultAfterTaskName)) {
                this.selectedAfterTask = this.otherTasks.filter(p => p.Name === defaultAfterTaskName)[0];
            }
            else {
                // console.log('did not find a defaulaftername', this.otherTasks);
                this.selectedAfterTask = null;
            }
            if (this.otherTasks.length === 0 || this.selectedAfterTask == null) {
                this.currentTask.AbsolutePosition = 1;
            }
            else {
                this.currentTask.AbsolutePosition = this.selectedAfterTask.AbsolutePosition + 1;
            }
        });
    }
    refreshOtherTasks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__awaiter)(this, void 0, void 0, function* () {
            this.otherTasks = this.calendarTaskService.getAllPresentTasks()
                .filter(p => p.CalendarTaskId !== this.currentTask.CalendarTaskId &&
                p.GroupId === this.currentTask.GroupId &&
                !p.Void);
            // console.log('did not find a defaultaftername');
            this.selectedAfterTask = null;
            this.currentTask.AbsolutePosition = 1;
        });
    }
};
TaskCreateComponent.ctorParameters = () => [
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__.CalendarTaskService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_20__.ModalController },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_9__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_20__.LoadingController },
    { type: src_app_pipes_format_dayofweek_pipe__WEBPACK_IMPORTED_MODULE_5__.FormatDayOfWeekPipe },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_21__.DatePipe },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_20__.Platform },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_22__.TranslateService },
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_12__.IUserService },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_10__.AlertService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_20__.AlertController },
    { type: src_app_services_date_service__WEBPACK_IMPORTED_MODULE_13__.DateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_20__.PickerController },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_16__.EventService },
    { type: src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_17__.ModalService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_20__.NavController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_20__.NavParams }
];
TaskCreateComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_18__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_23__.Component)({
        selector: 'app-task-create',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_create_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_create_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskCreateComponent);



/***/ }),

/***/ 88293:
/*!*************************************************************!*\
  !*** ./src/app/components/task-edit/task-edit.component.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskEditComponent": () => (/* binding */ TaskEditComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_edit_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-edit.component.html */ 46251);
/* harmony import */ var _task_edit_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-edit.component.scss */ 7877);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/Core/calendar-task */ 2908);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/models/Core/day-of-week.enum */ 64591);
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/alert.service */ 34571);
/* harmony import */ var src_app_pipes_format_dayofweek_abbr_pipe__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/pipes/format-dayofweek-abbr-pipe */ 31980);
/* harmony import */ var src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/models/Core/task-frequency.enum */ 90616);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @angular/common */ 28267);
/* harmony import */ var src_app_models_Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/models/Exceptions/InvalidCalendarTaskError */ 92623);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @logisticinfotech/ionic4-datepicker */ 85925);
/* harmony import */ var src_app_services_date_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/services/date.service */ 23516);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var _group_create_group_create_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../group-create/group-create.component */ 40722);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);





















//import { NotificationService } from 'src/app/services/notification.service';


let TaskEditComponent = class TaskEditComponent {
    constructor(calendarTaskService, modalController, alertCtrl, logger, loadingController, formatDayOfWeekAbbrPipe, alertService, datepipe, translate, platform, userService, dateService, eventService, pickerCtrl, 
    //private notificationService: NotificationService,
    modalService) {
        this.calendarTaskService = calendarTaskService;
        this.modalController = modalController;
        this.alertCtrl = alertCtrl;
        this.logger = logger;
        this.loadingController = loadingController;
        this.formatDayOfWeekAbbrPipe = formatDayOfWeekAbbrPipe;
        this.alertService = alertService;
        this.datepipe = datepipe;
        this.translate = translate;
        this.platform = platform;
        this.userService = userService;
        this.dateService = dateService;
        this.eventService = eventService;
        this.pickerCtrl = pickerCtrl;
        this.modalService = modalService;
        this.hourChoices = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11',
            '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];
        this.ChosenDayOnlyValue = 'ChosenDayOnly';
        this.UntilDoneValue = 'UntilDone';
        this.selectedFrequency = '0';
        this.selectedResultType = '0';
        this.selectedPositive = '0';
        this.datePickerObj = {};
        this.isInitialized = false;
        this.resultTypeCaptions = [
            this.translate.instant('create-task.select-binary'),
            this.translate.instant('create-task.select-decimal'),
            this.translate.instant('create-task.select-time-of-day'),
            this.translate.instant('create-task.select-time-duration')
        ];
        this.daysOfWeek = [
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Monday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Tuesday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Wednesday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Thursday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Friday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Saturday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_4__.DayOfWeek.Sunday
        ];
    }
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            this.recurringValue = this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Once ||
                this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.UntilDone ? 'Once' : 'Recurring';
            this.selectedFrequency = String(Number(this.currentTask.Frequency));
            this.selectedResultType = String(Number(this.currentTask.ResultType));
            this.groups = this.calendarTaskService.allGroups.filter(p => p.Void === false);
            yield this.initializeGroup();
            yield this.refreshOtherTasks();
            this.setAfterTask();
            if (this.currentTask.AssignedDate == null) {
                this.assignedDatePicked = new Date().toISOString();
            }
            else {
                this.assignedDatePicked = new Date(this.currentTask.AssignedDate).toISOString();
            }
            if (this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Daily) {
                this.recurringSelected = true;
                this.onceSelected = false;
                this.showSingleDay = false;
            }
            else {
                if (this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Once) {
                    this.onceSelected = true;
                    this.recurringSelected = false;
                    this.showSingleDay = true;
                }
                else {
                    this.onceSelected = false;
                    this.recurringSelected = false;
                    this.showSingleDay = true;
                }
            }
            this.setShownComponents();
            this.resetBackButton();
            // console.log('ASSIGNED_DATE = ', this.currentTask.AssignedDate);
            const result = this.datepipe.transform(this.currentTask.AssignedDate, 'yyyy-MM-dd');
            this.currentAssignedDateString = result;
            this.initialTask = Object.assign({}, this.currentTask);
            if (this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Once) {
                this.untilDoneCurrentValue = this.ChosenDayOnlyValue;
            }
            else if (this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.UntilDone) {
                this.untilDoneCurrentValue = this.UntilDoneValue;
            }
            this.selectedResultTypeCaption = this.resultTypeCaptions[this.currentTask.ResultType];
            // console.log('TASK CREATE GROUPS', this.groups);
            // TODO : Might need to put this into afterViewInit
            if (this.currentTask.NotificationId != null) {
                this.notificationEnabled = true;
                if (this.currentTask.NotificationTime != null) {
                    this.notificationTimeValue = this.currentTask.NotificationTime;
                }
                else {
                    this.notificationTimeValue = '12:00';
                }
            }
            else {
                this.notificationEnabled = false;
                this.notificationTimeValue = '12:00';
            }
            this.isInitialized = true;
        });
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    btnSaveClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            if (this.recurringSelected) {
                this.currentTask.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Daily;
            }
            else {
                if (this.onceSelected) {
                    this.currentTask.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Once;
                }
                else {
                    this.currentTask.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.UntilDone;
                }
            }
            this.currentTask.GroupId = this.selectedGroup.GroupId;
            try {
                this.currentTask.validate(this.translate);
            }
            catch (error) {
                if (error instanceof src_app_models_Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_9__.InvalidCalendarTaskError) {
                    // console.log('invalidcalendartaskerror', error);
                    alert(error.message);
                    return;
                }
            }
            // Validation 1
            if (this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Daily) { // TODO : this will cause a bug if the task can't be created
                this.currentTask.RequiredDays = [];
            }
            // Validation 2
            if (this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Daily) { // TODO : this will cause a bug if the task can't be created
                this.currentTask.AssignedDate = null;
            }
            // Notifications
            // console.log('notification enabled', this.notificationEnabled);
            // console.log('notification id', this.currentTask.NotificationId);
            if (this.notificationEnabled === true &&
                (this.currentTask.NotificationId == null ||
                    Number.isNaN(this.currentTask.NotificationId))) {
                this.logger.logDebug('SETTING NOTIFICATION ID');
                this.currentTask.NotificationId = Math.max(...this.calendarTaskService.getAllTasks()
                    .filter(p => p.NotificationId < 1000000).map(p => p.NotificationId)) + 1;
                if (Number.isNaN(this.currentTask.NotificationId)) {
                    this.logger.logDebug('IS NAN, SETTING NOTIFICATION ID TO 1');
                    this.currentTask.NotificationId = 1;
                    if (this.calendarTaskService.getAllTasks().filter(p => p.NotificationId === 1 && p.Void === false).length > 0) {
                        // 1 already exists
                        this.logger.logError(new Error('NotificationId = 1 already exists'));
                    }
                }
                else {
                    this.logger.logDebug('SETTING NOTIFICATION TO ' + this.currentTask.NotificationId);
                }
            }
            this.logger.logDebug('NOTIFICATIONID=', String(this.currentTask.NotificationId));
            if (this.notificationEnabled === false && this.currentTask.NotificationId != null) {
                // console.log('CANCELLING ALL NOTIFICATIONS');
                //await this.notificationService.cancelAllNotification(this.currentTask.NotificationId); TODO CAPACITOR
                this.currentTask.NotificationId = null;
                this.currentTask.NotificationTime = null;
            }
            const loading = yield this.loadingController.create({
                message: this.translate.instant('edit-task.msg-saving-task'),
            });
            loading.present();
            this.currentTask.UserId = yield this.userService.getCurrentUserId();
            this.currentTask.UpdateDate = new Date();
            try {
                const result = yield this.calendarTaskService.updateCalendarTask(this.currentTask);
                loading.dismiss();
                if (result === true) {
                    // this.currentTask.reorderTasks(this.orderChanged, this.allOtherTasks);
                    yield this.modalController.dismiss(true, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_16__.ModalService.ModalIds.EditTask);
                    this.initialTask = null;
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.CardReset + this.currentTask.CalendarTaskId, true));
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.ProgressBar, true));
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.NotificationSyncedFalse, null));
                }
                else {
                    this.logger.logError(new Error('Unable to save task, result is false'));
                    alert(this.translate.instant('edit-task.msg-saving-task-error'));
                }
            }
            catch (error) {
                loading.dismiss();
                this.logger.logError(new Error('Unable to save task : ' + error.message));
                alert('Unable to save task');
                return;
            }
        });
    }
    btnAssignedDateClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            const datePickerModal = yield this.modalController.create({
                component: _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_18__.Ionic4DatepickerModalComponent,
                cssClass: 'li-ionic4-datePicker',
                componentProps: {
                    objConfig: this.datePickerObj,
                    selectedDate: this.dateService.GetTodayWorkDate()
                }
            });
            yield datePickerModal.present();
            this.setBackButtonModal(datePickerModal);
            const data = yield datePickerModal.onDidDismiss();
            this.resetBackButton();
            const selectedDate = new Date(data.data.date);
            if (!src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_8__["default"].isValidDate(selectedDate)) { // standard cancel
                return;
            }
            this.currentAssignedDateString = this.datepipe.transform(selectedDate, 'yyyy-MM-dd');
            this.currentTask.AssignedDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_8__["default"].RemoveHours(selectedDate);
        });
    }
    cbDayOfWeek(event, dayOfWeek) {
        if (event.detail.checked) {
            this.currentTask.RequiredDays.push(dayOfWeek);
        }
        else {
            this.currentTask.RequiredDays = this.currentTask.RequiredDays.filter(p => p.valueOf() !== dayOfWeek);
        }
    }
    getCbDayOfWeekValue(day) {
        // TODO: this gets called 7*7 times instead of 7 times
        if (this.currentTask.RequiredDays.some(p => p === day)) {
            return true;
        }
        else {
            return false;
        }
    }
    btnDeleteClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => {
                this.deleteTask();
            };
            const alertOptions = this.alertService.getDeleteTaskAlertOptions(handler);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    selectResultType() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            const handlerOk = (alertData) => {
                for (let i = 0; i < 4; i++) {
                    if (this.resultTypeCaptions[i] === alertData) {
                        this.currentTask.ResultType = i;
                        this.selectedResultTypeCaption = this.resultTypeCaptions[i];
                        break;
                    }
                }
            };
            const handlerCancel = (alertData) => {
                return;
            };
            // TODO: Implement a default result type
            /*const handlerSetAsDefault: (alertData: any) => void = (alertData) => {
              this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
              this.selectedAfterTask = null;
        
              console.log('SETTING AS DEFAULT', this.selectedGroup);
        
              if (this.recurringSelected) {
                this.userService.setDefaultRecurringGroupId(this.selectedGroup.GroupId);
              } else {
                this.userService.setDefaultNonRecurringGroupId(this.selectedGroup.GroupId);
              }
        
              // this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
            };*/
            const alertOptions = this.alertService.getChangeResultTypeOptions(handlerOk, handlerCancel, 
            // handlerSetAsDefault,
            this.resultTypeCaptions, this.selectedResultTypeCaption);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    deleteTask() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            this.currentTask.Void = true;
            this.currentTask.UserId = yield this.userService.getCurrentUserId();
            const result = yield this.calendarTaskService.updateCalendarTask(this.currentTask);
            try {
                if (result === true) {
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.CardReset + this.currentTask.CalendarTaskId, true));
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.ProgressBar, true));
                    yield this.modalController.dismiss(true, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_16__.ModalService.ModalIds.EditTask);
                }
                else {
                    this.logger.logError(new Error('Unable to delete this task, result is false'));
                }
                return;
            }
            catch (error) {
                this.logger.logError(new Error('Unable to delete this task : ' + error.message));
                alert('Unable to delete task');
                return;
            }
        });
    }
    setToFirst() {
        this.currentTask.AbsolutePosition = 1;
        this.selectedAfterTask = null;
    }
    setToLast() {
        if (this.otherTasks.length == 0) {
            this.currentTask.AbsolutePosition = 1;
            this.selectedAfterTask = null;
        }
        else {
            const max = this.otherTasks.reduce((oa, u) => Math.max(oa, u.AbsolutePosition), 0);
            this.selectedAfterTask = this.otherTasks.filter((oa, u) => oa.AbsolutePosition == max, 0)[0];
            this.currentTask.AbsolutePosition = max + 1;
        }
    }
    absolutePositionChange(absolutePosition) {
        this.currentTask.AbsolutePosition = absolutePosition + 1;
    }
    recurringChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            if (this.isInitialized === false) {
                return;
            }
            // console.log('recurring changed', event);
            if (event.detail.value === 'Once') {
                this.showAssignedDate = true;
                this.showRequiredDays = false;
                this.showSingleDay = true;
                this.recurringSelected = false;
                if (this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Once &&
                    this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.UntilDone) {
                    this.untilDoneCurrentValue = this.UntilDoneValue;
                    this.currentAssignedDateString = this.datepipe.transform(new Date(), 'yyyy-MM-dd');
                    this.currentTask.AssignedDate = this.dateService.GetTodayWorkDate();
                }
                // Ask if we want to change to the default group
                const defaultGroupId = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.DefaultNonRecurringGroupId);
                const defaultAfterTaskName = defaultGroupId == null ?
                    null :
                    this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.DefaultNonRecurringAfterTaskNameKey);
                yield this.changeDefaultGroup(defaultGroupId, defaultAfterTaskName);
            }
            else {
                this.showAssignedDate = false;
                this.showRequiredDays = true;
                this.showSingleDay = false;
                this.recurringSelected = true;
                // Ask if we want to change to the default group
                const defaultGroupId = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.DefaultRecurringGroupId);
                const defaultAfterTaskName = defaultGroupId == null ?
                    null :
                    this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.DefaultRecurringAfterTaskNameKey);
                yield this.changeDefaultGroup(defaultGroupId, defaultAfterTaskName);
                // Reset Assigned Date if it was null
                if (this.initialTask.AssignedDate == null) {
                    this.currentTask.AssignedDate = null;
                }
            }
        });
    }
    changeDefaultGroup(defaultGroupId, defaultAfterTaskName) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            if (defaultGroupId != null &&
                this.selectedGroup != null &&
                defaultGroupId !== this.selectedGroup.GroupId) {
                const defaultGroup = this.calendarTaskService.getGroup(defaultGroupId);
                const handler = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
                    this.selectedGroup = defaultGroup;
                    this.currentTask.GroupId = this.selectedGroup.GroupId;
                    yield this.refreshOtherTasks();
                    // Get default position
                    if (this.selectedGroup != null && defaultAfterTaskName != null &&
                        this.otherTasks.some(p => p.Name === defaultAfterTaskName &&
                            p.GroupId === this.selectedGroup.GroupId)) {
                        // tslint:disable-next-line:max-line-length
                        this.selectedAfterTask = this.otherTasks.filter(p => p.Name === defaultAfterTaskName)[0];
                        this.currentTask.AbsolutePosition = this.selectedAfterTask.AbsolutePosition + 1;
                    }
                    else {
                        this.selectedAfterTask = null;
                        this.currentTask.AbsolutePosition = 1;
                    }
                });
                const defaultGroupName = defaultGroup.Name;
                const alertOptions = this.alertService.getConfirmChangeGroupAlertOptions(handler, defaultGroupName);
                const alert = yield this.alertCtrl.create(alertOptions);
                yield alert.present();
            }
        });
    }
    singleDateChanged(event) {
        if (event.detail.value === 'ChosenDayOnly') {
            this.onceSelected = true;
        }
        else {
            this.onceSelected = false;
        }
    }
    btnNotificationEnterTimeClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            const picker = yield this.pickerCtrl.create({
                columns: this.getNotificationColumns(),
                cssClass: 'time-picker',
                animated: false,
                buttons: [
                    {
                        text: this.translate.instant('alert.lbl-cancel'),
                        role: 'cancel'
                    },
                    {
                        text: this.translate.instant('alert.lbl-ok'),
                        handler: (value) => {
                            const hourString = Number(value.Hours.value) > 9 ?
                                value.Hours.value :
                                '0' + value.Hours.value;
                            const minutesString = Number(value.Minutes.value) > 9 ?
                                value.Minutes.value :
                                '0' + value.Minutes.value;
                            this.notificationTimeValue = hourString + ':' + minutesString;
                            this.currentTask.NotificationTime = this.notificationTimeValue;
                            if (this.currentTask.NotificationId == null) {
                                this.currentTask.NotificationId = Math.max(...this.calendarTaskService.getAllTasks()
                                    .filter(p => p.NotificationId < 1000000).map(p => p.NotificationId)) + 1;
                            }
                        }
                    }
                ]
            });
            yield picker.present();
            this.setBackButtonPicker(picker);
            yield picker.onDidDismiss();
            this.resetBackButton();
        });
    }
    getNotificationColumns() {
        const currentHour = Number(this.notificationTimeValue.substring(0, 2));
        // console.log('CURRENT HOUR', currentHour);
        // const currentMinutes = Number(currentSelection.substring(3, 3 + 2));
        const HourIndex = this.hourChoices.findIndex(p => Number(p) === currentHour);
        // console.log('CURRENT HourIndex', HourIndex, this.hourChoices);
        const MinuteIndex = 0;
        const columns = [];
        columns.push({
            name: 'Hours',
            selectedIndex: HourIndex,
            options: this.getColumnOptions1(),
        });
        columns.push({
            name: 'Minutes',
            selectedIndex: MinuteIndex,
            options: this.getColumnOptions2()
        });
        // console.log('columns');
        return columns;
    }
    getColumnOptions1() {
        const options = [];
        for (const hourValue of this.hourChoices) {
            options.push({
                text: hourValue,
                value: Number(hourValue)
            });
        }
        return options;
    }
    getColumnOptions2() {
        const options = [];
        for (const minuteValue of src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.getMinutesValues()) {
            options.push({
                text: minuteValue,
                value: Number(minuteValue)
            });
        }
        return options;
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            const anyChanged = !src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_2__.CalendarTask.equals(this.initialTask, this.currentTask);
            if (anyChanged === true) {
                const handlerYes = () => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
                    this.btnSaveClick();
                    yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_16__.ModalService.ModalIds.EditTask);
                });
                const handlerNo = () => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
                    yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_16__.ModalService.ModalIds.EditTask);
                });
                const alertOptions = this.alertService.getCloseTaskEditPopupAlertOptions(handlerYes, handlerNo);
                const alert = yield this.alertCtrl.create(alertOptions);
                yield alert.present();
            }
            else {
                yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_16__.ModalService.ModalIds.EditTask);
            }
        });
    }
    setShownComponents() {
        this.showRequiredDays = this.currentTask.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Daily;
        this.showAssignedDate = this.currentTask.Frequency !== src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_7__.TaskFrequency.Daily;
    }
    selectGroup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            const handlerOk = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
                this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
                this.selectedAfterTask = null;
                this.currentTask.GroupId = this.selectedGroup.GroupId;
                yield this.refreshOtherTasks();
                // console.log('SETTING', this.selectedGroup);
            });
            const handlerCancel = (alertData) => {
                return;
            };
            const handlerSetAsDefault = (alertData) => {
                this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
                this.selectedAfterTask = null;
                // console.log('SETTING AS DEFAULT', this.selectedGroup);
                if (this.recurringSelected) {
                    this.userService.setDefaultRecurringGroupId(this.selectedGroup.GroupId);
                }
                else {
                    this.userService.setDefaultNonRecurringGroupId(this.selectedGroup.GroupId);
                }
                // this.selectedGroup = this.groups.filter(p => p.Name === alertData)[0];
            };
            const handlerNew = (alertData) => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
                const result = yield this.modalService.showCreateGroupModal(_group_create_group_create_component__WEBPACK_IMPORTED_MODULE_15__.GroupCreateComponent);
                if (result === true) {
                    this.groups = this.calendarTaskService.allGroups.filter(p => p.Void === false);
                    // select last created group
                    this.selectedGroup = this.groups.filter(p => p.Void !== true && p.InsertDate != null)
                        .sort((a, b) => {
                        return b.InsertDate.getTime() - a.InsertDate.getTime();
                    })[0];
                    this.selectedAfterTask = null;
                    this.currentTask.GroupId = this.selectedGroup.GroupId;
                    yield this.refreshOtherTasks();
                }
            });
            const currentGroupName = this.selectedGroup != null ?
                this.selectedGroup.Name :
                '';
            const alertOptions = this.alertService.getChangeDefaultGroupAlertOptions(handlerOk, handlerCancel, handlerSetAsDefault, handlerNew, this.groups.map(p => p.Name), currentGroupName);
            const alert = yield this.alertCtrl.create(alertOptions);
            alert.present();
        });
    }
    selectPosition() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            const handlerOk = (alertData) => {
                this.selectedAfterTask = this.otherTasks.filter(p => p.Name === alertData)[0];
                this.absolutePositionChange(this.selectedAfterTask.AbsolutePosition);
            };
            const handlerCancel = (alertData) => {
                return;
            };
            const handlerSetAsDefault = (alertData) => {
                this.selectedAfterTask = this.otherTasks.filter(p => p.Name === alertData)[0];
                this.absolutePositionChange(this.selectedAfterTask.AbsolutePosition);
            };
            const handlerSetAsFirst = (alertData) => {
                this.setToFirst();
            };
            const handlerSetAsLast = (alertData) => {
                this.setToLast();
            };
            const alertOptions = this.alertService.getChangePositionAlertOptions(handlerOk, handlerCancel, handlerSetAsDefault, handlerSetAsFirst, handlerSetAsLast, this.otherTasks.map(p => p.Name), this.selectedAfterTask != null ?
                this.selectedAfterTask.Name :
                null);
            const alert = yield this.alertCtrl.create(alertOptions);
            alert.present();
        });
    }
    initializeGroup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            const groupIndex = this.groups.findIndex(p => p.GroupId === this.currentTask.GroupId);
            this.selectedGroup = this.groups[groupIndex];
        });
    }
    refreshOtherTasks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            this.otherTasks = this.calendarTaskService.getAllPresentTasks()
                .filter(p => p.CalendarTaskId !== this.currentTask.CalendarTaskId &&
                p.GroupId === this.currentTask.GroupId &&
                !p.Void);
        });
    }
    setAfterTask() {
        if (this.otherTasks.length === 0) {
            this.currentTask.AbsolutePosition = 1;
            this.selectedAfterTask = null;
        }
        else {
            const afterTasks = this.otherTasks.filter(p => p.AbsolutePosition < this.currentTask.AbsolutePosition);
            if (afterTasks.length > 0) {
                this.selectedAfterTask = afterTasks[afterTasks.length - 1];
            }
        }
    }
    refreshAfterTask() {
        this.currentTask.AbsolutePosition = 1;
        this.selectedAfterTask = null;
    }
    setBackButtonAlert(alert) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            yield alert.dismiss();
        }));
    }
    resetBackButton() {
        if (this.backButtonSubscription != null) {
            this.backButtonSubscription.unsubscribe();
        }
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
    setBackButtonPicker(picker) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            yield picker.dismiss();
        }));
    }
    setBackButtonModal(modal) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__awaiter)(this, void 0, void 0, function* () {
            yield modal.dismiss();
        }));
    }
};
TaskEditComponent.ctorParameters = () => [
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_3__.CalendarTaskService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_19__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_19__.AlertController },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_10__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_19__.LoadingController },
    { type: src_app_pipes_format_dayofweek_abbr_pipe__WEBPACK_IMPORTED_MODULE_6__.FormatDayOfWeekAbbrPipe },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_5__.AlertService },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_20__.DatePipe },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_21__.TranslateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_19__.Platform },
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_11__.IUserService },
    { type: src_app_services_date_service__WEBPACK_IMPORTED_MODULE_12__.DateService },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_19__.PickerController },
    { type: src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_16__.ModalService }
];
TaskEditComponent.propDecorators = {
    currentTask: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_22__.Input }]
};
TaskEditComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_17__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_22__.Component)({
        selector: 'app-task-edit',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_edit_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_edit_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskEditComponent);



/***/ }),

/***/ 47717:
/*!*****************************************************************************!*\
  !*** ./src/app/components/task-list-popover/task-list-popover.component.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskListPopoverComponent": () => (/* binding */ TaskListPopoverComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_list_popover_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-list-popover.component.html */ 146);
/* harmony import */ var _task_list_popover_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-list-popover.component.scss */ 37161);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/event.service */ 29170);







let TaskListPopoverComponent = class TaskListPopoverComponent {
    constructor(popoverController, eventService, loadingController, translate) {
        this.popoverController = popoverController;
        this.eventService = eventService;
        this.loadingController = loadingController;
        this.translate = translate;
        this.skipAllBtnShown = true;
    }
    ngOnInit() { }
    btnSkipAllClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('task-list.msg-skipping-all'),
                id: 'refreshSpinner'
            });
            yield loading.present();
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService.EventIds.SkipAll, null));
            yield loading.dismiss();
            yield this.popoverController.dismiss();
        });
    }
};
TaskListPopoverComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.PopoverController },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.LoadingController },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__.TranslateService }
];
TaskListPopoverComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.Component)({
        selector: 'app-task-list-popover',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_list_popover_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_list_popover_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskListPopoverComponent);



/***/ }),

/***/ 67168:
/*!*************************************************************!*\
  !*** ./src/app/components/task-list/task-list.component.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskListComponent": () => (/* binding */ TaskListComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_list_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-list.component.html */ 98543);
/* harmony import */ var _task_list_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-list.component.scss */ 86994);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_services_date_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/date.service */ 23516);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var src_app_services_timer_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/timer.service */ 47557);
/* harmony import */ var src_app_services_fireworks_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/fireworks.service */ 89514);
/* harmony import */ var src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/event.service */ 29170);
/* harmony import */ var src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/models/Core/calendar-task */ 2908);
/* harmony import */ var _logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @logisticinfotech/ionic4-datepicker */ 85925);
/* harmony import */ var src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/models/Core/task-frequency.enum */ 90616);
/* harmony import */ var src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! src/app/models/Core/result-type.enum */ 82869);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var intro_js_intro_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! intro.js/intro.js */ 58249);
/* harmony import */ var intro_js_intro_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(intro_js_intro_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! src/app/shared/number-utils */ 26173);
/* harmony import */ var src_app_shared_thread_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! src/app/shared/thread.utils */ 39023);
/* harmony import */ var src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! src/app/services/data-sync-server-service */ 26022);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);
/* harmony import */ var src_app_services_user_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! src/app/services/user.service */ 77524);
/* harmony import */ var src_app_models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! src/app/models/DTO/dto-user */ 69449);
/* harmony import */ var src_app_interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! src/app/interfaces/i-api-provider */ 67116);
/* harmony import */ var src_app_services_data_sync_2_service__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! src/app/services/data-sync-2.service */ 57783);
/* harmony import */ var _welcome_welcome_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../welcome/welcome.component */ 57817);
/* harmony import */ var _task_selection_task_selection_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../task-selection/task-selection.component */ 20848);
/* harmony import */ var _task_create_task_create_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../task-create/task-create.component */ 20391);
/* harmony import */ var _task_list_popover_task_list_popover_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../task-list-popover/task-list-popover.component */ 47717);
































let TaskListComponent = class TaskListComponent {
    constructor(taskService, logger, loadingController, translate, userService, dateService, platform, timerService, fireworksService, eventService, popoverController, serverDataSync, modalService, api) {
        this.taskService = taskService;
        this.logger = logger;
        this.loadingController = loadingController;
        this.translate = translate;
        this.userService = userService;
        this.dateService = dateService;
        this.platform = platform;
        this.timerService = timerService;
        this.fireworksService = fireworksService;
        this.eventService = eventService;
        this.popoverController = popoverController;
        this.serverDataSync = serverDataSync;
        this.modalService = modalService;
        this.api = api;
        this.progressBarValue = 0;
        this.showBtnSkipEverything = false;
        this.showSettings = false;
        this.devMode = false;
        this.colorString = 'color-yellow';
        this.subscriptions = [];
        this.datePickerObj = {};
    } // this shouldnt be here (api)
    ngOnInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const dateStart = new Date();
                this.logger.logDebug('[ TASK-LIST WAITING FOR PLATFORM ]', new Date().toISOString());
                yield this.platform.ready();
                this.logger.logDebug('[ TASK-LIST WAITING FOR USER ]', new Date().toISOString());
                const success = yield this.userService.awaitUserReady();
                if (success === false) {
                    // console.log('Unable to get user, redirecting to login');
                    //console.log('logging out2');
                    yield this.userService.logout();
                    location.reload();
                }
                yield this.timerService.loadTimersFromDatabase();
                this.logger.logDebug('[ TASK-LIST INIT STARTING ]', new Date().toISOString());
                // const dateStart = new Date();
                // console.log('ngoninit', this.auth.getUserId());
                this.dateService.currentWorkDate = this.dateService.GetWorkDate(new Date());
                this.currentDateTitle = this.getCurrentDateString();
                this.dateService.cachingEnabled = true;
                this.dateService.ResetCaching();
                // console.log('currentWorkDate', this.currentWorkDate);
                this.currentWorkDay = this.dateService.currentWorkDate.getDay();
                this.currentDateTitle = this.getCurrentDateString();
                // console.log('setShowSkipAllBtn done', Date.now() - dateStart.getTime());
                // console.log('REFRESHTASKLISTLOCAL STARTING');
                yield this.refreshTaskListLocal();
                // console.log('REFRESHTASKLISTLOCAL DONE');
                yield this.timerService.checkForOldTimer();
                /*if (this.taskService.allGroups.length === 0) {
                  console.log('GROUPS EMPTY');
                }*/
                if (this.taskService.getAllTasks().length === 0 &&
                    src_app_services_user_service__WEBPACK_IMPORTED_MODULE_19__.UserService.currentUser.IsNew === false) {
                    // console.log('TASKS EMPTY');
                    // console.log('ENABLE2');
                    if (this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.EnableCloudSyncKey) === true) {
                        // console.log('RELOADING FROM SERVER');
                        const loading = yield this.loadingController.create({
                            message: this.translate.instant('menu.reloading-tasks'),
                            id: 'reload-server'
                        });
                        yield loading.present();
                        // console.log('XXXXXXXX STARTING REFRESH 1'); // we have to get user from api
                        const apiUserDTO = yield this.api.getUser(src_app_services_user_service__WEBPACK_IMPORTED_MODULE_19__.UserService.currentUserId); // this shouldnt be here IMO (api)
                        const apiUser = src_app_models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_20__.DTOUser.ToUser(apiUserDTO);
                        yield this.serverDataSync.reloadAllGroupsAndTasksServer(new src_app_services_data_sync_2_service__WEBPACK_IMPORTED_MODULE_22__.CancellationToken(), apiUser.LastActivityDate, apiUser.Config);
                        yield loading.dismiss();
                    }
                }
                // Set ProgressBar + Skip all txt when ProgressBar event
                this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ProgressBar, () => (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
                    // console.log('PROGRESSBAR EVENT');
                    yield this.setProgressBar(false);
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.NotificationSyncedFalse, null));
                })));
                this.currentPrioritizeVsExecute = 'Execute';
                this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.LanguageChanged, () => (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
                    this.currentDateTitle = this.getCurrentDateString();
                })));
                this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.Walkthrough, () => (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
                    yield this.walkthrough();
                })));
                this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.SyncRequired, () => {
                    console.log('[][][][][][][] -  SYNC REQUIRED (RED)  - [][][][][][][]');
                    this.colorString = 'color-red';
                });
                this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.LocalSyncCompleted, () => {
                    console.log('[][][][][][][] -  SYNC COMPLETED (GREEN/ORANGE)  - [][][][][][][]');
                    if (this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.EnableCloudSyncKey) === true) {
                        this.colorString = 'color-yellow';
                    }
                    else {
                        this.colorString = 'color-green';
                    }
                });
                this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ServerSyncCompleted, () => {
                    console.log('[][][][][][][] -  SYNC COMPLETED (GREEN)  - [][][][][][][]');
                    this.colorString = 'color-green';
                });
                this.subscriptions.push(this.eventService.on(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.Resume, () => (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
                    this.logger.logEvent('resume event');
                    this.dateService.currentWorkDate = this.dateService.GetWorkDate(new Date());
                    this.currentDateTitle = this.getCurrentDateString();
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.DateChanged, this.dateService.currentWorkDate));
                    this.taskService.setGroupsVisible();
                    // remove auto expand on resume
                    /*for (const group of this.taskService.allGroups) {
                      if (group.isVisible === true) {
                        group.isExpanded = true;
                      }
                    }*/
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ProgressBar, null));
                    // CHECK IF NEED TO REFRESH TASKS
                    src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_17__.DataSyncServerService.GetLatestRequired = true;
                })));
                this.subscriptions.push(this.platform.resume.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
                    this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.Resume, null));
                })));
                // if (UserService.currentUserId === 'Hwnf3hxuFjgIai5QxvyDNdsCZFB2') {
                this.devMode = true;
                // }
                // First time setup
                if (src_app_services_user_service__WEBPACK_IMPORTED_MODULE_19__.UserService.currentUser.IsNew === true) {
                    yield this.modalService.showWelcomeModal(_welcome_welcome_component__WEBPACK_IMPORTED_MODULE_23__.WelcomeComponent);
                }
                if (this.taskService.getAllTasks().length === 0) {
                    yield this.modalService.showTaskSelectionModal(_task_selection_task_selection_component__WEBPACK_IMPORTED_MODULE_24__.TaskSelectionComponent);
                    yield this.createDemoTasks();
                    yield this.walkthrough();
                    src_app_services_user_service__WEBPACK_IMPORTED_MODULE_19__.UserService.currentUser.IsNew = false;
                    yield this.userService.saveUser(src_app_services_user_service__WEBPACK_IMPORTED_MODULE_19__.UserService.currentUser);
                }
                src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_17__.DataSyncServerService.ApplicationLoaded = true;
                let elapsed = new Date().getTime() - dateStart.getTime();
                this.logger.logDebug('[ TASK-LIST INIT COMPLETE ]', new Date().toISOString());
                this.logger.logDebug('[[[[[[[[[[ (' + elapsed + ') ]]]]]]]]]]', new Date().toISOString());
                // DO A SYNC TO SEND MISSING TASKS TO SERVER
                this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.OnStartSync, null));
                console.log('SYNC REQUIRED END OF LOADING');
            }
            catch (error) {
                this.logger.logError(error);
                alert('An unexpected error occured while initializing the application, please log out and log back ' +
                    'in or reinstall the application. If it does not work please contact support');
                alert(error);
                // console.log('alert hihihi');
            }
        });
    }
    ngOnDestroy() {
        for (const sub of this.subscriptions) {
            sub.unsubscribe();
        }
    }
    createDemoTasks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const defaultNonRecurringGroupId = this.userService.getConfig(src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_13__.UserConfig.DefaultNonRecurringGroupId);
                // console.log('NON RECURRING GROUP ID', defaultNonRecurringGroupId);
                // console.log('ALL GROUPS', JSON.stringify(this.taskService.allGroups.map(p => p.GroupId)));
                const calendarTask1 = new src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_10__.CalendarTask();
                calendarTask1.Name = this.translate.instant('welcome.task-binary');
                calendarTask1.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_11__.TaskFrequency.UntilDone;
                calendarTask1.ResultType = src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_12__.ResultType.Binary;
                calendarTask1.UserId = yield this.userService.getCurrentUserId();
                calendarTask1.AbsolutePosition = 1;
                calendarTask1.InitialAbsolutePosition = 500;
                calendarTask1.AssignedDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].RemoveHours(new Date());
                calendarTask1.GroupId = defaultNonRecurringGroupId;
                calendarTask1.InitialGroupId = defaultNonRecurringGroupId;
                calendarTask1.InsertDate = new Date();
                calendarTask1.CalendarTaskId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_15__["default"].getRandomId(); // we need it in case we void it before syncing
                const calendarTask2 = new src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_10__.CalendarTask();
                calendarTask2.Name = this.translate.instant('welcome.task-decimal');
                calendarTask2.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_11__.TaskFrequency.UntilDone;
                calendarTask2.ResultType = src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_12__.ResultType.Decimal;
                calendarTask2.UserId = yield this.userService.getCurrentUserId();
                calendarTask2.AbsolutePosition = 2;
                calendarTask2.InitialAbsolutePosition = 500;
                calendarTask2.GroupId = defaultNonRecurringGroupId;
                calendarTask2.InitialGroupId = defaultNonRecurringGroupId;
                calendarTask2.AssignedDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].RemoveHours(new Date());
                calendarTask2.InsertDate = new Date();
                calendarTask2.CalendarTaskId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_15__["default"].getRandomId(); // we need it in case we void it before syncing
                const calendarTask3 = new src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_10__.CalendarTask();
                calendarTask3.Name = this.translate.instant('welcome.task-duration');
                calendarTask3.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_11__.TaskFrequency.UntilDone;
                calendarTask3.ResultType = src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_12__.ResultType.Duration;
                calendarTask3.UserId = yield this.userService.getCurrentUserId();
                calendarTask3.AbsolutePosition = 3;
                calendarTask3.InitialAbsolutePosition = 500;
                calendarTask3.GroupId = defaultNonRecurringGroupId;
                calendarTask3.InitialGroupId = defaultNonRecurringGroupId;
                calendarTask3.AssignedDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].RemoveHours(new Date());
                calendarTask3.InsertDate = new Date();
                calendarTask3.CalendarTaskId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_15__["default"].getRandomId(); // we need it in case we void it before syncing
                const calendarTask4 = new src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_10__.CalendarTask();
                calendarTask4.Name = this.translate.instant('welcome.task-time-of-day');
                calendarTask4.Frequency = src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_11__.TaskFrequency.UntilDone;
                calendarTask4.ResultType = src_app_models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_12__.ResultType.TimeOfDay;
                calendarTask4.UserId = yield this.userService.getCurrentUserId();
                calendarTask4.AbsolutePosition = 4;
                calendarTask4.InitialAbsolutePosition = 500;
                calendarTask4.GroupId = defaultNonRecurringGroupId;
                calendarTask4.InitialGroupId = defaultNonRecurringGroupId;
                calendarTask4.AssignedDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].RemoveHours(new Date());
                calendarTask4.InsertDate = new Date();
                calendarTask4.CalendarTaskId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_15__["default"].getRandomId(); // we need it in case we void it before syncing
                yield this.taskService.insertCalendarTasks([calendarTask1, calendarTask2, calendarTask3, calendarTask4]);
                // EXPAND ALL GROUPS
                for (const group of this.taskService.allGroups) {
                    if (group.isVisible === true) {
                        group.isExpanded = true;
                    }
                }
                this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ProgressBar, null));
            }
            catch (error) {
                // console.log('ERROR', error);
                this.logger.logError(error);
            }
        });
    }
    setShowSkipAllBtn() {
        this.showBtnSkipEverything = this.dateService.currentWorkDate < src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].RemoveHours(new Date()) &&
            this.taskService.getAllTasks().some(p => this.taskService.isShown(p, this.dateService.currentWorkDate.getDay(), this.dateService.currentWorkDate) &&
                !this.taskService.isDoneOrSkipped(p, this.dateService.currentWorkDate));
    }
    getCurrentDateString() {
        const todayWorkDate = this.dateService.GetWorkDate(new Date());
        // this.logger.logEvent('todayWorkDate', { key: 'todayWorkDate', value: JSON.stringify(todayWorkDate)});
        if (src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].datesAreEqual(todayWorkDate, this.dateService.currentWorkDate)) {
            return this.translate.instant('task-list.lbl-title-today');
        }
        else if (src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].datesAreEqual(src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].AddDays(todayWorkDate, -1), this.dateService.currentWorkDate)) {
            return this.translate.instant('task-list.lbl-title-yesterday');
        }
        else if (src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].datesAreEqual(src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].AddDays(todayWorkDate, 1), this.dateService.currentWorkDate)) {
            return this.translate.instant('task-list.lbl-title-tomorrow');
        }
        else {
            return this.dateService.currentWorkDate.toLocaleDateString();
        }
    }
    addTaskButtonClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalService.showCreateTaskModal(_task_create_task_create_component__WEBPACK_IMPORTED_MODULE_25__.TaskCreateComponent);
        });
    }
    loadPreviousDay() {
        this.loadDay(-1);
    }
    loadDay(addDays) {
        this.dateService.cachingEnabled = true;
        this.dateService.currentWorkDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].AddDays(this.dateService.currentWorkDate, addDays);
        // console.log('*** LOAD DAY ***', this.dateService.currentWorkDate);
        this.logger.logEvent('currentWorkDate', { key: 'currentWorkDate', value: JSON.stringify(this.dateService.currentWorkDate) });
        this.currentWorkDay = this.dateService.currentWorkDate.getDay();
        this.currentDateTitle = this.getCurrentDateString();
        // this.setShowSkipAllBtn();
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.DateChanged, this.dateService.currentWorkDate));
        // console.log('LOAD DAY PROGRESSBAR');
        this.dateService.cachingEnabled = false;
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ProgressBar, null));
        this.taskService.setGroupsVisible();
    }
    loadNextDay() {
        this.loadDay(1);
    }
    btnSettingsClick() {
        this.showSettings = !this.showSettings;
    }
    prioritize(event) {
        // console.log('event', event.detail.value);
        const prioritize = event.detail.value === 'Prioritize' ? true : false;
        if (prioritize === true) {
            this.taskService.enableDragAndDrop = true;
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ToggleDragAndDrop, true));
        }
        else {
            this.taskService.enableDragAndDrop = false;
            this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ToggleDragAndDrop, false));
        }
    }
    btnCurrentDateClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            this.datePickerObj.setLabel = this.translate.instant('task-list.btn-calendar-set');
            this.datePickerObj.todayLabel = this.translate.instant('task-list.btn-calendar-today');
            this.datePickerObj.closeLabel = this.translate.instant('task-list.btn-calendar-close');
            this.datePickerObj.monthsList = this.dateService.GetMonthAbbrs();
            this.datePickerObj.weeksList = this.dateService.GetWeekAbbrs();
            if (this.translate.currentLang === 'fr') {
                this.datePickerObj.momentLocale = 'fr-CA';
            }
            else {
                this.datePickerObj.momentLocale = 'en-US';
            }
            const data = yield this.modalService.showCurrentDateModal(_logisticinfotech_ionic4_datepicker__WEBPACK_IMPORTED_MODULE_28__.Ionic4DatepickerModalComponent, this.datePickerObj, this.dateService.currentWorkDate);
            if (data != null && data.data != null) {
                const selectedDate = new Date(data.data.date);
                if (!src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].isValidDate(selectedDate)) { // standard cancel
                    return;
                }
                // console.log('SELECTED DATE', selectedDate);
                const daysBetween = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].daysBetween(this.dateService.currentWorkDate, selectedDate);
                // console.log('DAYS BETWEEN', daysBetween);
                this.loadDay(daysBetween);
            }
        });
    }
    toggleDragAndDrop(event) {
        // console.log('TOGGLE', event.detail.checked);
        this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ToggleDragAndDrop, event.detail.checked));
    }
    refreshTaskListLocal() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('task-list.msg-reloading-tasks'),
                id: 'refreshSpinner'
            });
            loading.present();
            try {
                this.logger.logEvent('starting reloading', { key: 'currentWorkDate', value: JSON.stringify(new Date().toISOString()) });
                yield this.taskService.reloadAllGroupsAndTasksLocal();
            }
            catch (error) {
                // console.log('error');
                this.logger.logError(new Error('Unable to get tasks : ' + error.message));
                // alert(this.translate.instant('task-list.msg-reloading-tasks-error')); // TODO : Detect first time setup
                // alert('Unable to get tasks'); cant show alert because of first time setup
            }
            finally {
                this.logger.logEvent('finished reloading', { key: 'currentWorkDate', value: JSON.stringify(new Date().toISOString()) });
                // console.log('DISMISSING');
                yield loading.dismiss('refreshSpinner');
                // console.log('DISMISSED');
                this.eventService.emit(new src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventData(src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService.EventIds.ProgressBar, null));
                // this.setShowSkipAllBtn();
            }
        });
    }
    setProgressBar(fireworks = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('progress bar', this.taskService.allGroups);
            this.taskService.setProgressText(this.dateService.currentWorkDate);
            if (fireworks === true &&
                this.taskService.currentProgressDone === this.taskService.currentProgressTotal &&
                this.taskService.currentProgressDone > 0) {
                yield this.fireworksService.GenerateFireworks();
            }
            this.setShowSkipAllBtn();
        });
    }
    setToExecute() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            this.currentPrioritizeVsExecute = 'Execute';
        });
    }
    walkthrough() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('WALKTHROUGH');
            this.currentPrioritizeVsExecute = 'Prioritize';
            for (let i = 0; i < 300; i++) {
                if (document.querySelectorAll('#stepPostpone')[0] != null) {
                    break;
                }
                // console.log('walkthrough sleeping');
                yield src_app_shared_thread_utils__WEBPACK_IMPORTED_MODULE_16__["default"].sleep(100);
            }
            const introJS = intro_js_intro_js__WEBPACK_IMPORTED_MODULE_14__();
            introJS.setOptions({
                steps: [
                    {
                        element: document.querySelector('#addTaskBtn'),
                        intro: this.translate.instant('walkthrough.msg-intro'),
                    },
                    {
                        element: document.querySelectorAll('#stepActionButtons')[0],
                        intro: this.translate.instant('walkthrough.msg-action-buttons'),
                        position: 'auto',
                    },
                    {
                        element: document.querySelectorAll('#stepCardMenu')[0],
                        intro: this.translate.instant('walkthrough.msg-task-menu'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepDragAndDrop')[0],
                        intro: this.translate.instant('walkthrough.msg-drag-and-drop'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepPrioritizeExecute')[0],
                        intro: this.translate.instant('walkthrough.msg-prioritize-and-execute'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepPostpone')[0],
                        intro: this.translate.instant('walkthrough.msg-postpone'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepSkip')[0],
                        intro: this.translate.instant('walkthrough.msg-skip'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepTrash')[4],
                        intro: this.translate.instant('walkthrough.msg-delete'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepStartTimer')[0],
                        intro: this.translate.instant('walkthrough.msg-start'),
                        position: 'auto',
                    },
                    {
                        element: document.querySelectorAll('#stepEnterResult')[0],
                        intro: this.translate.instant('walkthrough.msg-results'),
                        position: 'auto'
                    },
                    {
                        intro: this.translate.instant('walkthrough.msg-void'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepGroupArrow')[0],
                        intro: this.translate.instant('walkthrough.msg-group-title'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepEditGroup')[0],
                        intro: this.translate.instant('walkthrough.msg-edit-group'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepChangeDate')[0],
                        intro: this.translate.instant('walkthrough.msg-change-date'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepSelectDate')[0],
                        intro: this.translate.instant('walkthrough.msg-select-date'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepMenu')[0],
                        intro: this.translate.instant('walkthrough.msg-menu'),
                        position: 'auto'
                    },
                    {
                        element: document.querySelectorAll('#stepNewTask')[0],
                        intro: this.translate.instant('walkthrough.msg-new-task'),
                        position: 'auto'
                    },
                ],
                overlayOpacity: 0.3,
                showStepNumbers: false,
            });
            const that = this;
            introJS.onbeforechange(function () {
                if (this._currentStep === 8) {
                    // console.log('what is happening');
                    that.setToExecute();
                }
                if (this._currentStep === 9) {
                }
            });
            introJS.start();
        });
    }
    popoverMenuClick(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__awaiter)(this, void 0, void 0, function* () {
            event.stopPropagation();
            const popover = yield this.popoverController.create({
                component: _task_list_popover_task_list_popover_component__WEBPACK_IMPORTED_MODULE_26__.TaskListPopoverComponent,
                cssClass: 'group-popover',
                event,
                translucent: false,
                animated: false,
                showBackdrop: false,
            });
            return yield popover.present();
        });
    }
};
TaskListComponent.ctorParameters = () => [
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_2__.CalendarTaskService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_29__.LoadingController },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_30__.TranslateService },
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_6__.IUserService },
    { type: src_app_services_date_service__WEBPACK_IMPORTED_MODULE_5__.DateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_29__.Platform },
    { type: src_app_services_timer_service__WEBPACK_IMPORTED_MODULE_7__.TimerService },
    { type: src_app_services_fireworks_service__WEBPACK_IMPORTED_MODULE_8__.FireworksService },
    { type: src_app_services_event_service__WEBPACK_IMPORTED_MODULE_9__.EventService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_29__.PopoverController },
    { type: src_app_services_data_sync_server_service__WEBPACK_IMPORTED_MODULE_17__.DataSyncServerService },
    { type: src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_18__.ModalService },
    { type: src_app_interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_21__.IApiProvider }
];
TaskListComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_27__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_31__.Component)({
        selector: 'app-task-list',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_list_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_list_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskListComponent);



/***/ }),

/***/ 96800:
/*!*********************************************************************************!*\
  !*** ./src/app/components/task-selection-card/task-selection-card.component.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskSelectionCardComponent": () => (/* binding */ TaskSelectionCardComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_selection_card_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-selection-card.component.html */ 26763);
/* harmony import */ var _task_selection_card_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-selection-card.component.scss */ 42631);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/Core/day-of-week.enum */ 64591);





let TaskSelectionCardComponent = class TaskSelectionCardComponent {
    constructor() {
        this.daysOfWeek = [src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_2__.DayOfWeek.Monday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_2__.DayOfWeek.Tuesday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_2__.DayOfWeek.Wednesday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_2__.DayOfWeek.Thursday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_2__.DayOfWeek.Friday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_2__.DayOfWeek.Saturday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_2__.DayOfWeek.Sunday
        ];
        this.taskSelected = false;
        this.showDescription = false;
        this.checkChangedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    }
    ngOnInit() {
        this.showDescription = this.currentTask.Description != null &&
            this.currentTask.Description.length > 0;
    }
    cardClick() {
        this.taskSelected = !this.taskSelected;
        this.checkChangedEvent.emit([this.taskSelected,
            this.currentTask]);
    }
    checkChanged() {
        event.stopPropagation();
    }
    cbDayOfWeek(event, dayOfWeek) {
        if (event.detail.checked) {
            this.currentTask.RequiredDays.push(dayOfWeek);
        }
        else {
            this.currentTask.RequiredDays = this.currentTask.RequiredDays.filter(p => p.valueOf() !== dayOfWeek);
        }
    }
};
TaskSelectionCardComponent.ctorParameters = () => [];
TaskSelectionCardComponent.propDecorators = {
    currentTask: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Input }],
    checkChangedEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Output }]
};
TaskSelectionCardComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Component)({
        selector: 'app-task-selection-card',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_selection_card_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_selection_card_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskSelectionCardComponent);



/***/ }),

/***/ 20848:
/*!***********************************************************************!*\
  !*** ./src/app/components/task-selection/task-selection.component.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskSelectionComponent": () => (/* binding */ TaskSelectionComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_selection_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./task-selection.component.html */ 68336);
/* harmony import */ var _task_selection_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-selection.component.scss */ 67298);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_services_selectable_task_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/selectable-task.service */ 17570);
/* harmony import */ var src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/models/Core/day-of-week.enum */ 64591);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/models/Core/calendar-task */ 2908);
/* harmony import */ var src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/services/calendar-task.service */ 43772);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/interfaces/i-logger */ 27388);
/* harmony import */ var src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/shared/number-utils */ 26173);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var src_app_models_Core_task_group__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/models/Core/task-group */ 33890);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);
/* harmony import */ var src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! src/app/models/Core/task-frequency.enum */ 90616);
















let TaskSelectionComponent = class TaskSelectionComponent {
    constructor(selectableTaskService, modalController, calendarTaskService, loadingController, userService, translate, logger, platform) {
        this.selectableTaskService = selectableTaskService;
        this.modalController = modalController;
        this.calendarTaskService = calendarTaskService;
        this.loadingController = loadingController;
        this.userService = userService;
        this.translate = translate;
        this.logger = logger;
        this.platform = platform;
        this.selectableTasks = [];
        this.selectableTasksDaily = [];
        this.selectableTasksSpecial = [];
        this.selectedTasks = [];
        this.daysOfWeek = [
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_3__.DayOfWeek.Monday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_3__.DayOfWeek.Tuesday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_3__.DayOfWeek.Wednesday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_3__.DayOfWeek.Thursday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_3__.DayOfWeek.Friday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_3__.DayOfWeek.Saturday,
            src_app_models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_3__.DayOfWeek.Sunday
        ];
    }
    ngOnInit() {
        this.selectableTasks = this.selectableTaskService.getAllSelectableTasks();
        this.selectableTasksSpecial = this.selectableTasks.filter(p => p.AdditionnalTask != null);
        this.selectableTasksDaily = this.selectableTasks.filter(p => p.Frequency === src_app_models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_11__.TaskFrequency.Daily &&
            p.AdditionnalTask == null);
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_10__.ModalService.ModalIds.TaskSelection);
        });
    }
    btnSaveClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loadingController.create({
                message: this.translate.instant('task-selection.msg-saving-tasks'),
            });
            yield loading.present();
            // This only works for Welcome
            const morningRoutinesGroup = new src_app_models_Core_task_group__WEBPACK_IMPORTED_MODULE_9__.TaskGroup();
            morningRoutinesGroup.GroupId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__["default"].getRandomId();
            morningRoutinesGroup.InsertDate = new Date();
            morningRoutinesGroup.UserId = yield this.userService.getCurrentUserId();
            morningRoutinesGroup.Position = 1;
            morningRoutinesGroup.InitialPosition = 500;
            morningRoutinesGroup.RecurringDefault = true;
            morningRoutinesGroup.Name = this.translate.instant('group-create.morning-routine-group');
            // console.log('Morning GROUP = ', morningRoutinesGroup);
            const TodoGroup = new src_app_models_Core_task_group__WEBPACK_IMPORTED_MODULE_9__.TaskGroup();
            TodoGroup.GroupId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__["default"].getRandomId();
            TodoGroup.InsertDate = new Date();
            TodoGroup.UserId = yield this.userService.getCurrentUserId();
            TodoGroup.Position = 2;
            TodoGroup.InitialPosition = 500;
            TodoGroup.RecurringDefault = false;
            TodoGroup.Name = this.translate.instant('group-create.todo-group');
            // console.log('Todo GROUP = ', TodoGroup);
            // SET DEFAULT NonRecurring
            const regularRoutinesGroup = new src_app_models_Core_task_group__WEBPACK_IMPORTED_MODULE_9__.TaskGroup();
            regularRoutinesGroup.GroupId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__["default"].getRandomId();
            regularRoutinesGroup.InsertDate = new Date();
            regularRoutinesGroup.UserId = yield this.userService.getCurrentUserId();
            regularRoutinesGroup.Position = 3;
            regularRoutinesGroup.InitialPosition = 500;
            regularRoutinesGroup.RecurringDefault = true;
            regularRoutinesGroup.Name = this.translate.instant('group-create.regular-routine-group');
            // console.log('Regular GROUP = ', regularRoutinesGroup);
            // SET DEFAULT Recurring
            const eveningRoutinesGroup = new src_app_models_Core_task_group__WEBPACK_IMPORTED_MODULE_9__.TaskGroup();
            eveningRoutinesGroup.GroupId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__["default"].getRandomId();
            eveningRoutinesGroup.InsertDate = new Date();
            eveningRoutinesGroup.UserId = yield this.userService.getCurrentUserId();
            eveningRoutinesGroup.Position = 4;
            eveningRoutinesGroup.InitialPosition = 500;
            eveningRoutinesGroup.RecurringDefault = true;
            eveningRoutinesGroup.Name = this.translate.instant('group-create.evening-routine-group');
            // console.log('Evening GROUP = ', eveningRoutinesGroup);
            let newGroups = false;
            if (this.calendarTaskService.allGroups.filter(p => p.GroupId !== src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_5__.CalendarTaskService.UnassignedId).length === 0) {
                // console.log('NEW GROUPS');
                newGroups = true;
                yield this.calendarTaskService.insertGroup(morningRoutinesGroup);
                yield this.calendarTaskService.insertGroup(TodoGroup);
                yield this.calendarTaskService.insertGroup(regularRoutinesGroup);
                yield this.calendarTaskService.insertGroup(eveningRoutinesGroup);
                yield this.userService.setDefaultRecurringGroupId(regularRoutinesGroup.GroupId);
                yield this.userService.setDefaultNonRecurringGroupId(TodoGroup.GroupId);
            } /* else {
              console.log('NOT NEW GROUPS', this.calendarTaskService.allGroups);
            }*/
            const toInsertTasks = [];
            for (const selectedTask of this.selectedTasks) {
                const calendarTask = new src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_4__.CalendarTask();
                calendarTask.Name = selectedTask.Name;
                calendarTask.ResultType = selectedTask.ResultType;
                calendarTask.Frequency = selectedTask.Frequency;
                calendarTask.AbsolutePosition = selectedTask.AbsolutePosition;
                calendarTask.RequiredDays = this.daysOfWeek;
                calendarTask.UserId = (yield this.userService.getCurrentUser()).UserId;
                calendarTask.InsertDate = new Date();
                calendarTask.CalendarTaskId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__["default"].getRandomId();
                if (newGroups === true) {
                    if (selectedTask.GroupName === src_app_services_selectable_task_service__WEBPACK_IMPORTED_MODULE_2__.SelectableTaskService.MorningRoutinesGroupName) {
                        // console.log('MORNING', calendarTask);
                        calendarTask.GroupId = morningRoutinesGroup.GroupId;
                    }
                    if (selectedTask.GroupName === src_app_services_selectable_task_service__WEBPACK_IMPORTED_MODULE_2__.SelectableTaskService.RegularRoutinesGroupName) {
                        // console.log('REGULAR', calendarTask);
                        calendarTask.GroupId = regularRoutinesGroup.GroupId;
                    }
                    if (selectedTask.GroupName === src_app_services_selectable_task_service__WEBPACK_IMPORTED_MODULE_2__.SelectableTaskService.EveningRoutinesGroupName) {
                        // console.log('EVENING', calendarTask);
                        calendarTask.GroupId = eveningRoutinesGroup.GroupId;
                    }
                } /* else {
                  console.log('NEWGROUP1 FALSE');
                }*/
                if (selectedTask.AdditionnalTask != null) {
                    // console.log('ADDITIONNAL TASK : ', selectedTask.AdditionnalTask);
                    const calendarTask2 = new src_app_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_4__.CalendarTask();
                    calendarTask.Name = selectedTask.AdditionnalTask.Task1Name;
                    calendarTask.StatType = selectedTask.AdditionnalTask.StatType1;
                    calendarTask2.Name = selectedTask.AdditionnalTask.Task2Name;
                    calendarTask2.ResultType = selectedTask.ResultType;
                    calendarTask2.Frequency = selectedTask.Frequency;
                    calendarTask2.AbsolutePosition = selectedTask.AdditionnalTask.AbsolutePositionTask2;
                    calendarTask2.RequiredDays = this.daysOfWeek;
                    calendarTask2.StatType = selectedTask.AdditionnalTask.StatType2;
                    calendarTask2.UserId = (yield this.userService.getCurrentUser()).UserId;
                    calendarTask2.CalendarTaskId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_7__["default"].getRandomId();
                    // ADDITIONNAL TASKS ARE ALWAYS IN THE EVENING
                    if (newGroups === true) {
                        calendarTask2.GroupId = eveningRoutinesGroup.GroupId;
                    } /*else {
                      console.log('NEWGROUP2 FALSE');
                    }*/
                    toInsertTasks.push(calendarTask2);
                    // await this.calendarTaskService.insertCalendarTask(calendarTask2);
                }
                // console.log('insert task', calendarTask);
                toInsertTasks.push(calendarTask);
                // await this.calendarTaskService.insertCalendarTask(calendarTask);
            }
            yield this.calendarTaskService.insertCalendarTasks(toInsertTasks);
            // this.eventService.emit(new EventData(EventService.EventIds.PrioritizeVsExecute, null));
            yield loading.dismiss();
            yield this.closePopup();
        });
    }
    taskSelected(data) {
        // this.logger.logEvent('taskSelected', { key: 'data', value: JSON.stringify(data)});
        const toRemoveIndexes = [];
        for (const task of this.selectableTasks) {
            const receivedChecked = data[0];
            const receivedTask = data[1];
            if (task === receivedTask) {
                if (receivedChecked) {
                    this.selectedTasks.push(task);
                }
                else {
                    const taskIndex = this.selectedTasks.findIndex(p => p === task);
                    toRemoveIndexes.push(taskIndex);
                }
            }
        }
        for (const index of toRemoveIndexes) {
            this.selectedTasks.splice(index, 1);
        }
        // this.logger.logEvent('taskSelected', { key: 'this.selectedTasks', value: JSON.stringify(this.selectedTasks)});
    }
};
TaskSelectionComponent.ctorParameters = () => [
    { type: src_app_services_selectable_task_service__WEBPACK_IMPORTED_MODULE_2__.SelectableTaskService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_13__.ModalController },
    { type: src_app_services_calendar_task_service__WEBPACK_IMPORTED_MODULE_5__.CalendarTaskService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_13__.LoadingController },
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_8__.IUserService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_14__.TranslateService },
    { type: src_app_interfaces_i_logger__WEBPACK_IMPORTED_MODULE_6__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_13__.Platform }
];
TaskSelectionComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_12__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_15__.Component)({
        selector: 'app-task-selection',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_task_selection_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_task_selection_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TaskSelectionComponent);



/***/ }),

/***/ 32531:
/*!*****************************************************!*\
  !*** ./src/app/components/terms/terms.component.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TermsComponent": () => (/* binding */ TermsComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_terms_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./terms.component.html */ 47757);
/* harmony import */ var _terms_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./terms.component.scss */ 97754);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);






let TermsComponent = class TermsComponent {
    constructor(modalController, platform) {
        this.modalController = modalController;
        this.platform = platform;
    }
    ngOnInit() {
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(null, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_2__.ModalService.ModalIds.Terms);
        });
    }
};
TermsComponent.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.Platform }
];
TermsComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Component)({
        selector: 'app-terms',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_terms_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_terms_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], TermsComponent);



/***/ }),

/***/ 18895:
/*!*********************************************************************!*\
  !*** ./src/app/components/user-settings/user-settings.component.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UserSettingsComponent": () => (/* binding */ UserSettingsComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_user_settings_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./user-settings.component.html */ 29337);
/* harmony import */ var _user_settings_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user-settings.component.scss */ 59035);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/Core/language.enum */ 76975);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/models/Core/user */ 42535);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);
/* harmony import */ var src_app_services_report_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/report.service */ 91681);
/* harmony import */ var src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! src/app/services/alert.service */ 34571);
/* harmony import */ var src_app_services_user_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! src/app/services/user.service */ 77524);










//import { NotificationService } from 'src/app/services/notification.service';




let UserSettingsComponent = class UserSettingsComponent {
    constructor(userService, translate, alertCtrl, modalController, platform, pickerCtrl, 
    //private notificationService: NotificationService, TODO CAPACITOR
    loading, reportService, alertService) {
        this.userService = userService;
        this.translate = translate;
        this.alertCtrl = alertCtrl;
        this.modalController = modalController;
        this.platform = platform;
        this.pickerCtrl = pickerCtrl;
        this.loading = loading;
        this.reportService = reportService;
        this.alertService = alertService;
        this.hourChoices = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11',
            '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];
        this.NoSyncValue = 'NoSync';
        this.SyncValue = 'Sync';
        this.keepPortraitEnabled = false;
        this.currentLanguage = src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__.Language.English;
    }
    ngOnInit() {
        this.resetBackButton();
    }
    ngOnDestroy() {
        this.backButtonSubscription.unsubscribe();
    }
    ngAfterViewInit() {
        this.userService.getCurrentUser().then(user => {
            // console.log('[1]ngAfterViewInit user', user);
            if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.PreferedLanguageKey) === src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__.Language.French) {
                this.currentLanguage = src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__.Language.French;
            }
            else {
                this.currentLanguage = src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__.Language.English;
            }
            if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.EndOfDayTimeKey) == null ||
                src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.EndOfDayTimeKey).length === 0) {
                this.endOfDayTime = '04:00';
            }
            else {
                this.endOfDayTime = src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.EndOfDayTimeKey);
            }
            // console.log('ENABLE3');
            if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.EnableCloudSyncKey) === true) {
                this.syncCurrentValue = this.SyncValue;
                this.currentCloudSyncEnabled = true;
            }
            else {
                this.syncCurrentValue = this.NoSyncValue;
                this.currentCloudSyncEnabled = false;
            }
            if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.AutoSkipAfter2DaysId) === true) {
                this.autoSkipEnabled = true;
            }
            else {
                this.autoSkipEnabled = false;
            }
            if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.KeepPortrait) === true) {
                this.keepPortraitEnabled = true;
            }
            else {
                this.keepPortraitEnabled = false;
            }
        });
    }
    btnHelpClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const alert = yield this.alertCtrl.create({
                message: this.translate.instant('menu.end-of-day-help'),
            });
            yield alert.present();
            this.setBackButtonAlert(alert);
            yield alert.onDidDismiss();
            this.resetBackButton();
        });
    }
    languageChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            yield this.userService.setLanguage(event.detail.value);
            //await this.notificationService.resetAllNotifications(); TODO CAPACITOR
        });
    }
    autoSkipChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('AUTO SKIP CHANGED TO ', event.detail.checked);
            src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.setConfig(src_app_services_user_service__WEBPACK_IMPORTED_MODULE_9__.UserService.currentUser, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.AutoSkipAfter2DaysId, event.detail.checked);
            yield this.userService.saveUser(src_app_services_user_service__WEBPACK_IMPORTED_MODULE_9__.UserService.currentUser);
        });
    }
    closePopup() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            yield this.modalController.dismiss(false, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_6__.ModalService.ModalIds.UserSettings);
        });
    }
    privacyChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            if (event.detail.value === 'NoSync') {
                this.currentCloudSyncEnabled = false;
                yield this.userService.setCloudSync(false);
            }
            else {
                this.currentCloudSyncEnabled = true;
                yield this.userService.setCloudSync(true);
            }
        });
    }
    btnDownloadMyDataClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const loading = yield this.loading.create({
                message: this.translate.instant('user-settings.download-data-loading')
            });
            yield loading.present();
            yield this.reportService.getAllData();
            yield loading.dismiss();
        });
    }
    btnDeleteMyDataClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const handler = (alertData) => {
                this.deleteAccount();
            };
            const alertOptions = this.alertService.getDeleteAccountAlertOptions(handler);
            const alert = yield this.alertCtrl.create(alertOptions);
            yield alert.present();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
                yield alert.dismiss();
            }));
            yield alert.onDidDismiss();
            subscription.unsubscribe();
        });
    }
    deleteAccount() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('Deleting account');
            const loading = yield this.loading.create({ message: this.translate.instant('alert.deleting-account') });
            yield loading.present();
            const success = yield this.userService.permanentlyDeleteAccount();
            yield loading.dismiss();
            if (success === true) {
                const alert = yield this.alertCtrl.create({ message: this.translate.instant('alert.delete-account-success') });
                yield alert.present();
                yield alert.onDidDismiss();
                yield this.userService.logout();
                location.reload();
            }
            else {
                const alert = yield this.alertCtrl.create({ message: this.translate.instant('alert.delete-account-failed') });
                yield alert.present();
                yield alert.onDidDismiss();
                return;
            }
        });
    }
    btnEnterTimeClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            const picker = yield this.pickerCtrl.create({
                columns: this.getEndOfDayColumns(),
                cssClass: 'time-picker',
                animated: false,
                buttons: [
                    {
                        text: this.translate.instant('alert.lbl-cancel'),
                        role: 'cancel'
                    },
                    {
                        text: this.translate.instant('alert.lbl-ok'),
                        handler: (value) => {
                            // console.log('HOUR', value.Hours.value);
                            // console.log('MINUTES', value.Minutes.value);
                            const hourString = Number(value.Hours.value) > 9 ?
                                value.Hours.value :
                                '0' + value.Hours.value;
                            const minutesString = Number(value.Minutes.value) > 9 ?
                                value.Minutes.value :
                                '0' + value.Minutes.value;
                            this.endOfDayTime = hourString + ':' + minutesString;
                            // console.log('END OF DAY TIME', this.endOfDayTime);
                            this.userService.getCurrentUser().then((user) => {
                                if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.EndOfDayTimeKey) !== this.endOfDayTime) {
                                    src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_5__.User.setConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_4__.UserConfig.EndOfDayTimeKey, this.endOfDayTime);
                                    this.userService.saveUser(user);
                                }
                            });
                        }
                    }
                ]
            });
            yield picker.present();
            this.setBackButtonPicker(picker);
            yield picker.onDidDismiss();
            this.resetBackButton();
        });
    }
    keepPortraitChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('keepverticalchanged Value', event);
            try {
                if (this.platform.is('capacitor')) {
                    if (event.detail.checked === true) {
                        // set to portrait
                        screen.orientation.lock('portrait');
                        this.userService.setKeepPortrait(true);
                        /*this.currentCloudSyncEnabled = false;
                        await this.userService.setCloudSync(false);*/
                    }
                    else {
                        screen.orientation.unlock();
                        this.userService.setKeepPortrait(false);
                        /*this.currentCloudSyncEnabled = true;
                        await this.userService.setCloudSync(true);*/
                    }
                }
            }
            catch (error) {
            }
        });
    }
    getColumnOptions1() {
        const options = [];
        for (const hourValue of this.hourChoices) {
            options.push({
                text: hourValue,
                value: Number(hourValue)
            });
        }
        return options;
    }
    getColumnOptions2() {
        const options = [];
        options.push({
            text: '00',
            value: Number(0)
        });
        return options;
    }
    getEndOfDayColumns() {
        const currentHour = Number(this.endOfDayTime.substring(0, 2));
        // console.log('CURRENT HOUR', currentHour);
        // const currentMinutes = Number(currentSelection.substring(3, 3 + 2));
        const HourIndex = this.hourChoices.findIndex(p => Number(p) === currentHour);
        // console.log('CURRENT HourIndex', HourIndex, this.hourChoices);
        const MinuteIndex = 0;
        const columns = [];
        columns.push({
            name: 'Hours',
            selectedIndex: HourIndex,
            options: this.getColumnOptions1(),
        });
        columns.push({
            name: 'Minutes',
            selectedIndex: MinuteIndex,
            options: this.getColumnOptions2()
        });
        // console.log('columns');
        return columns;
    }
    setBackButtonPicker(picker) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            yield picker.dismiss();
        }));
    }
    setBackButtonAlert(alert) {
        this.backButtonSubscription.unsubscribe();
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            yield alert.dismiss();
        }));
    }
    resetBackButton() {
        if (this.backButtonSubscription != null) {
            this.backButtonSubscription.unsubscribe();
        }
        this.backButtonSubscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {
            yield this.closePopup();
        }));
    }
};
UserSettingsComponent.ctorParameters = () => [
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_3__.IUserService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_11__.TranslateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.AlertController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.ModalController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.Platform },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.PickerController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_12__.LoadingController },
    { type: src_app_services_report_service__WEBPACK_IMPORTED_MODULE_7__.ReportService },
    { type: src_app_services_alert_service__WEBPACK_IMPORTED_MODULE_8__.AlertService }
];
UserSettingsComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_13__.Component)({
        selector: 'app-user-settings',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_user_settings_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_user_settings_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], UserSettingsComponent);



/***/ }),

/***/ 57817:
/*!*********************************************************!*\
  !*** ./src/app/components/welcome/welcome.component.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WelcomeComponent": () => (/* binding */ WelcomeComponent)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_welcome_component_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./welcome.component.html */ 53192);
/* harmony import */ var _welcome_component_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./welcome.component.scss */ 73907);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/models/Core/language.enum */ 76975);
/* harmony import */ var src_app_services_authentication_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! src/app/services/authentication.service */ 89270);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! src/app/interfaces/i-user-service */ 1109);
/* harmony import */ var src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! src/app/models/Core/user-config */ 74734);
/* harmony import */ var src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! src/app/models/Core/user */ 42535);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! src/app/services/modal.service */ 39853);












let WelcomeComponent = class WelcomeComponent {
    constructor(userService, modalController, auth, translate, alertCtrl, pickerCtrl, platform) {
        this.userService = userService;
        this.modalController = modalController;
        this.auth = auth;
        this.translate = translate;
        this.alertCtrl = alertCtrl;
        this.pickerCtrl = pickerCtrl;
        this.platform = platform;
        this.hourChoices = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11',
            '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];
        this.NoSyncValue = 'NoSync';
        this.SyncValue = 'Sync';
        this.currentLanguage = src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__.Language.English;
    }
    ngOnInit() {
    }
    ngAfterViewInit() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            const fireUser = yield this.auth.getUser();
            const user = yield this.userService.getUser(fireUser.uid);
            if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_6__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_5__.UserConfig.PreferedLanguageKey) === src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__.Language.French) {
                this.currentLanguage = src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__.Language.French;
            }
            else {
                this.currentLanguage = src_app_models_Core_language_enum__WEBPACK_IMPORTED_MODULE_2__.Language.English;
            }
            // this.syncCurrentValue = this.NoSyncValue; // No default value
            if (src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_6__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_5__.UserConfig.EndOfDayTimeKey) == null ||
                src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_6__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_5__.UserConfig.EndOfDayTimeKey).length === 0) {
                this.endOfDayTime = '04:00';
            }
            else {
                this.endOfDayTime = src_app_models_Core_user__WEBPACK_IMPORTED_MODULE_6__.User.getConfig(user, src_app_models_Core_user_config__WEBPACK_IMPORTED_MODULE_5__.UserConfig.EndOfDayTimeKey);
            }
        });
    }
    btnNextClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            // Validation
            if (this.syncCurrentValue == null) {
                alert(this.translate.instant('welcome.msg-privacy-mandatory'));
                return;
            }
            yield this.modalController.dismiss(null, null, src_app_services_modal_service__WEBPACK_IMPORTED_MODULE_7__.ModalService.ModalIds.Welcome);
        });
    }
    languageChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            yield this.userService.setLanguage(event.detail.value);
        });
    }
    privacyChanged(event) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            if (event.detail.value === 'NoSync') {
                this.currentCloudSyncEnabled = false;
                yield this.userService.setCloudSync(false);
            }
            else {
                this.currentCloudSyncEnabled = false;
                yield this.userService.setCloudSync(true);
            }
        });
    }
    btnHelpClick() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
            const alert = yield this.alertCtrl.create({
                message: this.translate.instant('menu.end-of-day-help'),
            });
            yield alert.present();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__awaiter)(this, void 0, void 0, function* () {
                yield alert.dismiss();
            }));
            yield alert.onDidDismiss();
            subscription.unsubscribe();
        });
    }
};
WelcomeComponent.ctorParameters = () => [
    { type: src_app_interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_4__.IUserService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.ModalController },
    { type: src_app_services_authentication_service__WEBPACK_IMPORTED_MODULE_3__.AuthenticationService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_10__.TranslateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.AlertController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.PickerController },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_9__.Platform }
];
WelcomeComponent = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_11__.Component)({
        selector: 'app-welcome',
        template: _F_GIT_hypertask_ionic2_hypertask_node_modules_ngtools_webpack_src_loaders_direct_resource_js_welcome_component_html__WEBPACK_IMPORTED_MODULE_0__["default"],
        styles: [_welcome_component_scss__WEBPACK_IMPORTED_MODULE_1__]
    })
], WelcomeComponent);



/***/ }),

/***/ 67116:
/*!**********************************************!*\
  !*** ./src/app/interfaces/i-api-provider.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IApiProvider": () => (/* binding */ IApiProvider)
/* harmony export */ });
class IApiProvider {
}


/***/ }),

/***/ 39296:
/*!********************************************************!*\
  !*** ./src/app/interfaces/i-authentication-service.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IAuthenticationService": () => (/* binding */ IAuthenticationService)
/* harmony export */ });
class IAuthenticationService {
}


/***/ }),

/***/ 17610:
/*!*********************************************************!*\
  !*** ./src/app/interfaces/i-data-sync-local-service.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IDataSyncLocalService": () => (/* binding */ IDataSyncLocalService)
/* harmony export */ });
class IDataSyncLocalService {
}


/***/ }),

/***/ 5295:
/*!*******************************************************!*\
  !*** ./src/app/interfaces/i-local-storage-service.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ILocalStorageService": () => (/* binding */ ILocalStorageService)
/* harmony export */ });
class ILocalStorageService {
    constructor() {
        this.Initialized = false;
    }
}
ILocalStorageService.currentlyUsed = false;


/***/ }),

/***/ 27388:
/*!****************************************!*\
  !*** ./src/app/interfaces/i-logger.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ILogger": () => (/* binding */ ILogger)
/* harmony export */ });
class ILogger {
}


/***/ }),

/***/ 1109:
/*!**********************************************!*\
  !*** ./src/app/interfaces/i-user-service.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IUserService": () => (/* binding */ IUserService)
/* harmony export */ });
class IUserService {
}


/***/ }),

/***/ 18670:
/*!*****************************************************!*\
  !*** ./src/app/models/Core/bug-report-type.enum.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BugReportType": () => (/* binding */ BugReportType)
/* harmony export */ });
var BugReportType;
(function (BugReportType) {
    BugReportType[BugReportType["Bug"] = 0] = "Bug";
    BugReportType[BugReportType["Survey"] = 1] = "Survey";
    BugReportType[BugReportType["Support"] = 2] = "Support";
})(BugReportType || (BugReportType = {}));


/***/ }),

/***/ 2908:
/*!**********************************************!*\
  !*** ./src/app/models/Core/calendar-task.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CalendarTask": () => (/* binding */ CalendarTask)
/* harmony export */ });
/* harmony import */ var _task_frequency_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./task-frequency.enum */ 90616);
/* harmony import */ var _result_type_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./result-type.enum */ 82869);
/* harmony import */ var _task_history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./task-history */ 42367);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/date-utils */ 85218);
/* harmony import */ var _DTO_dto_calendar_task__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../DTO/dto-calendar-task */ 76806);
/* harmony import */ var _Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Exceptions/InvalidCalendarTaskError */ 92623);
/* harmony import */ var _custom_stat_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./custom-stat.enum */ 91878);







class CalendarTask {
    constructor() {
        this.RequiredDays = [];
        this.Frequency = _task_frequency_enum__WEBPACK_IMPORTED_MODULE_0__.TaskFrequency.Daily;
        this.ResultType = _result_type_enum__WEBPACK_IMPORTED_MODULE_1__.ResultType.Binary;
        this.Void = false;
        this.Synced = false;
        this.Sent = false;
        this.IsShown = false;
        this.Histories = [];
        this.HistoriesMap = new Map();
        this.MinimumStartingMinusDay = 365;
        this.StatType = _custom_stat_enum__WEBPACK_IMPORTED_MODULE_6__.StatType.Regular;
    }
    static equals(task, task2) {
        // console.log('equals');
        const result = task2.Name === task.Name &&
            task2.RequiredDays === task.RequiredDays &&
            task2.ResultType === task.ResultType &&
            task2.Frequency === task.Frequency &&
            _shared_date_utils__WEBPACK_IMPORTED_MODULE_3__["default"].datesAreEqual(task2.AssignedDate, task.AssignedDate) &&
            task2.AbsolutePosition === task.AbsolutePosition &&
            task2.InitialGroupId === task.InitialGroupId &&
            task2.NotificationId === task.NotificationId &&
            task2.NotificationTime === task.NotificationTime &&
            task2.SkipUntil === task.SkipUntil;
        /*if (result === false) {
          console.log('NOT EQUAL', task, task2);
        }*/
        return result;
    }
    static fromDTO(dto) {
        const task = new CalendarTask();
        task.Name = dto.Name;
        task.RequiredDays = dto.RequiredDays;
        task.Frequency = dto.Frequency;
        task.AbsolutePosition = dto.AbsolutePosition;
        task.InitialAbsolutePosition = dto.InitialAbsolutePosition;
        if (task.InitialAbsolutePosition === 500) { // TODO : unfortunate patch that shouldn't be necessary but need to dig why it's 500
            task.InitialAbsolutePosition = task.AbsolutePosition;
        }
        task.ResultType = dto.ResultType;
        task.UserId = dto.UserId;
        task.CalendarTaskId = dto.CalendarTaskId;
        task.Void = dto.Void;
        task.Synced = dto.Synced;
        task.Sent = dto.Sent;
        task.StatType = dto.StatType;
        task.GroupId = dto.GroupId;
        task.InitialGroupId = dto.GroupId; // TODO : Not sure
        task.NotificationId = dto.NotificationId;
        task.NotificationTime = dto.NotificationTime;
        task.InsertDate = dto.InsertDate == null ? null : new Date(dto.InsertDate);
        task.UpdateDate = dto.UpdateDate == null ? null : new Date(dto.UpdateDate);
        task.SkipUntil = dto.SkipUntil == null ? null : new Date(dto.SkipUntil);
        task.AssignedDate = dto.AssignedDate == null ? null : new Date(dto.AssignedDate);
        task.Histories = dto.Histories.map(p => _task_history__WEBPACK_IMPORTED_MODULE_2__.TaskHistory.fromDTO(p));
        return task;
    }
    toDTO() {
        const task = new _DTO_dto_calendar_task__WEBPACK_IMPORTED_MODULE_4__.DTOCalendarTask();
        task.Name = this.Name;
        task.RequiredDays = this.RequiredDays;
        task.Frequency = this.Frequency;
        task.AbsolutePosition = this.AbsolutePosition;
        task.InitialAbsolutePosition = this.InitialAbsolutePosition;
        task.ResultType = this.ResultType;
        task.UserId = this.UserId;
        task.CalendarTaskId = this.CalendarTaskId;
        task.NotificationId = this.NotificationId;
        task.NotificationTime = this.NotificationTime;
        task.Void = this.Void;
        task.Synced = this.Synced;
        task.Sent = this.Sent;
        task.StatType = this.StatType;
        task.GroupId = this.GroupId;
        task.InsertDate = this.InsertDate == null ? null : this.InsertDate.toISOString();
        task.UpdateDate = this.UpdateDate == null ? null : this.UpdateDate.toISOString();
        task.SkipUntil = this.SkipUntil == null ? null : this.SkipUntil.toISOString();
        task.AssignedDate = this.AssignedDate == null ? null : this.AssignedDate.toISOString();
        task.Histories = this.Histories.map(p => p.toDTO());
        return task;
    }
    GetDoneHistoriesNoVoid(workDate) {
        // console.log('GetDoneHistoriesNoVoid', workDate);
        if (this.HistoriesMap.size > 0) {
            const result = this.HistoriesMap.get(workDate.toISOString());
            if (result != null) {
                return result;
            }
            else {
                return [];
            }
        }
        else {
            return [];
        }
    }
    isBinary() {
        return this.ResultType === _result_type_enum__WEBPACK_IMPORTED_MODULE_1__.ResultType.Binary;
    }
    isDecimal() {
        return this.ResultType === _result_type_enum__WEBPACK_IMPORTED_MODULE_1__.ResultType.Decimal;
    }
    isTime() {
        return this.ResultType === _result_type_enum__WEBPACK_IMPORTED_MODULE_1__.ResultType.TimeOfDay;
    }
    isDuration() {
        return this.ResultType === _result_type_enum__WEBPACK_IMPORTED_MODULE_1__.ResultType.Duration;
    }
    validate(translate) {
        if (this.Name == null || this.Name.length === 0 || this.Name.length > 200) {
            throw new _Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_5__.InvalidCalendarTaskError(translate.instant('calendar-task.msg-task-name-invalid'));
        }
        if (this.AbsolutePosition < 0 || this.AbsolutePosition > 500) {
            throw new _Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_5__.InvalidCalendarTaskError(translate.instant('calendar-task.msg-invalid-task-position'));
        }
        if ((this.Frequency === _task_frequency_enum__WEBPACK_IMPORTED_MODULE_0__.TaskFrequency.Once ||
            this.Frequency === _task_frequency_enum__WEBPACK_IMPORTED_MODULE_0__.TaskFrequency.UntilDone) &&
            this.AssignedDate == null) {
            throw new _Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_5__.InvalidCalendarTaskError(translate.instant('calendar-task.msg-required-assigned-date'));
        }
        if (this.Frequency === _task_frequency_enum__WEBPACK_IMPORTED_MODULE_0__.TaskFrequency.Daily &&
            this.RequiredDays.length === 0) {
            throw new _Exceptions_InvalidCalendarTaskError__WEBPACK_IMPORTED_MODULE_5__.InvalidCalendarTaskError(translate.instant('calendar-task.msg-required-days-required'));
        }
    }
}


/***/ }),

/***/ 91878:
/*!*************************************************!*\
  !*** ./src/app/models/Core/custom-stat.enum.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StatType": () => (/* binding */ StatType)
/* harmony export */ });
var StatType;
(function (StatType) {
    StatType[StatType["Regular"] = 0] = "Regular";
    StatType[StatType["TimeUp"] = 1] = "TimeUp";
    StatType[StatType["TimeSleep"] = 2] = "TimeSleep";
    StatType[StatType["TimeNonWaterStart"] = 3] = "TimeNonWaterStart";
    StatType[StatType["TimeNonWaterStop"] = 4] = "TimeNonWaterStop";
    StatType[StatType["TimeEatStart"] = 5] = "TimeEatStart";
    StatType[StatType["TimeEatStop"] = 6] = "TimeEatStop";
})(StatType || (StatType = {}));


/***/ }),

/***/ 64591:
/*!*************************************************!*\
  !*** ./src/app/models/Core/day-of-week.enum.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DayOfWeek": () => (/* binding */ DayOfWeek)
/* harmony export */ });
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek[DayOfWeek["Sunday"] = 0] = "Sunday";
    DayOfWeek[DayOfWeek["Monday"] = 1] = "Monday";
    DayOfWeek[DayOfWeek["Tuesday"] = 2] = "Tuesday";
    DayOfWeek[DayOfWeek["Wednesday"] = 3] = "Wednesday";
    DayOfWeek[DayOfWeek["Thursday"] = 4] = "Thursday";
    DayOfWeek[DayOfWeek["Friday"] = 5] = "Friday";
    DayOfWeek[DayOfWeek["Saturday"] = 6] = "Saturday";
})(DayOfWeek || (DayOfWeek = {}));


/***/ }),

/***/ 76975:
/*!**********************************************!*\
  !*** ./src/app/models/Core/language.enum.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Language": () => (/* binding */ Language)
/* harmony export */ });
var Language;
(function (Language) {
    Language[Language["English"] = 0] = "English";
    Language[Language["French"] = 1] = "French";
})(Language || (Language = {}));


/***/ }),

/***/ 94958:
/*!*********************************************!*\
  !*** ./src/app/models/Core/release-note.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReleaseNote": () => (/* binding */ ReleaseNote)
/* harmony export */ });
class ReleaseNote {
    constructor() {
        this.BugFixesEn = [];
        this.FeaturesEn = [];
        this.BugFixesFr = [];
        this.FeaturesFr = [];
    }
}


/***/ }),

/***/ 82869:
/*!*************************************************!*\
  !*** ./src/app/models/Core/result-type.enum.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResultType": () => (/* binding */ ResultType)
/* harmony export */ });
var ResultType;
(function (ResultType) {
    ResultType[ResultType["Binary"] = 0] = "Binary";
    ResultType[ResultType["Decimal"] = 1] = "Decimal";
    ResultType[ResultType["TimeOfDay"] = 2] = "TimeOfDay";
    ResultType[ResultType["Duration"] = 3] = "Duration";
})(ResultType || (ResultType = {}));


/***/ }),

/***/ 73990:
/*!************************************************!*\
  !*** ./src/app/models/Core/selectable-task.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectableTask": () => (/* binding */ SelectableTask),
/* harmony export */   "AdditionnalTask": () => (/* binding */ AdditionnalTask)
/* harmony export */ });
/* harmony import */ var _day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./day-of-week.enum */ 64591);
/* harmony import */ var _task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./task-frequency.enum */ 90616);
/* harmony import */ var _result_type_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./result-type.enum */ 82869);



class SelectableTask {
    constructor(name, description, frequency, resultType, groupName) {
        this.RequiredDays = [];
        this.Frequency = _task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily;
        this.ResultType = _result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary;
        this.Name = name;
        this.Description = description;
        this.Frequency = frequency;
        this.ResultType = resultType;
        this.RequiredDays.push(_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Monday);
        this.RequiredDays.push(_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Tuesday);
        this.RequiredDays.push(_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Wednesday);
        this.RequiredDays.push(_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Thursday);
        this.RequiredDays.push(_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Friday);
        this.RequiredDays.push(_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Saturday);
        this.RequiredDays.push(_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Sunday);
        this.GroupName = groupName;
    }
}
class AdditionnalTask {
}


/***/ }),

/***/ 90616:
/*!****************************************************!*\
  !*** ./src/app/models/Core/task-frequency.enum.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskFrequency": () => (/* binding */ TaskFrequency)
/* harmony export */ });
var TaskFrequency;
(function (TaskFrequency) {
    TaskFrequency[TaskFrequency["Daily"] = 0] = "Daily";
    TaskFrequency[TaskFrequency["Weekly"] = 1] = "Weekly";
    TaskFrequency[TaskFrequency["Monthly"] = 2] = "Monthly";
    TaskFrequency[TaskFrequency["BiWeekly"] = 3] = "BiWeekly";
    TaskFrequency[TaskFrequency["Custom"] = 4] = "Custom";
    TaskFrequency[TaskFrequency["Once"] = 5] = "Once";
    TaskFrequency[TaskFrequency["UntilDone"] = 6] = "UntilDone";
})(TaskFrequency || (TaskFrequency = {}));


/***/ }),

/***/ 33890:
/*!*******************************************!*\
  !*** ./src/app/models/Core/task-group.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskGroup": () => (/* binding */ TaskGroup)
/* harmony export */ });
/* harmony import */ var _DTO_dto_task_group__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../DTO/dto-task-group */ 4158);
/* harmony import */ var _Exceptions_InvalidTaskGroupError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Exceptions/InvalidTaskGroupError */ 85613);


class TaskGroup {
    constructor() {
        this.ColorHex = '#D1D1D1';
        this.Void = false;
        this.Tasks = []; // Put this into a viewModel ?
        this.isVisible = true; // Put this into viewModel?
        this.isExpanded = false;
        this.Synced = false;
        this.Sent = false;
        this.RecurringDefault = false;
    }
    static fromDTO(dto) {
        const group = new TaskGroup();
        group.Name = dto.Name;
        group.ColorHex = dto.ColorHex;
        group.GroupId = dto.GroupId;
        group.InsertDate = dto.InsertDate == null ? null : new Date(dto.InsertDate);
        group.Name = dto.Name;
        group.Position = dto.Position;
        group.InitialPosition = dto.InitialPosition;
        if (group.InitialPosition == null) {
            group.InitialPosition = group.Position;
        }
        group.UpdateDate = dto.UpdateDate == null ? null : new Date(dto.UpdateDate);
        group.UserId = dto.UserId;
        group.Void = dto.Void;
        group.Synced = dto.Synced;
        group.Sent = dto.Sent;
        group.RecurringDefault = dto.RecurringDefault;
        return group;
    }
    toDTO() {
        const group = new _DTO_dto_task_group__WEBPACK_IMPORTED_MODULE_0__.DTOTaskGroup();
        group.Name = this.Name;
        group.ColorHex = this.ColorHex;
        group.GroupId = this.GroupId;
        group.InsertDate = this.InsertDate == null ? null : new Date(this.InsertDate);
        group.Name = this.Name;
        group.Position = this.Position;
        group.InitialPosition = this.InitialPosition;
        if (group.InitialPosition == null) {
            group.InitialPosition = group.Position;
        }
        group.UpdateDate = this.UpdateDate == null ? null : new Date(this.UpdateDate);
        group.UserId = this.UserId;
        group.Void = this.Void;
        group.Synced = this.Synced;
        group.Sent = this.Sent;
        group.RecurringDefault = this.RecurringDefault;
        return group;
    }
    validate(translate) {
        if (this.Name == null || this.Name.length === 0 || this.Name.length > 200) {
            throw new _Exceptions_InvalidTaskGroupError__WEBPACK_IMPORTED_MODULE_1__.InvalidTaskGroupError(translate.instant('group-create.msg-group-name-invalid'));
        }
    }
}


/***/ }),

/***/ 42367:
/*!*********************************************!*\
  !*** ./src/app/models/Core/task-history.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskHistory": () => (/* binding */ TaskHistory)
/* harmony export */ });
/* harmony import */ var _DTO_dto_task_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../DTO/dto-task-history */ 20800);
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! src/app/shared/number-utils */ 26173);



class TaskHistory {
    constructor() {
        this.Void = false;
        this.Synced = false;
        this.Sent = false;
    }
    static createNew(taskResult, taskCompleted, taskSkipped, doneDate, workDate, calendarTaskId, userId) {
        const calendarTaskHistory = new TaskHistory();
        calendarTaskHistory.InsertDate = new Date();
        calendarTaskHistory.DoneDate = doneDate;
        calendarTaskHistory.DoneWorkDate = workDate;
        calendarTaskHistory.TaskDone = taskCompleted;
        calendarTaskHistory.TaskSkipped = taskSkipped;
        calendarTaskHistory.TaskResult = taskResult;
        calendarTaskHistory.CalendarTaskId = calendarTaskId;
        calendarTaskHistory.UserId = userId;
        calendarTaskHistory.TaskHistoryId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getRandomId();
        console.log('CREATENEW : ', calendarTaskHistory);
        return calendarTaskHistory;
    }
    static fromDTO(dto) {
        const history = new TaskHistory();
        history.CalendarTaskId = dto.CalendarTaskId;
        history.TaskHistoryId = dto.TaskHistoryId;
        history.TaskDone = dto.TaskDone;
        history.UserId = dto.UserId;
        history.TaskSkipped = dto.TaskSkipped;
        history.TaskResult = dto.TaskResult;
        history.DoneDate = dto.DoneDate == null ? null : new Date(dto.DoneDate);
        history.Void = dto.Void;
        history.InsertDate = dto.InsertDate == null ? null : new Date(dto.InsertDate);
        history.UpdateDate = dto.UpdateDate == null ? null : new Date(dto.UpdateDate);
        history.VoidDate = dto.VoidDate == null ? null : new Date(dto.VoidDate);
        history.Synced = dto.Synced;
        history.Sent = dto.Sent;
        history.Comment = dto.Comment;
        //                                                this should not be necessary, need to cleanup database
        history.DoneWorkDate = dto.DoneWorkDate == null ? src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].RemoveHours(new Date(dto.InsertDate)) : new Date(dto.DoneWorkDate);
        return history;
    }
    toDTO() {
        const history = new _DTO_dto_task_history__WEBPACK_IMPORTED_MODULE_0__.DTOTaskHistory();
        history.CalendarTaskId = this.CalendarTaskId;
        history.TaskHistoryId = this.TaskHistoryId;
        history.TaskDone = this.TaskDone;
        history.UserId = this.UserId;
        history.TaskSkipped = this.TaskSkipped;
        history.TaskResult = this.TaskResult;
        history.DoneDate = this.DoneDate == null ? null : this.DoneDate.toISOString();
        history.Void = this.Void;
        history.InsertDate = this.InsertDate == null ? null : this.InsertDate.toISOString();
        history.UpdateDate = this.UpdateDate == null ? null : this.UpdateDate.toISOString();
        history.VoidDate = this.VoidDate == null ? null : this.VoidDate.toISOString();
        history.Synced = this.Synced;
        history.Sent = this.Sent;
        history.Comment = this.Comment;
        history.DoneWorkDate = this.DoneWorkDate == null ? null : this.DoneWorkDate.toISOString();
        return history;
    }
    getDurationString() {
        if (this.TaskDone) {
            if (typeof (this.TaskResult) === 'number') {
                return src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].getDurationString(this.TaskResult);
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    }
    getDurationStringHHmm() {
        if (this.TaskDone) {
            let minutes = 0;
            if (typeof (this.TaskResult) === 'number') {
                minutes = Math.round(this.TaskResult / 60);
                const hours = Math.floor(minutes / 60);
                let result = hours < 10 ? '0' + String(hours) : String(hours);
                minutes = minutes - (60 * hours);
                result += ':';
                result += minutes < 10 ? '0' + String(minutes) : String(minutes);
                /*result += 'm';*/
                return result;
            }
            else {
                return '04:00';
            }
        }
        else {
            return '04:00';
        }
    }
}


/***/ }),

/***/ 92338:
/*!******************************************!*\
  !*** ./src/app/models/Core/task-stat.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskStats": () => (/* binding */ TaskStats),
/* harmony export */   "TaskStatRequest": () => (/* binding */ TaskStatRequest),
/* harmony export */   "StatOperation": () => (/* binding */ StatOperation)
/* harmony export */ });
class TaskStats {
    constructor() {
        this.results = [];
        this.doneDays = [];
        this.skippedDays = [];
        this.MinusWeeksArray = [];
    }
}
class TaskStatRequest {
}
var StatOperation;
(function (StatOperation) {
    StatOperation[StatOperation["addition"] = 0] = "addition";
})(StatOperation || (StatOperation = {}));


/***/ }),

/***/ 85153:
/*!*******************************************!*\
  !*** ./src/app/models/Core/task-timer.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskTimer": () => (/* binding */ TaskTimer)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/shared/number-utils */ 26173);
/* harmony import */ var _DTO_dto_timer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DTO/dto-timer */ 79657);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ 81356);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 14001);
var TaskTimer_1;





let TaskTimer = TaskTimer_1 = class TaskTimer {
    constructor(calendarTaskId, currentWorkDate) {
        this.currentTimerSeconds = 0;
        this.deltaDelay = 1;
        this.isPaused = false;
        this.isDone = false;
        this.isStarted = false;
        this.isVoid = false;
        this.TimerId = src_app_shared_number_utils__WEBPACK_IMPORTED_MODULE_0__["default"].getRandomId();
        this.CalendarTaskId = calendarTaskId;
        this.TimerDate = currentWorkDate;
        this.isKeepLongTimer = false;
    }
    static fromDTO(dto) {
        const timerDate = dto.TimerDate == null ? null : new Date(dto.TimerDate);
        const timer = new TaskTimer_1(dto.CalendarTaskId, timerDate);
        timer.TimerDate = dto.TimerDate == null ? null : new Date(dto.TimerDate);
        timer.StartDate = dto.StartDate == null ? null : new Date(dto.StartDate);
        timer.TimerId = dto.TimerId;
        timer.currentTimerSeconds = dto.currentTimerSeconds;
        timer.deltaDelay = dto.deltaDelay;
        timer.isDone = dto.isDone;
        timer.isPaused = dto.isPaused;
        timer.isVoid = dto.isVoid;
        timer.isStarted = true; // We only save started timers
        timer.isKeepLongTimer = dto.isKeepLongTimer;
        return timer;
    }
    ngOnDestroy() {
        this.unsubscribeTimerIfExists();
    }
    toDTO() {
        const task = new _DTO_dto_timer__WEBPACK_IMPORTED_MODULE_1__.DTOTaskTimer();
        task.CalendarTaskId = this.CalendarTaskId;
        task.TimerDate = this.TimerDate == null ? null : this.TimerDate.toISOString();
        task.StartDate = this.StartDate == null ? null : this.StartDate.toISOString();
        task.TimerId = this.TimerId;
        task.currentTimerSeconds = this.currentTimerSeconds;
        task.deltaDelay = this.deltaDelay;
        task.isDone = this.isDone;
        task.isVoid = this.isVoid;
        task.isPaused = this.isPaused;
        task.isKeepLongTimer = this.isKeepLongTimer;
        return task;
    }
    start() {
        this.isStarted = true;
        this.isPaused = false;
        this.timerSubscription = this.startJsTimer();
    }
    resume() {
        // console.log('RESUMING', this.currentTimerSeconds);
        this.timerSubscription = this.startJsTimer();
        this.isPaused = false;
        this.isDone = false;
    }
    pause() {
        this.unsubscribeTimerIfExists();
        this.isPaused = true;
    }
    cancel() {
        this.unsubscribeTimerIfExists();
        this.isPaused = true;
        this.isDone = true;
        this.isVoid = true;
        this.currentTimerSeconds = 0;
    }
    complete() {
        this.unsubscribeTimerIfExists();
        this.isDone = true;
        this.isPaused = true;
    }
    isInitialized() {
        return this.currentTimerSeconds !== 0 ||
            this.isDone !== false ||
            this.isPaused !== false;
    }
    startJsTimer() {
        this.StartDate = new Date();
        // console.log('new start date, initial seconds', this.StartDate, this.currentTimerSeconds);
        const initialTimerSeconds = this.currentTimerSeconds > 0 ?
            this.currentTimerSeconds :
            0;
        // console.log('INITIAL TIMER SECONDS ', initialTimerSeconds);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_2__.timer)(1000, 1000).subscribe(ellapsedCycles => {
            const currentTimeStamp = Math.floor(Date.now() / 1000);
            const startTimeStamp = Math.floor(this.StartDate.getTime() / 1000);
            const timeStampDifferenceSeconds = currentTimeStamp - startTimeStamp + initialTimerSeconds;
            const delaySeconds = Math.abs(timeStampDifferenceSeconds - this.currentTimerSeconds);
            // console.log('currentTimestamp = ', currentTimeStamp);
            // console.log('startTimestamp = ', startTimeStamp);
            // console.log('timeStampDifferenceSeconds = ', timeStampDifferenceSeconds);
            // console.log('difference delay seconds : ', delaySeconds);
            if (delaySeconds > 1) {
                // console.log('delay > 1, adjusting : ', timeStampDifferenceSeconds);
                this.currentTimerSeconds = timeStampDifferenceSeconds;
            }
            else {
                this.currentTimerSeconds++;
                // console.log('ellapsedCylces : ', ellapsedCycles, this.currentTimerSeconds);
            }
        });
    }
    unsubscribeTimerIfExists() {
        if (this.timerSubscription != null) {
            this.timerSubscription.unsubscribe();
        }
    }
};
TaskTimer.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject, args: [String,] }] },
    { type: Date, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_3__.Inject, args: [Date,] }] }
];
TaskTimer = TaskTimer_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)()
], TaskTimer);



/***/ }),

/***/ 74734:
/*!********************************************!*\
  !*** ./src/app/models/Core/user-config.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UserConfig": () => (/* binding */ UserConfig)
/* harmony export */ });
/* harmony import */ var _language_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./language.enum */ 76975);

class UserConfig {
    constructor() {
        this.Configs = new Map();
        this.Configs.set(UserConfig.PreferedLanguageKey, _language_enum__WEBPACK_IMPORTED_MODULE_0__.Language.English);
        this.Configs.set(UserConfig.EndOfDayTimeKey, '04:00');
        this.Configs.set(UserConfig.EnableCloudSyncKey, false);
        this.Configs.set(UserConfig.AutoSkipAfter2DaysId, true);
    }
    static getHourValues(config) {
        // TODO: This needs to be cached but also reloaded on change
        const firstHour = Number(config.Configs.get(UserConfig.EndOfDayTimeKey).substring(0, 2));
        const result = [];
        for (let i = 0; i < 24; i++) {
            const hourIterator = (firstHour + i) % 24;
            result.push(hourIterator);
        }
        return result;
    }
    static getMinutesValues() {
        return [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];
    }
}
UserConfig.PreferedLanguageKey = 'PreferedLanguage';
UserConfig.DefaultNonRecurringAfterTaskNameKey = 'DefaultNonRecurringAfterTaskNameKey';
UserConfig.DefaultRecurringAfterTaskNameKey = 'DefaultRecurringAfterTaskNameKey';
UserConfig.EndOfDayTimeKey = 'EndOfDayTime';
UserConfig.EnableCloudSyncKey = 'EnableCloudSync';
UserConfig.DefaultRecurringGroupId = 'DefaultRecurringGroupId';
UserConfig.DefaultNonRecurringGroupId = 'DefaultNonRecurringGroupId';
UserConfig.AutoSkipAfter2DaysId = 'AutoSkipAfter2Days';
UserConfig.AutoSkipAfter2DaysLastSkipDateId = 'AutoSkipAfter2DaysLastSkipDateId';
UserConfig.KeepPortrait = 'KeepPortrait';


/***/ }),

/***/ 42535:
/*!*************************************!*\
  !*** ./src/app/models/Core/user.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "User": () => (/* binding */ User)
/* harmony export */ });
/* harmony import */ var src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! src/app/shared/date-utils */ 85218);
/* harmony import */ var _user_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./user-config */ 74734);


class User {
    constructor() {
        this.Config = new _user_config__WEBPACK_IMPORTED_MODULE_1__.UserConfig();
        this.LastActivityDate = src_app_shared_date_utils__WEBPACK_IMPORTED_MODULE_0__["default"].YearAgo();
        this.IsNew = false;
    }
    static getConfig(user, key) {
        // console.log('getconfig,', user);
        return user.Config.Configs.get(key);
    }
    static setConfig(user, key, value) {
        // console.log('setConfig,', user);
        return user.Config.Configs.set(key, value);
    }
}


/***/ }),

/***/ 19664:
/*!**********************************************!*\
  !*** ./src/app/models/DTO/dto-bug-report.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTOBugReport": () => (/* binding */ DTOBugReport)
/* harmony export */ });
class DTOBugReport {
}


/***/ }),

/***/ 76806:
/*!*************************************************!*\
  !*** ./src/app/models/DTO/dto-calendar-task.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTOCalendarTask": () => (/* binding */ DTOCalendarTask)
/* harmony export */ });
/* harmony import */ var _Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Core/task-frequency.enum */ 90616);
/* harmony import */ var _Core_result_type_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Core/result-type.enum */ 82869);
/* harmony import */ var _dto_task_history__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dto-task-history */ 20800);
/* harmony import */ var _Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Core/custom-stat.enum */ 91878);




class DTOCalendarTask {
    constructor() {
        this.RequiredDays = [];
        this.Frequency = _Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_0__.TaskFrequency.Daily;
        this.ResultType = _Core_result_type_enum__WEBPACK_IMPORTED_MODULE_1__.ResultType.Binary;
        this.Positive = true;
        this.Void = false;
        this.Synced = false;
        this.Sent = false;
        this.Histories = [];
        this.StatType = _Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_3__.StatType.Regular;
    }
    static fromAny(obj) {
        const newTask = new DTOCalendarTask();
        newTask.AbsolutePosition = obj.AbsolutePosition;
        newTask.CalendarTaskId = obj.CalendarTaskId;
        newTask.Description = obj.Description;
        newTask.FontAwesomeIcon = obj.FontAwesomeIcon;
        newTask.Frequency = obj.Frequency;
        newTask.Histories = obj.Histories;
        newTask.InitialAbsolutePosition = obj.InitialAbsolutePosition;
        newTask.MinDuration = obj.MinDuration;
        newTask.Name = obj.Name;
        newTask.Positive = obj.Positive;
        newTask.RequiredDays = obj.RequiredDays;
        newTask.ResultType = obj.ResultType;
        newTask.Sent = obj.Sent;
        newTask.Synced = obj.Synced;
        newTask.UserId = obj.UserId;
        newTask.Void = obj.Void;
        newTask.AssignedDate = obj.AssignedDate;
        newTask.StatType = obj.StatType;
        newTask.InsertDate = obj.InsertDate;
        newTask.UpdateDate = obj.UpdateDate;
        newTask.SkipUntil = obj.SkipUntil;
        newTask.GroupId = obj.GroupId;
        newTask.NotificationId = obj.NotificationId;
        newTask.NotificationTime = obj.NotificationTime;
        newTask.Histories = obj.Histories.map(p => _dto_task_history__WEBPACK_IMPORTED_MODULE_2__.DTOTaskHistory.fromAny(p));
        return newTask;
    }
    clone() {
        return DTOCalendarTask.fromAny(this);
    }
}


/***/ }),

/***/ 66389:
/*!*************************************************************!*\
  !*** ./src/app/models/DTO/dto-get-calendar-task-request.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTOGetCalendarTaskRequest": () => (/* binding */ DTOGetCalendarTaskRequest)
/* harmony export */ });
class DTOGetCalendarTaskRequest {
}


/***/ }),

/***/ 4158:
/*!**********************************************!*\
  !*** ./src/app/models/DTO/dto-task-group.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTOTaskGroup": () => (/* binding */ DTOTaskGroup)
/* harmony export */ });
class DTOTaskGroup {
    constructor() {
        this.Synced = false;
        this.Sent = false;
        this.RecurringDefault = false;
    }
    static fromAny(obj) {
        const group = new DTOTaskGroup();
        group.ColorHex = obj.ColorHex;
        group.GroupId = obj.GroupId;
        group.InsertDate = obj.InsertDate;
        group.Name = obj.Name;
        group.Position = obj.Position;
        group.InitialPosition = obj.InitialPosition;
        if (group.InitialPosition == null) {
            group.InitialPosition = group.Position;
        }
        group.UpdateDate = obj.UpdateDate;
        group.UserId = obj.UserId;
        group.Void = obj.Void;
        group.VoidDate = obj.VoidDate;
        group.Synced = obj.Synced;
        group.Sent = obj.Sent;
        group.RecurringDefault = obj.RecurringDefault;
        return group;
    }
}


/***/ }),

/***/ 20800:
/*!************************************************!*\
  !*** ./src/app/models/DTO/dto-task-history.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTOTaskHistory": () => (/* binding */ DTOTaskHistory)
/* harmony export */ });
class DTOTaskHistory {
    constructor() {
        this.Void = false;
        this.Synced = false;
        this.Sent = false;
    }
    static fromAny(obj) {
        const newHistory = new DTOTaskHistory();
        newHistory.CalendarTaskId = obj.CalendarTaskId;
        newHistory.DoneDate = obj.DoneDate;
        newHistory.InsertDate = obj.InsertDate;
        newHistory.Sent = obj.Sent;
        newHistory.Synced = obj.Synced;
        newHistory.TaskDone = obj.TaskDone;
        newHistory.TaskHistoryId = obj.TaskHistoryId;
        newHistory.TaskResult = obj.TaskResult;
        newHistory.TaskSkipped = obj.TaskSkipped;
        newHistory.UpdateDate = obj.UpdateDate;
        newHistory.UserId = obj.UserId;
        newHistory.Void = obj.Void;
        newHistory.VoidDate = obj.VoidDate;
        newHistory.Comment = obj.Comment;
        newHistory.DoneWorkDate = obj.DoneWorkDate; // TODO: Not sure about this
        return newHistory;
    }
}


/***/ }),

/***/ 79657:
/*!*****************************************!*\
  !*** ./src/app/models/DTO/dto-timer.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTOTaskTimer": () => (/* binding */ DTOTaskTimer)
/* harmony export */ });
class DTOTaskTimer {
}


/***/ }),

/***/ 62087:
/*!***********************************************!*\
  !*** ./src/app/models/DTO/dto-user-config.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTOUserConfig": () => (/* binding */ DTOUserConfig),
/* harmony export */   "KeyValuePair": () => (/* binding */ KeyValuePair)
/* harmony export */ });
/* harmony import */ var _Core_user_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Core/user-config */ 74734);

class DTOUserConfig {
    constructor() {
        this.Configs = [];
    }
    static FromUserConfig(userConfig) {
        const dto = new DTOUserConfig();
        for (const config of userConfig.Configs) {
            const keyValuePair = new KeyValuePair();
            keyValuePair.key = config[0];
            keyValuePair.value = config[1];
            dto.Configs.push(keyValuePair);
        }
        return dto;
    }
    static ToUserConfig(userConfig) {
        const newUser = new _Core_user_config__WEBPACK_IMPORTED_MODULE_0__.UserConfig();
        for (const keyValuePair of userConfig.Configs) {
            newUser.Configs.set(keyValuePair.key, keyValuePair.value);
        }
        return newUser;
    }
}
class KeyValuePair {
}


/***/ }),

/***/ 69449:
/*!****************************************!*\
  !*** ./src/app/models/DTO/dto-user.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DTOUser": () => (/* binding */ DTOUser)
/* harmony export */ });
/* harmony import */ var _dto_user_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dto-user-config */ 62087);
/* harmony import */ var _Core_user__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Core/user */ 42535);


class DTOUser {
    constructor() {
        this.Config = new _dto_user_config__WEBPACK_IMPORTED_MODULE_0__.DTOUserConfig();
    }
    static FromUser(user) {
        const newUser = new DTOUser();
        newUser.Config = _dto_user_config__WEBPACK_IMPORTED_MODULE_0__.DTOUserConfig.FromUserConfig(user.Config);
        newUser.Id = user.Id;
        newUser.UserId = user.UserId;
        newUser.LastActivityDate = user.LastActivityDate == null ? null : user.LastActivityDate.toISOString();
        return newUser;
    }
    static ToUser(user) {
        if (user == null) {
            return new _Core_user__WEBPACK_IMPORTED_MODULE_1__.User();
        }
        const newUser = new _Core_user__WEBPACK_IMPORTED_MODULE_1__.User();
        newUser.Config = _dto_user_config__WEBPACK_IMPORTED_MODULE_0__.DTOUserConfig.ToUserConfig(user.Config);
        newUser.Id = user.Id;
        newUser.LastActivityDate = user.LastActivityDate == null ? null : new Date(user.LastActivityDate);
        newUser.UserId = user.UserId;
        return newUser;
    }
}


/***/ }),

/***/ 59032:
/*!***************************************************!*\
  !*** ./src/app/models/Exceptions/ApiHttpError.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiHttpError": () => (/* binding */ ApiHttpError)
/* harmony export */ });
class ApiHttpError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = ApiHttpError.name;
        Object.setPrototypeOf(this, ApiHttpError.prototype);
    }
}


/***/ }),

/***/ 83285:
/*!****************************************************************!*\
  !*** ./src/app/models/Exceptions/CalendarTaskNotFoundError.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CalendarTaskNotFoundError": () => (/* binding */ CalendarTaskNotFoundError)
/* harmony export */ });
class CalendarTaskNotFoundError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = CalendarTaskNotFoundError.name;
        Object.setPrototypeOf(this, CalendarTaskNotFoundError.prototype);
    }
}


/***/ }),

/***/ 36953:
/*!**********************************************************!*\
  !*** ./src/app/models/Exceptions/DatabaseLockedError.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DatabaseLockedError": () => (/* binding */ DatabaseLockedError)
/* harmony export */ });
class DatabaseLockedError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 500;
        this.handled = false;
        this.name = DatabaseLockedError.name;
        Object.setPrototypeOf(this, DatabaseLockedError.prototype);
    }
}


/***/ }),

/***/ 82067:
/*!*********************************************************!*\
  !*** ./src/app/models/Exceptions/GroupNotFoundError.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroupNotFoundError": () => (/* binding */ GroupNotFoundError)
/* harmony export */ });
class GroupNotFoundError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = GroupNotFoundError.name;
        Object.setPrototypeOf(this, GroupNotFoundError.prototype);
    }
}


/***/ }),

/***/ 92623:
/*!***************************************************************!*\
  !*** ./src/app/models/Exceptions/InvalidCalendarTaskError.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InvalidCalendarTaskError": () => (/* binding */ InvalidCalendarTaskError)
/* harmony export */ });
class InvalidCalendarTaskError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = InvalidCalendarTaskError.name;
        Object.setPrototypeOf(this, InvalidCalendarTaskError.prototype);
    }
}


/***/ }),

/***/ 85613:
/*!************************************************************!*\
  !*** ./src/app/models/Exceptions/InvalidTaskGroupError.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InvalidTaskGroupError": () => (/* binding */ InvalidTaskGroupError)
/* harmony export */ });
class InvalidTaskGroupError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = InvalidTaskGroupError.name;
        Object.setPrototypeOf(this, InvalidTaskGroupError.prototype);
    }
}


/***/ }),

/***/ 67718:
/*!********************************************************************!*\
  !*** ./src/app/models/Exceptions/TaskHistoryAlreadyExistsError.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskHistoryAlreadyExistsError": () => (/* binding */ TaskHistoryAlreadyExistsError)
/* harmony export */ });
class TaskHistoryAlreadyExistsError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = TaskHistoryAlreadyExistsError.name;
        Object.setPrototypeOf(this, TaskHistoryAlreadyExistsError.prototype);
    }
}


/***/ }),

/***/ 88622:
/*!***************************************************************!*\
  !*** ./src/app/models/Exceptions/TaskHistoryNotFoundError.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskHistoryNotFoundError": () => (/* binding */ TaskHistoryNotFoundError)
/* harmony export */ });
class TaskHistoryNotFoundError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = TaskHistoryNotFoundError.name;
        Object.setPrototypeOf(this, TaskHistoryNotFoundError.prototype);
    }
}


/***/ }),

/***/ 9702:
/*!***********************************************************!*\
  !*** ./src/app/models/Exceptions/UnknownLanguageError.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UnknownLanguageError": () => (/* binding */ UnknownLanguageError)
/* harmony export */ });
class UnknownLanguageError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = UnknownLanguageError.name;
        Object.setPrototypeOf(this, UnknownLanguageError.prototype);
    }
}


/***/ }),

/***/ 8488:
/*!********************************************************!*\
  !*** ./src/app/models/Exceptions/UserNotFoundError.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UserNotFoundError": () => (/* binding */ UserNotFoundError)
/* harmony export */ });
class UserNotFoundError extends Error {
    constructor(message) {
        super(message);
        this.httpStatus = 404;
        this.handled = false;
        this.name = UserNotFoundError.name;
        Object.setPrototypeOf(this, UserNotFoundError.prototype);
    }
}


/***/ }),

/***/ 31980:
/*!*****************************************************!*\
  !*** ./src/app/pipes/format-dayofweek-abbr-pipe.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormatDayOfWeekAbbrPipe": () => (/* binding */ FormatDayOfWeekAbbrPipe)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/Core/day-of-week.enum */ 64591);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ngx-translate/core */ 90466);




let FormatDayOfWeekAbbrPipe = class FormatDayOfWeekAbbrPipe {
    constructor(translate) {
        this.translate = translate;
    }
    transform(day) {
        switch (day) {
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Monday: {
                return this.translate.instant('create-task.monday-abbreviation');
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Tuesday: {
                return this.translate.instant('create-task.tuesday-abbreviation');
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Wednesday: {
                return this.translate.instant('create-task.wednesday-abbreviation');
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Thursday: {
                return this.translate.instant('create-task.thursday-abbreviation');
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Friday: {
                return this.translate.instant('create-task.friday-abbreviation');
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Saturday: {
                return this.translate.instant('create-task.saturday-abbreviation');
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Sunday: {
                return this.translate.instant('create-task.sunday-abbreviation');
            }
        }
    }
};
FormatDayOfWeekAbbrPipe.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_1__.TranslateService }
];
FormatDayOfWeekAbbrPipe = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Pipe)({
        name: 'formatDayOfWeekAbbrPipe'
    })
], FormatDayOfWeekAbbrPipe);



/***/ }),

/***/ 99022:
/*!************************************************!*\
  !*** ./src/app/pipes/format-dayofweek-pipe.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormatDayOfWeekPipe": () => (/* binding */ FormatDayOfWeekPipe)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/Core/day-of-week.enum */ 64591);



let FormatDayOfWeekPipe = class FormatDayOfWeekPipe {
    transform(day) {
        switch (day) {
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Monday: {
                return 'Monday';
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Tuesday: {
                return 'Tuesday';
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Wednesday: {
                return 'Wednesday';
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Thursday: {
                return 'Thursday';
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Friday: {
                return 'Friday';
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Saturday: {
                return 'Saturday';
            }
            case _models_Core_day_of_week_enum__WEBPACK_IMPORTED_MODULE_0__.DayOfWeek.Sunday: {
                return 'Sunday';
            }
        }
    }
};
FormatDayOfWeekPipe = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Pipe)({
        name: 'formatDayOfWeekPipe'
    })
], FormatDayOfWeekPipe);



/***/ }),

/***/ 30419:
/*!********************************************!*\
  !*** ./src/app/pipes/format-timer-pipe.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FormatTimePipe": () => (/* binding */ FormatTimePipe)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 14001);


let FormatTimePipe = class FormatTimePipe {
    transform(value) {
        const minutes = Math.floor(value / 60) % 60;
        const hours = Math.floor(value / 60 / 60);
        if (hours < 1) {
            return ('00' + minutes).slice(-2) + ':' + ('00' + Math.floor(value - minutes * 60)).slice(-2);
        }
        else {
            return ('00' + hours).slice(-2) + ':' + ('00' + minutes).slice(-2) + ':' + ('00' + Math.floor(value - minutes * 60)).slice(-2);
        }
    }
};
FormatTimePipe = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Pipe)({
        name: 'formatTimer'
    })
], FormatTimePipe);



/***/ }),

/***/ 42101:
/*!*******************************************!*\
  !*** ./src/app/pipes/main-pipe.module.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MainPipeModule": () => (/* binding */ MainPipeModule)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/common */ 28267);
/* harmony import */ var _format_timer_pipe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./format-timer-pipe */ 30419);
/* harmony import */ var _format_dayofweek_pipe__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./format-dayofweek-pipe */ 99022);
/* harmony import */ var _format_dayofweek_abbr_pipe__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./format-dayofweek-abbr-pipe */ 31980);






let MainPipeModule = class MainPipeModule {
};
MainPipeModule = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.NgModule)({
        declarations: [_format_timer_pipe__WEBPACK_IMPORTED_MODULE_0__.FormatTimePipe, _format_dayofweek_pipe__WEBPACK_IMPORTED_MODULE_1__.FormatDayOfWeekPipe, _format_dayofweek_abbr_pipe__WEBPACK_IMPORTED_MODULE_2__.FormatDayOfWeekAbbrPipe],
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_5__.CommonModule],
        exports: [_format_timer_pipe__WEBPACK_IMPORTED_MODULE_0__.FormatTimePipe, _format_dayofweek_pipe__WEBPACK_IMPORTED_MODULE_1__.FormatDayOfWeekPipe, _format_dayofweek_abbr_pipe__WEBPACK_IMPORTED_MODULE_2__.FormatDayOfWeekAbbrPipe]
    })
], MainPipeModule);



/***/ }),

/***/ 34571:
/*!*******************************************!*\
  !*** ./src/app/services/alert.service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AlertService": () => (/* binding */ AlertService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/date-utils */ 85218);




let AlertService = class AlertService {
    constructor(translate) {
        this.translate = translate;
    }
    getDurationAlertOptions(handler, hours, minutes, seconds) {
        const options = {
            header: this.translate.instant('alert.lbl-enter-duration'),
            backdropDismiss: false,
            inputs: [
                {
                    name: 'Hours',
                    type: 'number',
                    placeholder: hours === 0 ? this.translate.instant('alert.lbl-hours') : String(hours),
                    min: '0',
                    max: '24',
                },
                {
                    name: 'Minutes',
                    type: 'number',
                    placeholder: minutes === 0 ? this.translate.instant('alert.lbl-minutes') : String(minutes),
                    min: '0',
                    max: '60',
                },
                {
                    name: 'Seconds',
                    type: 'number',
                    placeholder: seconds === 0 ? this.translate.instant('alert.lbl-seconds') : String(seconds),
                    min: '0',
                    max: '60',
                }
            ],
            buttons: [
                {
                    text: 'Cancel',
                    role: 'cancel',
                    cssClass: 'secondary',
                }, {
                    text: this.translate.instant('alert.lbl-ok'),
                    handler
                }
            ],
            cssClass: 'alert-top'
        };
        return options;
    }
    getDecimalAlertOptions(handler) {
        const options = {
            header: this.translate.instant('alert.lbl-enter-value'),
            backdropDismiss: false,
            inputs: [
                {
                    name: 'Value',
                    type: 'number',
                    placeholder: this.translate.instant('alert.placeholder-enter-value')
                }
            ],
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-cancel'),
                    role: 'cancel',
                    cssClass: 'secondary',
                }, {
                    text: this.translate.instant('alert.lbl-ok'),
                    handler
                }
            ],
            cssClass: 'alert-top'
        };
        return options;
    }
    getNoteAlertOptions(handler) {
        const options = {
            header: this.translate.instant('alert.lbl-note'),
            backdropDismiss: false,
            inputs: [
                {
                    name: 'Value',
                    type: 'text',
                    placeholder: this.translate.instant('alert.placeholder-note')
                }
            ],
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-cancel'),
                    role: 'cancel',
                    cssClass: 'secondary',
                }, {
                    text: this.translate.instant('alert.lbl-ok'),
                    handler
                }
            ],
            cssClass: 'alert-top'
        };
        return options;
    }
    getVoidAlertOptions(handler) {
        const options = {
            header: this.translate.instant('alert.msg-confirmation'),
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                    role: 'Cancel'
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler
                },
            ]
        };
        return options;
    }
    getCancelTimerAlertOptions(handler) {
        const options = {
            header: this.translate.instant('alert.msg-confirmation'),
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                    role: 'Cancel'
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler
                },
            ]
        };
        return options;
    }
    getDeleteNoteAlertOptions(handler) {
        const options = {
            header: this.translate.instant('alert.msg-confirmation'),
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                    role: 'Cancel'
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler
                },
            ]
        };
        return options;
    }
    getDeleteTaskAlertOptions(handler) {
        const options = {
            message: this.translate.instant('alert.msg-confirmation-delete'),
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler
                }
            ]
        };
        return options;
    }
    getDeleteAccountAlertOptions(handler) {
        const options = {
            message: this.translate.instant('alert.msg-confirmation-delete-account'),
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler
                }
            ]
        };
        return options;
    }
    getDeleteGroupAlertOptions(handler) {
        const options = {
            message: this.translate.instant('alert.msg-confirmation-delete-group'),
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler
                }
            ]
        };
        return options;
    }
    getTimerExpiredAlertOptions(handlerCancel, handlerOk, seconds, taskName) {
        const durationString = _shared_date_utils__WEBPACK_IMPORTED_MODULE_0__["default"].getDurationString(seconds);
        const alertMsg = this.translate.instant('alert.msg-timer-expired') + '<br/><br/>' + taskName + '<br/>' + durationString;
        const options = {
            message: alertMsg,
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                    handler: handlerCancel
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler: handlerOk
                }
            ]
        };
        return options;
    }
    getEditNoteAlertOptions(handler, text) {
        const options = {
            message: this.translate.instant('alert.msg-confirmation-edit-note'),
            backdropDismiss: false,
            inputs: [
                {
                    name: 'Note',
                    type: 'text',
                    value: text
                },
            ],
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-cancel'),
                },
                {
                    text: this.translate.instant('alert.btn-save'),
                    handler
                }
            ]
        };
        return options;
    }
    getBugReportAlertOptions(handler) {
        const options = {
            header: this.translate.instant('alert.msg-thanks'),
            backdropDismiss: false,
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-cancel'),
                    role: 'Cancel'
                },
                {
                    text: this.translate.instant('alert.lbl-send'),
                    handler
                }
            ],
            inputs: [
                {
                    name: 'Title',
                    type: 'text',
                    placeholder: this.translate.instant('alert.placeholder-title'),
                },
                {
                    name: 'Description',
                    type: 'text',
                    placeholder: this.translate.instant('alert.placeholder-description'),
                },
            ],
        };
        return options;
    }
    getCloseTaskEditPopupAlertOptions(handlerYes, handlerNo) {
        const options = {
            message: this.translate.instant('alert.msg-save-confirmation'),
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                    handler: handlerNo
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler: handlerYes
                }
            ]
        };
        return options;
    }
    getConfirmationAlertOptions(headerTxt, handlerYes, handlerNo) {
        const options = {
            header: headerTxt,
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-cancel'),
                    role: 'cancel',
                    cssClass: 'secondary',
                    handler: handlerNo
                }, {
                    text: this.translate.instant('alert.lbl-ok'),
                    handler: handlerYes
                }
            ]
        };
        return options;
    }
    getChangePositionAlertOptions(handlerOk, handlerCancel, handlerSetAsDefault, handlerSetAsFirst, handlerSetAsLast, choices, selected) {
        let buttons = [
            {
                text: this.translate.instant('alert.lbl-default'),
                handler: handlerSetAsDefault
            },
            {
                text: this.translate.instant('alert.lbl-first'),
                handler: handlerSetAsFirst
            },
            {
                text: this.translate.instant('alert.lbl-last'),
                handler: handlerSetAsLast
            },
            {
                text: this.translate.instant('alert.lbl-cancel'),
                role: 'cancel',
                cssClass: 'secondary',
                handler: handlerCancel
            },
            {
                text: this.translate.instant('alert.lbl-ok'),
                handler: handlerOk
            },
        ];
        if (handlerSetAsDefault == null) {
            buttons = [
                {
                    text: this.translate.instant('alert.lbl-cancel'),
                    role: 'cancel',
                    cssClass: 'secondary',
                    handler: handlerCancel
                },
                {
                    text: this.translate.instant('alert.lbl-ok'),
                    handler: handlerOk
                }
            ];
        }
        const options = {
            header: this.translate.instant('alert.lbl-after') + ' :',
            backdropDismiss: false,
            buttons,
            inputs: [],
            cssClass: 'alert-top'
        };
        for (const choice of choices) {
            options.inputs.push({
                type: 'radio',
                label: choice,
                value: choice,
                checked: choice === selected
            });
        }
        return options;
    }
    getChangeResultTypeOptions(handlerOk, handlerCancel, 
    // handlerSetAsDefault: (alertData: any) => void,
    choices, selected) {
        const buttons = [
            /*{
              text: this.translate.instant('alert.lbl-default'),
              handler: handlerSetAsDefault
            },*/
            {
                text: this.translate.instant('alert.lbl-cancel'),
                role: 'cancel',
                cssClass: 'secondary',
                handler: handlerCancel
            },
            {
                text: this.translate.instant('alert.lbl-ok'),
                handler: handlerOk
            },
        ];
        const options = {
            header: this.translate.instant('alert.lbl-result-type') + ' :',
            backdropDismiss: false,
            buttons,
            inputs: [],
            cssClass: 'alert-top'
        };
        for (const choice of choices) {
            options.inputs.push({
                type: 'radio',
                label: choice,
                value: choice,
                checked: choice === selected
            });
        }
        return options;
    }
    getChangeDefaultGroupAlertOptions(handlerOk, handlerCancel, handlerSetAsDefault, handlerNew, choices, selected) {
        let buttons = [
            {
                text: this.translate.instant('alert.lbl-default'),
                handler: handlerSetAsDefault
            },
            {
                text: this.translate.instant('alert.lbl-create-new'),
                cssClass: 'secondary',
                handler: handlerNew
            },
            {
                text: this.translate.instant('alert.lbl-cancel'),
                role: 'cancel',
                cssClass: 'secondary',
                handler: handlerCancel
            },
            {
                text: this.translate.instant('alert.lbl-ok'),
                handler: handlerOk
            },
        ];
        if (handlerSetAsDefault == null) {
            buttons = [
                {
                    text: this.translate.instant('alert.lbl-cancel'),
                    role: 'cancel',
                    cssClass: 'secondary',
                    handler: handlerCancel
                },
                {
                    text: this.translate.instant('alert.lbl-ok'),
                    handler: handlerOk
                }
            ];
        }
        const options = {
            header: this.translate.instant('alert.lbl-group') + ' :',
            backdropDismiss: false,
            buttons,
            inputs: [],
            cssClass: 'alert-top'
        };
        for (const choice of choices) {
            options.inputs.push({
                type: 'radio',
                label: choice,
                value: choice,
                checked: choice === selected
            });
        }
        return options;
    }
    getChangeGroupPositionAlertOptions(handlerOk, handlerCancel, handlerSetAsFirst, choices, selected) {
        const buttons = [
            {
                text: this.translate.instant('alert.lbl-first'),
                handler: handlerSetAsFirst
            },
            {
                text: this.translate.instant('alert.lbl-cancel'),
                role: 'cancel',
                cssClass: 'secondary',
                handler: handlerCancel
            },
            {
                text: this.translate.instant('alert.lbl-ok'),
                handler: handlerOk
            },
        ];
        const options = {
            header: this.translate.instant('alert.lbl-after') + ' :',
            backdropDismiss: false,
            buttons,
            inputs: []
        };
        for (const choice of choices) {
            options.inputs.push({
                type: 'radio',
                label: choice,
                value: choice,
                checked: choice === selected
            });
        }
        return options;
    }
    getConfirmChangeGroupAlertOptions(handler, groupName) {
        const options = {
            message: this.translate.instant('alert.msg-confirmation-change-group', { groupName }),
            buttons: [
                {
                    text: this.translate.instant('alert.lbl-no'),
                },
                {
                    text: this.translate.instant('alert.lbl-yes'),
                    handler
                }
            ]
        };
        return options;
    }
};
AlertService.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_1__.TranslateService }
];
AlertService = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)({
        providedIn: 'root'
    })
], AlertService);



/***/ }),

/***/ 26369:
/*!*****************************************!*\
  !*** ./src/app/services/api-service.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiService": () => (/* binding */ ApiService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/common/http */ 83981);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../environments/environment */ 18260);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs */ 9500);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 99457);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _models_DTO_dto_user_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/DTO/dto-user-config */ 62087);
/* harmony import */ var _ionic_native_file_ngx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic-native/file/ngx */ 17498);
/* harmony import */ var _models_Exceptions_ApiHttpError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/Exceptions/ApiHttpError */ 59032);
/* harmony import */ var _interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interfaces/i-authentication-service */ 39296);










let ApiService = class ApiService {
    constructor(http, logger, file, auth) {
        this.http = http;
        this.logger = logger;
        this.file = file;
        this.auth = auth;
        this.baseUrl = _environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.apiUrl;
    }
    getHttpHeaders() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const token = yield this.auth.getUserJsonWebToken();
            return new _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpHeaders().set('Authorization', token);
        });
    }
    /*
     * Build the api url call with the provided method name
     */
    getApiUrlCall(methodName) {
        let url = '';
        url = this.baseUrl + methodName;
        return url;
    }
    insertCalendarTasks(tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/CalendarTask');
            const headers = yield this.getHttpHeaders();
            try {
                // We can't send all requests at the same time because we need to keep track of the Ids
                // this could be solved by assinging a second Id to be able to reorder them after received
                const calendarTaskIds = [];
                for (const task of tasks) {
                    const dto = task.clone();
                    dto.Histories = [];
                    // console.log('insertCalendarTasks', task);
                    const calendarTaskId = yield this.http.post(url, dto, { headers }).toPromise();
                    calendarTaskIds.push(calendarTaskId);
                }
                return calendarTaskIds;
            }
            catch (error) {
                this.logger.logError(new Error('insertCalendarTasks failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('insertCalendarTasks failed');
            }
        });
    }
    updateCalendarTasks(tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/CalendarTask');
            const headers = yield this.getHttpHeaders();
            try {
                const observables = [];
                for (const task of tasks) {
                    const dto = task.clone();
                    dto.Histories = [];
                    const oneObs = this.http.put(url, dto, { headers });
                    observables.push(oneObs);
                }
                // console.log('updateCalendarTasks', tasks);
                yield (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.forkJoin)(observables).toPromise();
                return true;
            }
            catch (error) {
                this.logger.logError(new Error('updateCalendarTasks failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('updateCalendarTasks failed');
            }
        });
    }
    getTasks(request) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/CalendarTask');
            const headers = yield this.getHttpHeaders();
            let params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpParams();
            params = params.append('userId', request.userId);
            params = params.append('IncludeVoid', String(request.IncludeVoid));
            params = params.append('DateStart', request.DateStart.toISOString());
            params = params.append('DateEnd', request.DateEnd.toISOString());
            try {
                const response = yield this.http.get(url, { params, headers }).toPromise();
                return response;
            }
            catch (error) {
                // console.log('error', error);
                this.logger.logError(new Error('getTasks failed'), { key: 'error', value: JSON.stringify(error) });
                // throwError('getTasks failed').toPromise();
                return [];
            }
        });
    }
    insertTaskHistories(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('inserting taskhistories', histories);
            const url = this.getApiUrlCall('api/TaskHistory');
            const headers = yield this.getHttpHeaders();
            try {
                // We can't send all requests at the same time because we need to keep track of the Ids
                // this could be solved by assinging a second Id to be able to reorder them after received
                const historyIds = [];
                for (const history of histories) {
                    const historyId = yield this.http.post(url, history, { headers }).toPromise();
                    historyIds.push(historyId);
                }
                return historyIds;
            }
            catch (error) {
                this.logger.logError(new Error('insertTaskHistories failed'), { key: 'error', value: JSON.stringify(error) });
                if (error.name === 'HttpErrorResponse') {
                    throw new _models_Exceptions_ApiHttpError__WEBPACK_IMPORTED_MODULE_4__.ApiHttpError('Unable to insertTaskHistories');
                }
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('insertTaskHistories failed');
            }
        });
    }
    updateTaskHistories(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/TaskHistory');
            const headers = yield this.getHttpHeaders();
            try {
                const observables = [];
                for (const history of histories) {
                    const oneObs = this.http.put(url, history, { headers });
                    observables.push(oneObs);
                }
                yield (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.forkJoin)(observables).toPromise();
                return true;
            }
            catch (error) {
                this.logger.logError(new Error('updateTaskHistories failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('updateTaskHistories failed');
            }
        });
    }
    sendReport(report) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/BugReport');
            const headers = yield this.getHttpHeaders();
            try {
                const result = yield this.http.post(url, report, { headers }).toPromise();
                return result;
            }
            catch (error) {
                this.logger.logError(new Error('sendReport failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('sendReport failed');
            }
        });
    }
    getUser(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const start = new Date();
            // this.logger.logDebug('GETUSER', userId, start.toISOString());
            const url = this.getApiUrlCall('api/User');
            const headers = yield this.getHttpHeaders();
            let params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpParams();
            params = params.append('userId', userId);
            try {
                const response = yield this.http.get(url, { params, headers }).toPromise();
                if (response == null) {
                    return null;
                }
                // NULL User behavior from api
                if (response.Id === null && response.UserId === null) {
                    return null;
                }
                // this.logger.logDebug('GETUSER response', JSON.stringify(response), DateUtils.getTimeSince(start));
                if (response.Config == null) {
                    response.Config = new _models_DTO_dto_user_config__WEBPACK_IMPORTED_MODULE_2__.DTOUserConfig();
                }
                return response;
            }
            catch (error) {
                this.logger.logError(new Error('getUser failed'), { key: 'error', value: JSON.stringify(error) });
                // console.log('ERROR GET USER: ', error);
                if (error.name === 'HttpErrorResponse') {
                    throw new _models_Exceptions_ApiHttpError__WEBPACK_IMPORTED_MODULE_4__.ApiHttpError('Unable to get user from api');
                }
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('getUser failed').toPromise();
            }
        });
    }
    saveUser(user) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/User');
            const headers = yield this.getHttpHeaders();
            try {
                // console.log('API SAVE USER', user, new Date());
                const response = yield this.http.put(url, user, { headers }).toPromise();
                // console.log('API USER SAVED', new Date());
                return response;
            }
            catch (error) {
                this.logger.logError(new Error('setUser failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('setUser failed').toPromise();
            }
        });
    }
    getGroups(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/TaskGroup');
            const headers = yield this.getHttpHeaders();
            let params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpParams();
            params = params.append('userId', userId);
            try {
                const response = yield this.http.get(url, { params, headers }).toPromise();
                if (response == null) {
                    return null;
                }
                // this.logger.logDebug('getGroups response', JSON.stringify(response));
                return response;
            }
            catch (error) {
                this.logger.logError(new Error('getGroups failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('getGroups failed').toPromise();
            }
        });
    }
    insertGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/TaskGroup');
            const headers = yield this.getHttpHeaders();
            try {
                const groupId = yield this.http.post(url, group, { headers }).toPromise();
                return true;
            }
            catch (error) {
                this.logger.logError(new Error('insertGroup failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('insertGroup failed');
            }
        });
    }
    updateGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/TaskGroup');
            const headers = yield this.getHttpHeaders();
            console.log('UPDATING GROUP API : ', group, url);
            try {
                const groupId = yield this.http.put(url, group, { headers }).toPromise();
                return true;
            }
            catch (error) {
                this.logger.logError(new Error('insertGroup failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('insertGroup failed');
            }
        });
    }
    downloadAllData(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/Report');
            const headers = yield this.getHttpHeaders();
            let params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpParams();
            params = params.append('userId', userId);
            try {
                const response = yield this.http.get(url, { params, headers, responseType: 'blob' }).toPromise();
                // console.log('DONWLOAD RESPONSE : ', response);
                if (response == null) {
                    return null;
                }
                // this.logger.logDebug('getreport response', JSON.stringify(response));
                // For other browsers:
                // Create a link pointing to the ObjectURL containing the blob.
                // const data = window.URL.createObjectURL(response);
                /*const link = document.createElement('a');
                link.href = data;
                link.download = 'hypertaskdata.csv';
                link.click();
                setTimeout(() => {
                  // For Firefox it is necessary to delay revoking the ObjectURL
                  window.URL.revokeObjectURL(data);
                }, 100);*/
                // SAVE DOWNLOADED FILE
                const result = yield this.file.writeFile(this.file.externalRootDirectory + '/Download', 'hypertaskdata.csv', response, { replace: true });
                // console.log('result:', result.nativeURL);
                return result.nativeURL;
            }
            catch (error) {
                // console.log('DOWNLOAD ERROR : ', error);
                this.logger.logError(new Error('downloadAllData failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('downloadAllData failed').toPromise();
            }
        });
    }
    permanentlyDeleteAccount(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            const url = this.getApiUrlCall('api/User');
            const headers = yield this.getHttpHeaders();
            let params = new _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpParams();
            params = params.append('userId', userId);
            try {
                const response = yield this.http.delete(url, { params, headers }).toPromise();
                // console.log('DELETE RESPONSE : ', response);
                if (response == null) {
                    return null;
                }
                // this.logger.logDebug('getreport response', JSON.stringify(response));
                return true;
            }
            catch (error) {
                // console.log('DELETE ERROR : ', error);
                this.logger.logError(new Error('delete account failed'), { key: 'error', value: JSON.stringify(error) });
                (0,rxjs__WEBPACK_IMPORTED_MODULE_8__.throwError)('delete account failed').toPromise();
            }
        });
    }
};
ApiService.ctorParameters = () => [
    { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_7__.HttpClient },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_1__.ILogger },
    { type: _ionic_native_file_ngx__WEBPACK_IMPORTED_MODULE_3__.File },
    { type: _interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_5__.IAuthenticationService }
];
ApiService = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_10__.Injectable)({
        providedIn: 'root'
    })
], ApiService);



/***/ }),

/***/ 78492:
/*!**********************************************************!*\
  !*** ./src/app/services/application-insights.service.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApplicationInsightsService": () => (/* binding */ ApplicationInsightsService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _microsoft_applicationinsights_web__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @microsoft/applicationinsights-web */ 8505);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ 13252);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ 48027);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../environments/environment */ 18260);






let ApplicationInsightsService = class ApplicationInsightsService {
    constructor(router) {
        this.router = router;
        this.logs = [];
        this.maxLogsLines = 1000;
        this.appInsights = new _microsoft_applicationinsights_web__WEBPACK_IMPORTED_MODULE_1__.Initialization({
            config: {
                instrumentationKey: _environments_environment__WEBPACK_IMPORTED_MODULE_0__.environment.instrumentationKey,
                enableCorsCorrelation: false,
            }
        });
        const insight = this.appInsights.loadAppInsights();
        this.routerSubscription = this.router.events.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.filter)(event => event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_3__.ResolveEnd)).subscribe((event) => {
            const activatedComponent = this.getActivatedComponent(event.state.root);
            if (activatedComponent) {
                this.logPageView(`${activatedComponent.name} ${this.getRouteTemplate(event.state.root)}`, event.urlAfterRedirects);
            }
        });
    }
    ngOnDestroy() {
        this.routerSubscription.unsubscribe();
    }
    setUserId(userId) {
        this.appInsights.setAuthenticatedUserContext(userId);
    }
    clearUserId() {
        this.appInsights.clearAuthenticatedUserContext();
    }
    logPageView(name, uri) {
        this.appInsights.trackPageView({ name, uri });
    }
    /**
     * Logs into RAM to be displayed in the app
     */
    logDebug(str1, str2 = '', str3 = '') {
        const result = str1 + ' ' + str2 + ' ' + str3;
        console.log(result);
        this.logs.push(result);
        if (this.logs.length === this.maxLogsLines) {
            this.logs.splice(0, this.maxLogsLines * 0.5);
            console.clear();
        }
        return;
    }
    logEvent(name, properties, measurements) {
        this.logs.push(name, JSON.stringify(properties));
        if (this.logs.length === this.maxLogsLines) {
            this.logs.splice(0, this.maxLogsLines * 0.5);
            console.clear();
        }
        const event = {
            name, measurements, properties
        };
        try {
            this.appInsights.trackEvent(event, properties);
            this.appInsights.flush(false);
            console.log('tracking event successful', event);
        }
        catch (_a) {
            // console.log('error tracking event');
        }
    }
    logError(error, properties, measurements) {
        this.logs.push(error.name + ' ' + error.message + ' ' + JSON.stringify(properties));
        if (this.logs.length === this.maxLogsLines) {
            this.logs.splice(0, this.maxLogsLines * 0.5);
            console.clear();
        }
        const exception = {
            error, measurements, properties,
        };
        this.appInsights.trackException(exception);
        // console.log('Logged error : ', exception);
        console.error('Logged error2 : ', error);
    }
    logConsole(name, properties, measurements) {
        console.log(name, properties, measurements);
    }
    getActivatedComponent(snapshot) {
        if (snapshot.firstChild) {
            return this.getActivatedComponent(snapshot.firstChild);
        }
        return snapshot.component;
    }
    getRouteTemplate(snapshot) {
        let path = '';
        if (snapshot.routeConfig) {
            path += snapshot.routeConfig.path;
        }
        if (snapshot.firstChild) {
            return path + this.getRouteTemplate(snapshot.firstChild);
        }
        return path;
    }
    getDebugLogs() {
        return this.logs;
    }
};
ApplicationInsightsService.ctorParameters = () => [
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__.Router }
];
ApplicationInsightsService = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({
        providedIn: 'root'
    })
], ApplicationInsightsService);



/***/ }),

/***/ 43561:
/*!****************************************!*\
  !*** ./src/app/services/auth.guard.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthGuard": () => (/* binding */ AuthGuard)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ 13252);
/* harmony import */ var _interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interfaces/i-authentication-service */ 39296);




let AuthGuard = class AuthGuard {
    constructor(auth, router) {
        this.auth = auth;
        this.router = router;
    }
    canActivate(next, state) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            const isLoggedIn = yield this.auth.currentUserIsAuthenticated();
            if (isLoggedIn === true) {
                return true;
            }
            else {
                this.redirectToLogin();
                return false;
            }
        });
    }
    redirectToLogin() {
        this.router.navigate(['/login']);
    }
};
AuthGuard.ctorParameters = () => [
    { type: _interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_0__.IAuthenticationService },
    { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__.Router }
];
AuthGuard = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)({
        providedIn: 'root'
    })
], AuthGuard);



/***/ }),

/***/ 89270:
/*!****************************************************!*\
  !*** ./src/app/services/authentication.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthenticationService": () => (/* binding */ AuthenticationService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _angular_fire_compat_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/fire/compat/auth */ 29774);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ 84452);





let AuthenticationService = class AuthenticationService {
    //private isAuthenticated: boolean = false;
    constructor(logger, auth) {
        this.logger = logger;
        this.auth = auth;
        /*auth.onAuthStateChanged(user => {
          if (user) {
            this.isAuthenticated = true;
            console.log('USER IS SIGNED IN');
          } else {
            this.isAuthenticated = false;
            console.log('USER IS NOT SIGNED IN');
          }
        });*/
    }
    currentUserIsAuthenticated() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            const user = yield this.auth.authState.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.first)()).toPromise();
            ;
            if (user) {
                //console.log('USER IS AUTHENTICATED');
                return true;
            }
            else {
                //console.log('USER IS NOT AUTHENTICATED');
                return false;
            }
        });
    }
    getUserId() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('getUserId string');
            const user = yield this.getUser();
            //console.log('getUserId got user', user);
            if (user == null) {
                return null;
            }
            else {
                //console.log('RETURNING USER ID : ', user.uid);
                return user.uid;
            }
        });
    }
    getUser() {
        /*console.log('GETTING USER GETUSER()');
        console.log('current user : ', this.auth.currentUser);
        console.log('current user : ', this.auth.user);*/
        //return this.auth.currentUser;
        return this.auth.authState.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.first)()).toPromise();
    }
    setLoginPersistance() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            try {
                //console.log('PERSISTANCE SET BEFORE');
                yield this.auth.setPersistence('local');
                //console.log('PERSISTANCE SET AFTER');
            }
            catch (error) {
                //console.log('ERROR PERSISTANCE', error)
                this.logger.logError(error);
            }
        });
    }
    getUserJsonWebToken() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            const token = yield (yield this.auth.currentUser).getIdToken();
            return token;
        });
    }
    signInWithEmailPassword(email, password) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const response = yield this.auth.signInWithEmailAndPassword(email, password);
                return response;
            }
            catch (error) {
                this.logger.logError(error);
            }
        });
    }
    createAccount(email, password) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const response = yield this.auth.createUserWithEmailAndPassword(email, password);
                return response.user.uid;
            }
            catch (error) {
                this.logger.logError(error);
            }
        });
    }
    logout() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('LOGOUT');
            yield this.auth.signOut();
            return;
        });
    }
};
AuthenticationService.ctorParameters = () => [
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_0__.ILogger },
    { type: _angular_fire_compat_auth__WEBPACK_IMPORTED_MODULE_3__.AngularFireAuth }
];
AuthenticationService = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
        providedIn: 'root'
    })
], AuthenticationService);



/***/ }),

/***/ 98158:
/*!************************************************!*\
  !*** ./src/app/services/bug-report.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BugReportService": () => (/* binding */ BugReportService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interfaces/i-api-provider */ 67116);



let BugReportService = class BugReportService {
    constructor(apiProvider) {
        this.apiProvider = apiProvider;
    }
    SendReport(report) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            if (report.Title.length > 200) {
                report.Title = report.Title.substring(0, 200);
            }
            if (report.Description != null && report.Description.length > 20000) {
                report.Description = report.Description.substring(0, 20000);
            }
            const success = yield this.apiProvider.sendReport(report);
            return success;
        });
    }
};
BugReportService.ctorParameters = () => [
    { type: _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_0__.IApiProvider }
];
BugReportService = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)({
        providedIn: 'root'
    })
], BugReportService);



/***/ }),

/***/ 43772:
/*!***************************************************!*\
  !*** ./src/app/services/calendar-task.service.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CalendarTaskService": () => (/* binding */ CalendarTaskService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ 9500);
/* harmony import */ var _models_DTO_dto_get_calendar_task_request__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/DTO/dto-get-calendar-task-request */ 66389);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/date-utils */ 85218);
/* harmony import */ var _models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/Core/calendar-task */ 2908);
/* harmony import */ var _models_Exceptions_CalendarTaskNotFoundError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/Exceptions/CalendarTaskNotFoundError */ 83285);
/* harmony import */ var _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interfaces/i-api-provider */ 67116);
/* harmony import */ var _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interfaces/i-local-storage-service */ 5295);
/* harmony import */ var _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/Core/task-frequency.enum */ 90616);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _models_Core_task_history__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/Core/task-history */ 42367);
/* harmony import */ var _date_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./date.service */ 23516);
/* harmony import */ var _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../interfaces/i-data-sync-local-service */ 17610);
/* harmony import */ var _shared_number_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../shared/number-utils */ 26173);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/common */ 28267);
/* harmony import */ var _models_Core_task_group__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/Core/task-group */ 33890);
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./user.service */ 77524);
/* harmony import */ var _event_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./event.service */ 29170);
var CalendarTaskService_1;



















let CalendarTaskService = CalendarTaskService_1 = class CalendarTaskService {
    constructor(apiProvider, local, localDataSync, logger, dateService, datepipe, userService, eventService) {
        this.apiProvider = apiProvider;
        this.local = local;
        this.localDataSync = localDataSync;
        this.logger = logger;
        this.dateService = dateService;
        this.datepipe = datepipe;
        this.userService = userService;
        this.eventService = eventService;
        // public allTasksNoOrder: CalendarTask[] = [];
        this.allGroups = [];
    }
    getAllPresentTasks() {
        const result = [];
        const dateStart = new Date();
        console.log('getAllPresentTasks (EXPONENTIAL)', dateStart.toISOString());
        // TODO: BIG NONO this is exponential
        for (const group of this.allGroups) {
            for (const task of group.Tasks) {
                if (task.Void !== true &&
                    ((task.Frequency !== _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Once &&
                        task.Frequency !== _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.UntilDone) ||
                        !task.Histories.some(t => t.TaskDone &&
                            !t.Void &&
                            t.DoneWorkDate < this.dateService.GetTodayWorkDate()))) {
                    result.push(task);
                }
            }
        }
        console.log('getAllPresentTasks DONE (EXPONENTIAL)', dateStart.toISOString());
        return result;
    }
    getAllTasks() {
        const result = [];
        for (const group of this.allGroups) {
            for (const task of group.Tasks) {
                result.push(task);
            }
        }
        return result;
    }
    getTask(calendarTaskId) {
        // TODO : Use some kind of index instead ?
        for (const group of this.allGroups) {
            for (const task of group.Tasks) {
                if (task.CalendarTaskId === calendarTaskId) {
                    return task;
                }
            }
        }
        // console.log('CalendartaskId = ', calendarTaskId);
        // console.log('AllGroups = ', this.allGroups);
        throw new _models_Exceptions_CalendarTaskNotFoundError__WEBPACK_IMPORTED_MODULE_3__.CalendarTaskNotFoundError('getTask : Unable to find calendar task index while setting as sent 1');
    }
    getTaskFromStatType(statType) {
        for (const group of this.allGroups) {
            for (const task of group.Tasks) {
                if (task.StatType === statType) {
                    return task;
                }
            }
        }
        return null;
    }
    /**
     * Inserts task in RAM and adds to queue to insert in Local
     * Tasks also get reordered, groups are set to visible // TODO : we might want to move this in tasklist in event
     */
    insertCalendarTask(task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            task.InsertDate = new Date();
            task.UpdateDate = new Date();
            this.logger.logEvent('inserting task', { key: 'task', value: JSON.stringify(task) });
            // console.log('INSERTING TASK', task);
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.SyncRequired, null));
            // INITIALIZE VALUES
            if (task.GroupId == null) {
                task.GroupId = CalendarTaskService_1.UnassignedId;
            }
            if (task.InitialGroupId == null) {
                task.InitialGroupId = task.GroupId;
            }
            if (task.InitialAbsolutePosition == null) {
                task.InitialAbsolutePosition = 500;
            }
            task.Sent = false;
            // CHECK IF ALREADY EXISTS
            const alreadyExists = this.getAllTasks().some(p => p.CalendarTaskId === task.CalendarTaskId);
            if (alreadyExists === true) {
                this.logger.logError(new Error('Task already exists'));
                return false;
            }
            // CHECK IF ABSOLUTEPOSITION ALREADY EXISTS AND SORT ACCORDINGLY
            const existingTasks = this.getAllPresentTasks().filter(p => !p.Void &&
                p.AbsolutePosition === task.AbsolutePosition &&
                p.GroupId === task.GroupId);
            if (existingTasks.length > 0) {
                // console.log('Position already exists, reordering tasks, task =, InitialPosition=', existingTasks, task.InitialAbsolutePosition);
                // Push
                const group = this.getGroup(task.GroupId);
                group.Tasks.push(task);
                yield this.reassignOrderTask(task); // it's very long we have to optimize this, It gets inserted here
            }
            else {
                // console.log('Position does not already exist, InitialPosition=', task.InitialAbsolutePosition);
                // Push
                const group = this.getGroup(task.GroupId);
                group.Tasks.push(task);
                group.Tasks = this.getSortedTasksFromTasks(group.Tasks);
            }
            this.setGroupsVisible();
            yield this.localDataSync.queueInsertCalendarTask(task.toDTO());
            return true;
        });
    }
    /**
     * Inserts tasks in RAM and adds to queue to insert in Local
     * Tasks also get reordered, groups are set to visible
     */
    insertCalendarTasks(tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            this.logger.logEvent('inserting task', { key: 'task', value: JSON.stringify(tasks) });
            // console.log('INSERTING TASK', task);
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.SyncRequired, null));
            // INITIALIZE VALUES
            for (const task of tasks) {
                task.InsertDate = new Date();
                task.UpdateDate = new Date();
                if (task.GroupId == null) {
                    task.GroupId = CalendarTaskService_1.UnassignedId;
                }
                if (task.InitialGroupId == null) {
                    task.InitialGroupId = task.GroupId;
                }
                if (task.InitialAbsolutePosition == null) {
                    task.InitialAbsolutePosition = 500;
                }
                task.Sent = false;
                // CHECK IF ALREADY EXISTS
                const alreadyExists = this.getAllTasks().some(p => p.CalendarTaskId === task.CalendarTaskId);
                if (alreadyExists === true) {
                    this.logger.logError(new Error('Task already exists'));
                    return false;
                }
                // CHECK IF ABSOLUTEPOSITION ALREADY EXISTS AND SORT ACCORDINGLY
                const existingTasks = this.getAllPresentTasks().filter(p => !p.Void &&
                    p.AbsolutePosition === task.AbsolutePosition &&
                    p.GroupId === task.GroupId);
                if (existingTasks.length > 0) {
                    // console.log('Position already exists, reordering tasks, task =, InitialPosition=', existingTasks, task.InitialAbsolutePosition);
                    // Push
                    const group = this.getGroup(task.GroupId);
                    group.Tasks.push(task);
                    yield this.reassignOrderTask(task); // it's very long we have to optimize this, It gets inserted here
                }
                else {
                    // console.log('Position does not already exist, InitialPosition=', task.InitialAbsolutePosition);
                    // Push
                    const group = this.getGroup(task.GroupId);
                    group.Tasks.push(task);
                    group.Tasks = this.getSortedTasksFromTasks(group.Tasks);
                }
            }
            this.setGroupsVisible();
            yield this.localDataSync.queueInsertCalendarTasks(tasks.map(p => p.toDTO()));
            return true;
        });
    }
    /**
     * Updates task into RAM, reorder tasks,
     * sets groups to visible // TODO : we might want to move this in tasklist in event
     */
    updateCalendarTask(task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            // log too long which includes all histories
            this.logger.logEvent('updating task', { key: 'task', value: JSON.stringify(task) });
            // console.log('Updating task', task);
            task.UpdateDate = new Date();
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.SyncRequired, null));
            this.replaceTaskInRam(task);
            if ((task.AbsolutePosition !== task.InitialAbsolutePosition ||
                task.InitialGroupId !== task.GroupId) &&
                task.Void === false) {
                yield this.reassignOrderTask(task);
            }
            this.setGroupsVisible();
            yield this.updateTaskAsyncNoPositionCheck(task, false);
            return true;
        });
    }
    replaceTaskInRam(task) {
        const targetGroup = this.getGroup(task.GroupId);
        console.log('replacing in ram', targetGroup, task.GroupId, task, this.allGroups);
        if (task.InitialGroupId !== task.GroupId) {
            // remove from old group
            const oldGroup = this.getGroup(task.InitialGroupId);
            if (oldGroup != null) {
                const oldIndex = oldGroup.Tasks.findIndex(p => p.CalendarTaskId === task.CalendarTaskId);
                if (oldIndex !== -1) {
                    oldGroup.Tasks.splice(oldIndex, 1);
                }
            }
            // remove from target group
            if (targetGroup != null) {
                const newIndex = targetGroup.Tasks.findIndex(p => p.CalendarTaskId === task.CalendarTaskId);
                if (newIndex !== -1) {
                    console.log('removing from target group');
                    targetGroup.Tasks.splice(newIndex, 1);
                }
            }
            // add into new group
            targetGroup.Tasks.push(task);
        }
        else {
            console.log('TARGET GROUP BEFORE', targetGroup.Tasks.map(p => p.AbsolutePosition));
            const index = targetGroup.Tasks.findIndex(p => p.CalendarTaskId === task.CalendarTaskId);
            targetGroup.Tasks[index] = task;
            console.log('TARGET GROUP AFTER', targetGroup.Tasks.map(p => p.AbsolutePosition));
        }
        console.log('replaced in ram', targetGroup);
    }
    reassignOrderTask(task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            const difference = task.AbsolutePosition - task.InitialAbsolutePosition;
            const lowest = Math.min(task.AbsolutePosition, task.InitialAbsolutePosition);
            const highest = Math.max(task.AbsolutePosition, task.InitialAbsolutePosition);
            // console.log('Lowest Highest', lowest, highest, task.AbsolutePosition, task.InitialAbsolutePosition);
            // Get Group
            const groupIndex = this.allGroups.findIndex(p => p.GroupId === task.GroupId); // TODO: Function to get group
            const group = this.allGroups[groupIndex];
            // console.log('reordering positions : ', group.Tasks.map(p => p.AbsolutePosition));
            /*this.logger.logEvent('REORDERING POSITIONS',
            {
              key: 'absolutepositions',
              value: JSON.stringify(group.Tasks.map(p => p.AbsolutePosition))
            });*/
            if (_shared_number_utils__WEBPACK_IMPORTED_MODULE_11__["default"].checkIfDuplicateExists(group.Tasks.filter(p => p.CalendarTaskId !== task.CalendarTaskId)
                .map(p => p.AbsolutePosition))) { // reorder all if 2 are the same
                // this.logger.logEvent('Update all tasks', { key: 'task.CalendarTaskId', value: JSON.stringify(task.UserId)});
                yield this.reorderGroupTasks(task); // reorder group tasks, HERE WE ARE ADDING IT
            }
            else {
                // this.logger.logEvent('Update NOT all tasks', { key: 'task.CalendarTaskId', value: JSON.stringify(task.UserId)});
                const tasksToReorder = group.Tasks.filter(p => p.AbsolutePosition >= lowest &&
                    p.AbsolutePosition <= highest &&
                    p.CalendarTaskId !== task.CalendarTaskId);
                // console.log('TASKS TO REORDER', tasksToReorder);
                for (const currentTask of tasksToReorder) {
                    if (difference < 0) {
                        const newPosition = currentTask.AbsolutePosition + 1;
                        // console.log('DIFFERENCE NEGATIVE NEW POSITION = ', newPosition);
                        currentTask.AbsolutePosition = newPosition;
                        currentTask.InitialAbsolutePosition = newPosition;
                    }
                    else {
                        const newPosition = currentTask.AbsolutePosition - 1;
                        // console.log('DIFFERENCE POSITIVE NEW POSITION = ', newPosition);
                        currentTask.AbsolutePosition = newPosition;
                        currentTask.InitialAbsolutePosition = newPosition;
                    }
                }
                group.Tasks = this.getSortedTasksFromTasks(group.Tasks);
                // console.log('GROUPS TASKS ', group.Tasks);
                yield this.updateTaskAsyncNoPositionCheckBatch(tasksToReorder);
            }
            // console.log('reordering positions : ', group.Tasks.map(p => p.AbsolutePosition));
        });
    }
    getGroup(groupId) {
        const groupIndex = this.allGroups.findIndex(p => p.GroupId === groupId);
        if (groupIndex !== -1) {
            return this.allGroups[groupIndex];
        }
        else {
            return null;
        }
    }
    /**
     * Reorders the tasks in a group. Checks if two have the same position, the new one will take it's place
     * Also queues updates to local
     */
    reorderGroupTasks(task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('REORDER GROUP', task);
            const group = this.getGroup(task.GroupId);
            const tasks = group.Tasks.sort((x, y) => x.AbsolutePosition > y.AbsolutePosition ||
                (x.AbsolutePosition === y.AbsolutePosition &&
                    x.InitialAbsolutePosition < y.InitialAbsolutePosition) ? 1 : -1);
            let positionIterator = 1;
            for (const currentTask of tasks) {
                currentTask.AbsolutePosition = positionIterator++;
                currentTask.InitialAbsolutePosition = currentTask.AbsolutePosition;
            }
            group.Tasks = this.getSortedTasksFromTasks(group.Tasks);
            yield this.updateTaskAsyncNoPositionCheckBatch(tasks);
        });
    }
    updateTaskAsyncNoPositionCheck(task, synced = true) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updateTaskAsyncNoPositionCheck', task, synced);
            // TODO : We might need to assign the task to group tasks
            task.Synced = synced;
            yield this.localDataSync.queueUpdateCalendarTask(task.toDTO(), synced);
            return true;
        });
    }
    updateTaskAsyncNoPositionCheckBatch(tasks, synced = true) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updateTaskAsyncNoPositionCheckBatch', tasks, synced);
            // TODO : We might need to assign the tasks to group tasks
            tasks.forEach(p => p.Synced = synced);
            yield this.localDataSync.queueUpdateCalendarTasks(tasks.map(p => p.toDTO()), synced);
            return true;
        });
    }
    /**
     * Reload all tasks from server and updates them into local storage (without queue)
     */
    getAllTodoFromServer(request) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            const resultRemote = yield this.apiProvider.getTasks(request);
            console.log('RESULT FROM SERVER', resultRemote);
            // todo: try to move this out of this class
            if (resultRemote != null && resultRemote.length > 0) {
                this.setSyncedToTrue(resultRemote);
                // await this.local.setCalendarTasks(resultRemote, false);
                return resultRemote;
            }
            else {
                this.logger.logError(new Error('updating task'));
                return (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.throwError)('unable to get data from server').toPromise();
            }
        });
    }
    reloadAllGroupsAndTasksLocal() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            try {
                console.log('reloadAllGroupsAndTasksLocal');
                let dtoTasks = [];
                let dtoGroups = [];
                dtoTasks = yield this.local.getCalendarTasks(false);
                dtoGroups = yield this.local.getGroups(false);
                // console.log('GOT TASKS AND GROUPS LOCAL', dtoTasks, dtoGroups);
                this.processAndAssignAllGroupsAndTasks(dtoTasks, dtoGroups);
            }
            catch (error) {
                // console.log('Error refreshing local', error);
                this.logger.logError(error);
            }
        });
    }
    processAndAssignAllGroupsAndTasks(dtoTasks, dtoGroups) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            try {
                // ASSIGN TASKS + REORDER + SET PROGRESS + SET VISIBLE
                // console.log('dtogroups', dtoGroups);
                this.allGroups = dtoGroups.map(p => _models_Core_task_group__WEBPACK_IMPORTED_MODULE_12__.TaskGroup.fromDTO(p));
                this.assignTasksAndProcessUnassigned(dtoTasks);
                this.sortTasksAndGroups();
                this.setProgressText(this.dateService.currentWorkDate);
                this.setGroupsVisible();
                const notifs = dtoTasks.filter(p => p.NotificationId === 1 && p.Void === false);
                if (notifs.length > 1) {
                    this.logger.logError(new Error('More than 1 notif has NotificationId = 1'));
                }
            }
            catch (error) {
                // console.log('Error processAllGroupsAndTasks local', error);
                this.logger.logError(error);
            }
        });
    }
    // todo: try to move this out of this class
    setSyncedToTrue(resultRemote) {
        resultRemote.forEach(p => {
            p.Synced = true;
            p.Sent = true;
            p.Histories.forEach(t => {
                t.Synced = true;
                t.Sent = true;
            });
        });
    }
    getTaskListDTORequest() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            const request = new _models_DTO_dto_get_calendar_task_request__WEBPACK_IMPORTED_MODULE_0__.DTOGetCalendarTaskRequest();
            request.userId = yield this.userService.getCurrentUserId();
            // console.log('USERID TEST = ', request.userId);
            request.IncludeVoid = false;
            request.DateStart = _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].YearAgo();
            request.DateEnd = _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].Tomorrow();
            return request;
        });
    }
    getTaskHistoryNoVoid(task, workDate) {
        if (task.Void === true) {
            return new _models_Core_task_history__WEBPACK_IMPORTED_MODULE_8__.TaskHistory();
        }
        if (task.InsertDate != null && this.dateService.GetWorkDate(task.InsertDate) > workDate) {
            return new _models_Core_task_history__WEBPACK_IMPORTED_MODULE_8__.TaskHistory();
        }
        const histories = task.GetDoneHistoriesNoVoid(workDate);
        if (histories != null && histories.length > 0) {
            if (histories.length === 1) {
                return histories[0];
            }
            else {
                if (histories.filter(p => p.InsertDate != null).length === 0) {
                    this.logger.logEvent('histories.filter(p => p.InsertDate != null).length === 0', {
                        key: 'histories',
                        value: JSON.stringify(histories)
                    });
                    const indexNotSkipped = histories.findIndex(p => p.TaskSkipped === false);
                    if (indexNotSkipped !== -1) {
                        return histories[indexNotSkipped];
                    }
                    else {
                        this.logger.logEvent('returning histories[0]', {
                            key: 'histories',
                            value: JSON.stringify(histories)
                        });
                        return histories[0];
                    }
                }
                else {
                    return histories.filter(p => p.InsertDate != null)
                        .sort((a, b) => {
                        return b.InsertDate.getTime() - a.InsertDate.getTime();
                    })[0];
                }
            }
        }
        else {
            return new _models_Core_task_history__WEBPACK_IMPORTED_MODULE_8__.TaskHistory();
        }
    }
    isDone(task, taskHistoryNoVoid) {
        // console.log('Origin isDone should only be called once');
        if (task.Frequency === _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Once ||
            task.Frequency === _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.UntilDone) {
            return task.Histories.some(p => !p.Void && p.TaskDone);
        }
        else {
            return taskHistoryNoVoid.TaskDone;
        }
    }
    isDoneAtDate(task, workDate, taskHistoryNoVoid) {
        // console.log('Origin IsDoneAtDate');
        if (task.Frequency === _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Once ||
            task.Frequency === _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.UntilDone) {
            return task.GetDoneHistoriesNoVoid(workDate)
                .some(p => p.TaskDone);
        }
        else {
            return taskHistoryNoVoid.TaskDone;
        }
    }
    getDoneWorkDate(task) {
        // console.log('[getDoneWorkDate] This is exponential');
        const doneHistories = task.Histories.filter(p => !p.Void && p.TaskDone);
        if (doneHistories != null && doneHistories.length > 0) {
            return doneHistories[0].DoneWorkDate;
        }
        else {
            return null;
        }
    }
    isSkipped(taskHistoryNoVoid) {
        // console.log('Origin IsSkipped');
        return taskHistoryNoVoid.TaskSkipped;
    }
    isDoneOrSkipped(task, workDate) {
        // console.log('Origin IsDoneOrSkipped');
        const history = this.getTaskHistoryNoVoid(task, workDate);
        if (history.DoneWorkDate != null || history.TaskSkipped) {
            return true;
        }
        else {
            return false;
        }
    }
    // TODO : This is called twice on loading, which calls everything twice
    isShown(task, day, workDate) {
        if (task.Void === true) {
            return false;
        }
        if (task.InsertDate != null && this.dateService.GetWorkDate(task.InsertDate) > workDate) {
            return false;
        }
        if (task.SkipUntil != null &&
            task.SkipUntil > workDate) {
            return false;
        }
        if (task.Frequency === _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Daily) {
            return task.RequiredDays.some(t => t === day);
        }
        else if (task.Frequency === _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.Once) {
            return _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].datesAreEqual(task.AssignedDate, workDate);
        }
        else if (task.Frequency === _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_6__.TaskFrequency.UntilDone) {
            const doneWorkDate = this.getDoneWorkDate(task);
            if (doneWorkDate != null) {
                return doneWorkDate >= workDate;
            }
            else {
                return task.AssignedDate <= workDate;
            }
        }
    }
    hasNote(task, workDate) {
        // console.log('Origin hasNote');
        const history = this.getTaskHistoryNoVoid(task, workDate);
        return history != null && history.Comment != null && history.Comment.length > 0;
    }
    getPreviousDayTaskHistoryNoVoid(task, minusDays) {
        // console.log('[2]datesAreEqual getPreviousDayTaskHistoryNoVoid');
        const targetWorkDate = _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].AddDays(_shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].Today(), -minusDays);
        const history = task.GetDoneHistoriesNoVoid(targetWorkDate)[0];
        if (history != null) {
            return history;
        }
        else {
            return new _models_Core_task_history__WEBPACK_IMPORTED_MODULE_8__.TaskHistory();
        }
    }
    removeDuplicates(set) {
        const seen = {};
        return set.filter((item) => {
            const k = item.TaskHistoryId;
            return seen.hasOwnProperty(k) ? false : (seen[k] = true);
        });
    }
    SetHistoriesMap(task) {
        // console.log('Setting Histories Map', task.Name);
        let firstWorkDate;
        task.HistoriesMap.clear();
        // TODO : Remove Temporary patch ? Put in place in 2020-06-04 because somehow some duplicates got created
        task.Histories = this.removeDuplicates(task.Histories);
        for (const history of task.Histories) {
            if (history.Void) {
                continue;
            }
            if (history.DoneWorkDate == null) { // patch for retro compatibility but hurts performance
                history.DoneWorkDate = this.dateService.GetWorkDate(history.DoneDate);
            }
            let existingHistories = task.HistoriesMap.get(history.DoneWorkDate.toISOString());
            if (existingHistories == null) {
                existingHistories = [];
            }
            existingHistories.push(history);
            task.HistoriesMap.set(history.DoneWorkDate.toISOString(), existingHistories);
            if (history.DoneWorkDate < firstWorkDate || firstWorkDate == null) {
                firstWorkDate = history.DoneWorkDate;
            }
        }
        task.MinimumStartingMinusDay = _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].daysBetween(firstWorkDate, new Date());
        // console.log('minimumstartingminusday = ', task.MinimumStartingMinusDay);
    }
    getTaskResult(currentTask, workDate) {
        // console.log('Origin getTaskResult');
        const history = this.getTaskHistoryNoVoid(currentTask, workDate);
        if (currentTask.isTime()) {
            return this.datepipe.transform(history.TaskResult, 'HH:mm');
        }
        else if (currentTask.isDuration()) {
            return history.getDurationString();
        }
        else {
            return String(history.TaskResult);
        }
    }
    getTaskResultFromHistory(currentTask, history) {
        // console.log('Origin getTaskResult');
        if (currentTask.isTime()) {
            return this.datepipe.transform(history.TaskResult, 'HH:mm');
        }
        else if (currentTask.isDuration()) {
            return history.getDurationString();
        }
        else {
            return String(history.TaskResult);
        }
    }
    /////////////////////////////////////////////////////////////
    ////////////////////     GROUPS     /////////////////////////
    /////////////////////////////////////////////////////////////
    assignTasksAndProcessUnassigned(dtoTasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('DTOTASKS', dtoTasks, this.getAllTasks());
            // Last position
            let position = 1;
            if (this.allGroups.filter(p => p.GroupId !== CalendarTaskService_1.UnassignedId).length > 0) {
                position = Math.max(...this.allGroups.map(p => p.Position)) + 1;
            }
            const group1 = new _models_Core_task_group__WEBPACK_IMPORTED_MODULE_12__.TaskGroup();
            group1.Name = 'Unassigned';
            group1.Position = position;
            group1.InitialPosition = position;
            group1.ColorHex = '#D1D1D1';
            group1.isVisible = true;
            group1.isUnassigned = true;
            group1.GroupId = CalendarTaskService_1.UnassignedId;
            this.allGroups.push(group1);
            // TODO : This is extremely innefficient
            // Add tasks to groups + convert from DTO
            for (const task of dtoTasks) {
                const index = this.allGroups.findIndex(p => p.GroupId === task.GroupId);
                if (index >= 0) {
                    this.allGroups[index].Tasks.push(_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_2__.CalendarTask.fromDTO(task));
                }
                else {
                    //task.GroupId = null;
                    task.GroupId = CalendarTaskService_1.UnassignedId;
                    group1.Tasks.push(_models_Core_calendar_task__WEBPACK_IMPORTED_MODULE_2__.CalendarTask.fromDTO(task));
                }
            }
            // console.log('4444 assign tasks done');
        });
    }
    sortTasksAndGroups() {
        for (const group of this.allGroups) {
            group.Tasks = group.Tasks.sort((x, y) => x.AbsolutePosition > y.AbsolutePosition ? 1 : -1);
            // CREATE HISTORYMAP
            // TODO : Not sure we need this ? taskListResult.filter(p => p.Frequency !== TaskFrequency.UntilDone || p.AssignedDate != null);
            for (const task of group.Tasks) {
                this.SetHistoriesMap(task);
            }
        }
        // SORT GROUPS
        this.allGroups = this.allGroups.sort((x, y) => x.Position > y.Position ? 1 : -1);
    }
    setGroupsVisible() {
        // console.log('SETGROUPSVISIBLE');
        for (const group of this.allGroups) {
            if (group.Void === true || group.Tasks.length === 0) {
                // console.log('GROUP ' + group.Name + 'NOT VISIBLE BECAUSE VOIDED OR EMPTY');
                group.isVisible = false;
            }
            else {
                if (group.Tasks.length === 0 ||
                    !group.Tasks.some(p => this.isShown(p, this.dateService.currentWorkDate.getDay(), this.dateService.currentWorkDate))) {
                    // console.log('GROUP ' + group.Name + 'NOT VISIBLE BECAUSE NO PRESENT TASK');
                    group.isVisible = false;
                }
                else {
                    // console.log('GROUP ' + group.Name + 'VISIBLE BECAUSE PREVENT TASK');
                    group.isVisible = true;
                }
            }
        }
    }
    getAllGroupsFromServer() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('getAllGroupsFromServer');
            const userId = yield this.userService.getCurrentUserId();
            const resultRemote = yield this.apiProvider.getGroups(userId);
            // todo: try to move this out of this class
            if (resultRemote != null && resultRemote.length > 0) {
                console.log('RESULT FROM SERVER GROUPS', resultRemote);
                this.setGroupSyncedToTrue(resultRemote);
                // await this.local.setGroups(resultRemote, false);
                return resultRemote;
            }
            else {
                this.logger.logError(new Error('updating task'));
                throw new Error('unable to get data from server');
            }
        });
    }
    setGroupSyncedToTrue(resultRemote) {
        resultRemote.forEach(p => {
            p.Synced = true;
            p.Sent = true;
        });
    }
    insertGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('INSERTING GROUP ', group);
            group.UpdateDate = new Date();
            group.InsertDate = new Date();
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.SyncRequired, null));
            // Check if AbsolutePosition already exists
            const existingGroups = this.allGroups.filter(p => p.Position === group.Position);
            if (existingGroups.length > 0) {
                group.InitialPosition = Math.max(...this.allGroups.map(p => p.Position)) + 1;
                // console.log('Position already exists, reordering tasks, task =, InitialPosition=', existingTasks, group.InitialPosition);
                yield this.reorderGroups(group); // it's very long we have to optimize this
            }
            else {
                // console.log('Position does not already exist, InitialPosition=', group.InitialPosition);
            }
            this.allGroups.push(group);
            this.allGroups = this.getSortedGroups(this.allGroups);
            yield this.localDataSync.queueInsertGroup(group.toDTO());
            yield this.localDataSync.queueUpdateCalendarTasks(group.Tasks.map(p => p.toDTO()), false);
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.SyncRequired, null));
            // REMOVE TASKS FROM OTHER GROUPS
            // TODO : This is very innefficient
            const otherGroups = this.allGroups.filter(p => p.GroupId !== group.GroupId);
            for (const otherGroup of otherGroups) {
                for (const task of group.Tasks) {
                    if (otherGroup.Tasks.map(p => p.CalendarTaskId).some(p => p === task.CalendarTaskId)) {
                        // console.log('REMOVING FROM OTHER GROUP : ', task.Name);
                        otherGroup.Tasks = otherGroup.Tasks.filter(p => p.CalendarTaskId !== task.CalendarTaskId);
                    }
                }
            }
            this.setGroupsVisible(); // TODO: This is probably inefficient
        });
    }
    updateGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            console.log('UPDATING GROUP', group);
            group.UpdateDate = new Date();
            // REORDER
            if (group.Position !== group.InitialPosition &&
                group.Void === false) {
                // console.log('reordering task necessary', new Date().toISOString());
                yield this.reorderGroups(group);
            }
            //console.log('NEW GROUP ORDER : ', this.allGroups);
            yield this.localDataSync.queueUpdateGroup(group.toDTO(), false);
            // REMOVE TASKS FROM OTHER GROUPS
            // TODO : This is very innefficient
            const otherGroups = this.allGroups.filter(p => p.GroupId !== group.GroupId);
            for (const otherGroup of otherGroups) {
                for (const task of group.Tasks) {
                    if (otherGroup.Tasks.map(p => p.CalendarTaskId).some(p => p === task.CalendarTaskId)) {
                        // console.log('REMOVING FROM OTHER GROUP : ', task.Name);
                        otherGroup.Tasks = otherGroup.Tasks.filter(p => p.CalendarTaskId !== task.CalendarTaskId);
                    }
                }
            }
            // Put back tasks into unassigned for void
            if (group.Void === true) {
                const toUpdateTasks = [];
                const unassignedGroup = this.getGroup(CalendarTaskService_1.UnassignedId);
                for (const task of this.getAllTasks()) {
                    if (task.GroupId === group.GroupId) {
                        task.GroupId = CalendarTaskService_1.UnassignedId;
                        // console.log('Setting to sync = false', task);
                        task.Synced = false;
                        unassignedGroup.Tasks.push(task);
                        // console.log('UNASSIGNED GROUP', unassignedGroup);
                        toUpdateTasks.push(task);
                    }
                }
                if (toUpdateTasks.length > 0) {
                    console.log('ToUpdateGroups');
                    yield this.localDataSync.queueUpdateCalendarTasks(toUpdateTasks.map(p => p.toDTO()), false);
                }
                // Remove from groups if voided
                // Update : cant do that because if we delete it has to stay in memory
                // const index = this.allGroups.findIndex(p => p.GroupId === group.GroupId);
                // this.allGroups.splice(index, 1);
            }
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_14__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_14__.EventService.EventIds.SyncRequired, null));
            this.setGroupsVisible();
            return true;
        });
    }
    getUnassignedGroup() {
        const index = this.allGroups.findIndex(p => p.isUnassigned === true);
        return this.allGroups[index];
    }
    reorderGroups(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            const difference = group.Position - group.InitialPosition;
            const lowest = Math.min(group.Position, group.InitialPosition);
            const highest = Math.max(group.Position, group.InitialPosition);
            let groups = this.allGroups
                .filter(p => p.Position >= lowest &&
                p.Position <= highest);
            this.logger.logEvent('REORDERING GROUP POSITIONS', {
                key: 'positions',
                value: JSON.stringify(groups.map(p => p.Position))
            });
            if (_shared_number_utils__WEBPACK_IMPORTED_MODULE_11__["default"].checkIfDuplicateExists(groups.filter(p => p.GroupId !== group.GroupId)
                .map(p => p.Position))) { // reorder all if 2 are the same
                this.logger.logEvent('Update all tasks', { key: 'group.userId', value: JSON.stringify(group.UserId) });
                yield this.reorderAllGroups(group);
            }
            else {
                this.logger.logEvent('Update NOT all tasks', { key: 'group.userId', value: JSON.stringify(group.UserId) });
                // reorder only between current and new Id
                groups = groups.filter(p => p.Position >= lowest &&
                    p.Position <= highest &&
                    p.GroupId !== group.GroupId);
                for (const currentGroup of groups) {
                    if (difference < 0) {
                        const newPosition = currentGroup.Position + 1;
                        currentGroup.Position = newPosition;
                        currentGroup.InitialPosition = newPosition;
                    }
                    else {
                        const newPosition = currentGroup.Position - 1;
                        currentGroup.Position = newPosition;
                        currentGroup.InitialPosition = newPosition;
                    }
                }
                console.log('REORDERED GROUPS : ', groups);
                this.reorderAllRamGroups();
                yield this.updateGroupsAsyncNoPositionCheckBatch(groups);
            }
            // this.logger.logEvent('Update completed');
        });
    }
    reorderAllGroups(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            console.log('reorder all groups', group);
            let groups = this.allGroups
                .filter(p => p.GroupId !== group.GroupId);
            groups.push(group);
            groups = groups.sort((x, y) => x.Position > y.Position ? 1 : -1);
            console.log('sorted groups', groups);
            let positionIterator = 1;
            for (const g of groups) {
                g.Position = positionIterator++;
                g.InitialPosition = g.InitialPosition;
            }
            yield this.updateGroupsAsyncNoPositionCheckBatch(groups);
        });
    }
    reorderAllRamGroups() {
        this.allGroups = this.allGroups.sort((x, y) => x.Position > y.Position ? 1 : -1);
    }
    updateGroupsAsyncNoPositionCheckBatch(groups, synced = true) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__awaiter)(this, void 0, void 0, function* () {
            console.log('updateGroupsAsyncNoPositionCheckBatch', groups, synced);
            groups.forEach(p => p.Synced = synced);
            for (const group of groups) {
                const index = this.allGroups.findIndex(p => p.GroupId === group.GroupId);
                this.allGroups[index] = group;
            }
            yield this.localDataSync.queueUpdateGroups(groups.map(p => p.toDTO()), synced);
            return true;
        });
    }
    getSortedGroups(taskListResult) {
        return taskListResult.sort((a, b) => {
            const diff = a.Position - b.Position;
            if (diff) {
                return diff;
            }
        });
    }
    getSortedTasksFromTasks(tasks) {
        const result = tasks.sort((x, y) => x.AbsolutePosition > y.AbsolutePosition ||
            (x.AbsolutePosition === y.AbsolutePosition &&
                x.InitialAbsolutePosition < y.InitialAbsolutePosition) ? 1 : -1);
        result.forEach(p => p.InitialAbsolutePosition = p.AbsolutePosition);
        return result;
    }
    setProgressText(currentWorkDate) {
        this.currentProgressTotal = 0;
        this.currentProgressDone = 0;
        const currentWorkDay = currentWorkDate.getDay();
        // Completed Text // most be done lazy loading
        for (const group of this.allGroups) {
            // Set Local progress
            group.ProgressTotal = group.Tasks.filter(p => this.isShown(p, currentWorkDay, currentWorkDate) ||
                this.isSkipped(this.getTaskHistoryNoVoid(p, currentWorkDate))).length;
            // console.log('PROGRESS TOTAL ' + group.Name, group.ProgressTotal);
            group.ProgressDone = group.Tasks.filter(p => p.Void !== true &&
                this.isDoneOrSkipped(p, currentWorkDate)).length;
            // Increment max for the top progress
            this.currentProgressTotal += group.ProgressTotal;
            this.currentProgressDone += group.ProgressDone;
            // Set Text
            group.ProgressText = group.ProgressDone.toString() + '/' + group.ProgressTotal.toString();
        }
        this.currentProgressText = this.currentProgressDone.toString() + '/' + this.currentProgressTotal.toString();
        this.currentProgressValue = this.currentProgressTotal === 0 ? 0 : this.currentProgressDone / this.currentProgressTotal;
    }
};
CalendarTaskService.UnassignedId = 'unassigned';
CalendarTaskService.ctorParameters = () => [
    { type: _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_4__.IApiProvider },
    { type: _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_5__.ILocalStorageService },
    { type: _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_10__.IDataSyncLocalService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_7__.ILogger },
    { type: _date_service__WEBPACK_IMPORTED_MODULE_9__.DateService },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_17__.DatePipe },
    { type: _user_service__WEBPACK_IMPORTED_MODULE_13__.UserService },
    { type: _event_service__WEBPACK_IMPORTED_MODULE_14__.EventService }
];
CalendarTaskService = CalendarTaskService_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_15__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_18__.Injectable)({
        providedIn: 'root'
    })
], CalendarTaskService);



/***/ }),

/***/ 34408:
/*!***********************************************!*\
  !*** ./src/app/services/changelog.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChangelogService": () => (/* binding */ ChangelogService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/Core/release-note */ 94958);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interfaces/i-local-storage-service */ 5295);






let ChangelogService = class ChangelogService {
    constructor(//private appVersion: AppVersion,
    storage, alertCtrl, translate) {
        this.storage = storage;
        this.alertCtrl = alertCtrl;
        this.translate = translate;
    }
    showChangeLogsAndSetToViewed() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            /*const currentVersion = await this.appVersion.getVersionNumber(); TODO CAPACITOR
            const shouldViewChangeLog = await this.storage.shouldViewChangeLog(currentVersion);
            if (shouldViewChangeLog === true) {
              const releaseNotes = this.getReleaseNote(currentVersion);
              if (releaseNotes != null) {
                const message: string = this.getFormattedReleaseNotes(releaseNotes);
        
                const alert = await this.alertCtrl.create({
                  message,
                  buttons: [
                    {
                      text: 'Ok',
                      handler: () => {
                        this.storage.setChangeLogToViewed(currentVersion);
                      }
                    },
                  ]
                });
        
                await alert.present();
              }
            }*/
        });
    }
    showAllChangeLogs() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const releaseNotes = this.getReleaseNotes();
            if (releaseNotes != null) {
                const message = this.getAllFormattedReleaseNotes(releaseNotes);
                const alert = yield this.alertCtrl.create({
                    message,
                    buttons: [
                        {
                            text: 'Ok',
                        },
                    ]
                });
                yield alert.present();
            }
        });
    }
    getFormattedReleaseNotes(releaseNotes) {
        const lines = [];
        if (releaseNotes.BugFixesEn.length > 0) {
            if (this.translate.currentLang === 'en') {
                lines.push('BUG FIXES :<br/>');
                releaseNotes.BugFixesEn.forEach(p => lines.push('- ' + p + '<br/>'));
            }
            else {
                lines.push('BUGS CORRIGÉS :<br/>');
                releaseNotes.BugFixesFr.forEach(p => lines.push('- ' + p + '<br/>'));
            }
        }
        if (releaseNotes.FeaturesEn.length > 0) {
            if (this.translate.currentLang === 'en') {
                lines.push('FEATURES :<br/>');
                releaseNotes.FeaturesEn.forEach(p => lines.push('- ' + p + '<br/>'));
            }
            else {
                lines.push('FONCTIONNALITÉS :<br/>');
                releaseNotes.FeaturesFr.forEach(p => lines.push('- ' + p + '<br/>'));
            }
        }
        return lines.join('<br>');
    }
    getAllFormattedReleaseNotes(releaseNotes) {
        const lines = [];
        const sortedNotes = releaseNotes.reverse();
        for (const note of sortedNotes) {
            lines.push('Version ' + note.Version);
            lines.push('<br>');
            lines.push('<br>');
            lines.push(this.getFormattedReleaseNotes(note));
            lines.push('<br>');
            lines.push('=======================');
            lines.push('<br>');
        }
        // console.log(lines.join(''));
        return lines.join('');
    }
    getReleaseNote(version) {
        const allNotes = this.getReleaseNotes();
        const releventNotes = allNotes.filter(p => p.Version === version);
        if (releventNotes != null && releventNotes.length === 1) {
            return releventNotes[0];
        }
        else {
            // TODO: throw error
            return null;
        }
    }
    getReleaseNotes() {
        const releaseNotes = [];
        let releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.7';
        releaseNote.BugFixesEn.push('The timer pause button was not working properly because ' +
            'the start button was not resseting its paused state');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.8';
        releaseNote.FeaturesEn.push('A new AddComment button was added which enables the user to ' +
            'add a comment on a Task Result');
        releaseNote.FeaturesEn.push('The current task result is now part of the result charts');
        releaseNote.FeaturesEn.push('Feedback can now be sent using the Sent Feedback button in the main menu');
        releaseNote.FeaturesEn.push('The buttons on the menu are now all the same size');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.9';
        releaseNote.FeaturesEn.push('Added Task Frequencies : Once and Once until done. Available in task creation or task editting');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.10';
        releaseNote.FeaturesEn.push('Tasklist buttons layout alignment changed');
        releaseNote.FeaturesEn.push('Create and Edit task layout changed');
        releaseNote.BugFixesEn.push('The application should minimize instead of stopping when clicking back button');
        releaseNote.BugFixesEn.push('Task name and position is now validated');
        releaseNote.BugFixesEn.push('Task assigned date can\'t be null for Once tasks');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.12';
        releaseNote.FeaturesEn.push('Added message: Checking for update on Checking for update button');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.14';
        releaseNote.BugFixesEn.push('Fixed timer when device is sleeping on android');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.16';
        releaseNote.FeaturesEn.push('Removed all login options except email');
        releaseNote.FeaturesEn.push('French option added (not yet fully functionnal)');
        releaseNote.BugFixesEn.push('Assigned date can now be later than the current year');
        releaseNote.BugFixesEn.push('Previous and Next date buttons now work properly');
        releaseNote.BugFixesEn.push('Results entered are now instantly shown');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.17';
        releaseNote.BugFixesEn.push('Results entered are now instantly shown');
        releaseNote.BugFixesEn.push('Data synchronisation doesn\'t modify display anymore');
        releaseNote.BugFixesEn.push('Synchronization problems fixed');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.0.18';
        releaseNote.BugFixesEn.push('Non reccuring tasks will stop appearing after they are done');
        releaseNote.BugFixesEn.push('Started or paused timer will reappear if you change date and come back');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.0';
        releaseNote.FeaturesEn.push('The next task does\'t get selected anymore');
        releaseNote.FeaturesEn.push('Starting the timer only shows the timer');
        releaseNote.FeaturesEn.push('The stats only get displayed when click on the stats button');
        releaseNote.FeaturesEn.push('Stats for Sleeping time and for Fasting time added');
        releaseNote.FeaturesEn.push('Stats for 1 week, 1 month, 3 months or 1 year available');
        releaseNote.FeaturesEn.push('Task selection menu added, and automatically appears when user has no task yet');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.1';
        releaseNote.FeaturesEn.push('Added back button to create task component');
        releaseNote.FeaturesEn.push('Stats always shown when clicking on Show Stats');
        releaseNote.FeaturesEn.push('Task card buttons rearranged into a grid');
        releaseNote.FeaturesEn.push('Bigger mininum stat rectangle size');
        releaseNote.FeaturesEn.push('Changed DateTime format for task durations');
        releaseNote.FeaturesEn.push('Seconds are displayed and can be entered for durations');
        releaseNote.FeaturesEn.push('Done duration task can be resumed');
        releaseNote.FeaturesEn.push('Most buttons are now hidden when viewing the future');
        releaseNote.BugFixesEn.push('Stats start from -1 instead of -8');
        releaseNote.BugFixesEn.push('Timer now isnt displayed when a task is done');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.2';
        releaseNote.FeaturesEn.push('Added a majority of french translations');
        releaseNote.BugFixesEn.push('Fixed multiple timer issues');
        releaseNote.BugFixesEn.push('Fixed multiple duration issues');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.13';
        releaseNote.BugFixesEn.push('Fixed broken app');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.4';
        releaseNote.FeaturesEn.push('Ionic updated to version 5');
        releaseNote.FeaturesEn.push('Create Task and Edit Task UI improved');
        releaseNote.BugFixesEn.push('Create non-recurring task now gets created as non-recurring');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.5';
        releaseNote.BugFixesEn.push('Fixed stats buttons localization');
        releaseNote.BugFixesEn.push('Fixed Single day vs Until done on Create/Edit task');
        releaseNote.BugFixesEn.push('Local data isn\'t accessible from another account');
        releaseNote.BugFixesEn.push('Can\'t create a daily task where there is no selected required days');
        releaseNote.FeaturesEn.push('Comment is displayed after adding comment');
        releaseNote.FeaturesEn.push('Cards get unselected when changing date');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.6';
        releaseNote.BugFixesEn.push('Fixed some translations that were not loading properly');
        releaseNote.BugFixesEn.push('Fixed resume timer which was bugged when phone was sleeping');
        releaseNote.BugFixesEn.push('Duration now show as HH:mm in stats instead of total seconds');
        releaseNote.BugFixesEn.push('Menu title position fixed');
        releaseNote.BugFixesEn.push('Until Done task doesn\'t appear one month later anymore');
        releaseNote.FeaturesEn.push('Language preference is now saved');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.7';
        releaseNote.BugFixesEn.push('Lazy load stats + graph in order to improve performance');
        releaseNote.BugFixesEn.push('Used push component update instead of function binding to greatly improve performance');
        releaseNote.FeaturesEn.push('Added popup to validate time of day for end of day tasks');
        releaseNote.FeaturesEn.push('Hidden show stats button for Once tasks');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.8';
        releaseNote.BugFixesEn.push('Fixed Results that were not showing');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.9';
        releaseNote.FeaturesEn.push('Default task position can be chosen');
        releaseNote.BugFixesEn.push('Release notes button was not working');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.10';
        releaseNote.FeaturesEn.push('Skip until button added for non-recurring tasks');
        releaseNote.FeaturesEn.push('Skip All button added for previous days where not all tasks have been completed');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.11';
        releaseNote.BugFixesEn.push('Resume button doesn\'t show after voiding a task');
        releaseNote.BugFixesEn.push('Added comment is shown');
        releaseNote.BugFixesEn.push('Prod and Dev are different environments');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.13';
        releaseNote.FeaturesEn.push('Changelog messages also available in french');
        releaseNote.FeaturesFr.push('Messages de mises à jour disponibles en français');
        releaseNote.FeaturesEn.push('We can choose bug/feature when sending feedback');
        releaseNote.FeaturesFr.push('On peut choisir entre bug/feature lorsqu\'on envoie du feedback');
        releaseNote.BugFixesEn.push('Improved performance');
        releaseNote.BugFixesFr.push('Amélioration de performance');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.14';
        releaseNote.BugFixesEn.push('Improved some french localizations');
        releaseNote.BugFixesFr.push('Amélioration du français');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.15';
        releaseNote.BugFixesEn.push('Fixed decimal value which was not working in french');
        releaseNote.BugFixesFr.push('Corrigé les valeurs décimales qui ne fonctionnaient pas en français');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.16';
        releaseNote.BugFixesEn.push('Fixed time value which was not working in french');
        releaseNote.BugFixesFr.push('Corrigé les valeurs de temps qui ne fonctionnaient pas en français');
        releaseNote.BugFixesEn.push('Fixed comments which were not working in french');
        releaseNote.BugFixesFr.push('Corrigé les commentaires qui ne fonctionnaient pas en français');
        releaseNote.BugFixesEn.push('Fixed changelogs which were displayed in english');
        releaseNote.BugFixesFr.push('Corrigé la liste de changements qui apparaissait en anglais');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.17';
        releaseNote.FeaturesEn.push('Added save icon in task selection page');
        releaseNote.FeaturesFr.push('Ajouté un icône de sauvegarde sur la page de sélection de tâches');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.18';
        releaseNote.FeaturesEn.push('Added native back button functionality');
        releaseNote.FeaturesFr.push('Ajouté fonctionalité de bouton retour natif');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.19';
        releaseNote.BugFixesEn.push('Centered text in task selection page');
        releaseNote.BugFixesFr.push('Centré le text dans la page de sélection de tâches');
        releaseNote.BugFixesEn.push('When backing out of editting task, there is no warning popup if nothing was changed');
        releaseNote.BugFixesFr.push('Lorsque la page de modification de tâche est fermée il n\'y a plus de message ' +
            'd\'avertissement si la tâche n\'a pas été modifiée');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.20';
        releaseNote.FeaturesEn.push('Statistics now display today\'s value');
        releaseNote.FeaturesFr.push('Les statistiques affichent maintenant la valeur d\'aujourd\'hui');
        releaseNote.BugFixesEn.push('Fixed statistics display bugs');
        releaseNote.BugFixesFr.push('Corrigé des bugs d\'affichage de statistiques');
        releaseNote.BugFixesEn.push('Fixed future false results that were shown');
        releaseNote.BugFixesFr.push('Enlevé des faux résultats futurs qui s\'affichaient');
        releaseNote.BugFixesEn.push('Fixed future buttons that were not dissapearing');
        releaseNote.BugFixesFr.push('Corrigé boutons futurs qui ne dispasaissaient pas');
        releaseNote.BugFixesEn.push('Added loading animation when postponing');
        releaseNote.BugFixesFr.push('Ajouté une animation lors d\'une remise à plus tard');
        releaseNote.BugFixesEn.push('Fixed progress bar that was showing wrong numbers');
        releaseNote.BugFixesFr.push('Corrigé la barre de progrès qui indiquait des mauvais chiffres');
        releaseNote.BugFixesEn.push('Removed loading popup for Resume Timer');
        releaseNote.BugFixesFr.push('Enlevé le popup de chargement lors de continuer timer');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.21';
        releaseNote.FeaturesEn.push('New users can choose language before choosing tasks');
        releaseNote.FeaturesFr.push('Les nouveaux utilisateurs peuvent choisir leur langue avant de choisir leur tâches');
        releaseNote.FeaturesEn.push('Tasks selection cards are smaller');
        releaseNote.FeaturesFr.push('Les cartes de la sélection de tâches sont plus petites');
        releaseNote.BugFixesEn.push('Task type was not working properly in Edit Task');
        releaseNote.BugFixesFr.push('Type de tâche ne fonctionnait pas correctement dans Modifier Tâche');
        releaseNote.BugFixesEn.push('Task selection cards were not saved properly');
        releaseNote.BugFixesFr.push('La sélection de tâche ne s\'enregistrait pas');
        releaseNote.BugFixesEn.push('Old tasks were appearing in position selection');
        releaseNote.BugFixesFr.push('Anciennes tâches qui apparaîssaient dans la sélection de la position');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.22';
        releaseNote.BugFixesEn.push('Task reordering was not working properly');
        releaseNote.BugFixesFr.push('L\'ordre des tâches ne fonctionnait pas bien');
        releaseNote.BugFixesEn.push('History doesn\'t get deleted when modifying task');
        releaseNote.BugFixesFr.push('L\'historique ne se fait plus supprimer lors de modification de tâche');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.23';
        releaseNote.FeaturesEn.push('Task reordering improved');
        releaseNote.FeaturesFr.push('Amélioration du changement de l\'ordre des tâches');
        releaseNote.FeaturesEn.push('Added max, average, total for stats');
        releaseNote.FeaturesFr.push('Ajouté max, moyenne et total pour les statistiques');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.25';
        releaseNote.FeaturesEn.push('Task reordering improved');
        releaseNote.FeaturesFr.push('Amélioration du changement de l\'ordre des tâches');
        releaseNote.FeaturesEn.push('Settings page added');
        releaseNote.FeaturesFr.push('Ajout d\'une page de configuration');
        releaseNote.FeaturesEn.push('End of day setting added');
        releaseNote.FeaturesFr.push('Ajout de configuration d\'heure de fin de journée');
        releaseNote.BugFixesEn.push('Stat maximum is 0 when there is no data');
        releaseNote.BugFixesFr.push('La statistique maximum est 0 lorsqu\'aucune donnée');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.26';
        releaseNote.FeaturesEn.push('Dates displayed on horizontal axis on charts');
        releaseNote.FeaturesFr.push('Dates affichées sur l\'axe horizontal sur les graphiques');
        releaseNote.BugFixesEn.push('Tasks reordering improved');
        releaseNote.BugFixesFr.push('Changement d\'ordre des tâches amélioré');
        releaseNote.BugFixesEn.push('Fixed wrong day total');
        releaseNote.BugFixesFr.push('Corrigé bug total de la journée qui n\'était pas bon');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.27';
        releaseNote.FeaturesEn.push('Added a tab to separate chart from data details');
        releaseNote.FeaturesFr.push('Ajouté un onglet pour séparer les graphiques des détails des données');
        releaseNote.BugFixesEn.push('Default position was broken');
        releaseNote.BugFixesFr.push('Position par défaut ne fonctionnait plus');
        releaseNote.BugFixesEn.push('Improved performance');
        releaseNote.BugFixesFr.push('Amélioré performance');
        releaseNote.BugFixesEn.push('Postpone button now always appears on postponable tasks');
        releaseNote.BugFixesFr.push('Bouton Remettre apparaît toujours sur les tâches remettables');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.28';
        releaseNote.BugFixesEn.push('Too long to load task stats');
        releaseNote.BugFixesFr.push('Trop long à charger les statistiques d\'une tâche');
        releaseNote.BugFixesEn.push('Display bug for duration');
        releaseNote.BugFixesFr.push('Bug d\'affichage pour les durées');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.29';
        releaseNote.FeaturesEn.push('Added completion rate stats');
        releaseNote.FeaturesFr.push('Ajouté taux de complétion dans les statistiques');
        releaseNote.BugFixesEn.push('Task position displayed for debugging purposes');
        releaseNote.BugFixesFr.push('Position des tâches affichée pour débugger');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.30';
        releaseNote.FeaturesEn.push('Refreshing while a timer is on will prompt a warning');
        releaseNote.FeaturesFr.push('Ajout d\'un avertissement lorsqu\'on rafraichit pendant qu\'un timer est en marche');
        releaseNote.BugFixesEn.push('Reload from server doesn\'t delete your local data');
        releaseNote.BugFixesFr.push('Rafraîchir n\'écrase pas vos données locales');
        releaseNote.BugFixesEn.push('Task assigned tomorrow doesn\'t appear today');
        releaseNote.BugFixesFr.push('Tâches assignées à demain n\'apparaissent pas aujourd\'hui');
        releaseNote.BugFixesEn.push('Problem with created task ordering');
        releaseNote.BugFixesFr.push('Problème d\'ordre de nouvelle tâche créée');
        releaseNote.BugFixesEn.push('Pause and resume buttons were sometimes dissapearing');
        releaseNote.BugFixesFr.push('Les boutons Pause et Continuer disparaissaient parfois');
        releaseNote.BugFixesEn.push('Deleting a task was sometimes too slow');
        releaseNote.BugFixesFr.push('Effacer une tâche était parfois trop lent');
        releaseNote.BugFixesEn.push('New task\'s statistics were crashing the application');
        releaseNote.BugFixesFr.push('Les statistiques d\'une nouvelle tâche faisait planter l\'application');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.31';
        releaseNote.BugFixesEn.push('Fixed bug where data was not saved');
        releaseNote.BugFixesFr.push('Corrigé bug où les données n\'étaient pas sauvegardées');
        releaseNote.BugFixesEn.push('Automated current date update');
        releaseNote.BugFixesFr.push('Changement de la date courante automatique');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.32';
        releaseNote.BugFixesEn.push('Fixed bug where note could not be added');
        releaseNote.BugFixesFr.push('Corrigé bug où les notes ne pouvaient pas être ajoutées');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.39';
        releaseNote.BugFixesEn.push('Fixed timer that dissapeared when it was a resumed timer');
        releaseNote.BugFixesFr.push('Corrigé timer qui disparaissait lorsqu\'il était reparti');
        releaseNote.BugFixesEn.push('Fixed bug when selecting tasks');
        releaseNote.BugFixesFr.push('Corrigé bug lors de la sélection de tâches');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.40';
        releaseNote.BugFixesEn.push('Fixed task selection that was not working properly');
        releaseNote.BugFixesFr.push('Corrigé sélection de tâche qui ne fonctionnait pas bien');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.41';
        releaseNote.BugFixesEn.push('Fixed sleeping stats bug');
        releaseNote.BugFixesFr.push('Corrigé bug de statistiques de sommeil');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.42';
        releaseNote.BugFixesEn.push('Tasks shown in ordering popup are now only present and future tasks');
        releaseNote.BugFixesFr.push('Les tâches montrées dans le changement d\'ordre ne sont que les tâches présentes et futures');
        releaseNote.BugFixesEn.push('New task shows only stats from date creation');
        releaseNote.BugFixesFr.push('Les statistiques montrées ne sont que les statistiques depuis la création de la tâche');
        releaseNote.BugFixesEn.push('Time Sleep was sometimes saved with the wrong date');
        releaseNote.BugFixesFr.push('L\'Heure de sommeil était parfois enregistrée avec la mauvaise date');
        releaseNote.BugFixesEn.push('Fixed an error when creating a task');
        releaseNote.BugFixesFr.push('Corrigé une erreur lorsqu\'une tâche est créée');
        releaseNote.BugFixesEn.push('Improved reordering performance');
        releaseNote.BugFixesFr.push('Amélioré la performance du changement d\'ordre');
        // releaseNote.FeaturesEn.push('Automatically select the current time when entering a time');
        // releaseNote.FeaturesFr.push('L\'Heure présente est sélectionnée automatiquement lorsqu\'on entre une heure');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.44';
        releaseNote.BugFixesEn.push('Fixed database locked bug');
        releaseNote.BugFixesFr.push('Corrigé bug de base de donnée gelée');
        releaseNote.BugFixesEn.push('Fixed reordering bug');
        releaseNote.BugFixesFr.push('Corrigé bug de changement d\'ordre');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.45';
        releaseNote.BugFixesEn.push('Fixed reordering bug');
        releaseNote.BugFixesFr.push('Corrigé bug de changement d\'ordre');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.46';
        releaseNote.FeaturesEn.push('Added privacy policy');
        releaseNote.FeaturesFr.push('Ajout d\'une politique de confidentialité');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.49';
        releaseNote.FeaturesEn.push('Changed application name');
        releaseNote.FeaturesFr.push('Changé le nom de l\'application');
        releaseNote.FeaturesEn.push('Changed icon');
        releaseNote.FeaturesFr.push('Changé l\'icône');
        releaseNote.FeaturesEn.push('Removed splash screen');
        releaseNote.FeaturesFr.push('Enlevé le splash screen');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.50';
        releaseNote.FeaturesEn.push('Added Terms and conditions');
        releaseNote.FeaturesFr.push('Ajouté Termes et conditions');
        releaseNote.FeaturesEn.push('Timer doesn\'t dissapear when creating a task');
        releaseNote.FeaturesFr.push('Le timer ne disparaît pas lorsqu\'on crée une tâche');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.51';
        releaseNote.BugFixesEn.push('Sometimes tasks were getting created twice');
        releaseNote.BugFixesFr.push('Parfois les tâches étaient créées deux fois');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.54';
        releaseNote.BugFixesEn.push('Initial loading and date change loading is slightly faster');
        releaseNote.BugFixesFr.push('Le chargement et changement de date est un peu plus rapide');
        releaseNote.BugFixesEn.push('Improved performance when creating/inserting tasks or results');
        releaseNote.BugFixesFr.push('Amélioration de la performance lors de création/modification de tâches et de résultats');
        releaseNote.BugFixesEn.push('Stats get pre-loaded by a background thread');
        releaseNote.BugFixesFr.push('Les statistiques sont pré-chargées par un processus en arrière plan');
        releaseNote.BugFixesEn.push('Fix error when logging out');
        releaseNote.BugFixesFr.push('Corrigé erreur lors du logout');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.55';
        releaseNote.BugFixesEn.push('Fixed timer that wasn\'t working');
        releaseNote.BugFixesFr.push('Corrigé timer qui ne fonctionnait plus');
        releaseNote.BugFixesEn.push('Fixed stats that were not working');
        releaseNote.BugFixesFr.push('Corrigé statistiques qui ne fonctionnaient pas');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.56';
        releaseNote.BugFixesEn.push('Fixed stats that were not showing');
        releaseNote.BugFixesFr.push('Corrigé statistiques qui ne s\'affichaient pas');
        releaseNote.FeaturesEn.push('Removed some loading spinners');
        releaseNote.FeaturesFr.push('Enlevé quelque spinners de chargement');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.57';
        releaseNote.BugFixesEn.push('Calendar is smaller');
        releaseNote.BugFixesFr.push('Le calendrier est plus petit');
        releaseNote.BugFixesEn.push('Assigned date is now changed with a calendar');
        releaseNote.BugFixesFr.push('La date assignée est maintenant changée avec un calendrier');
        releaseNote.BugFixesEn.push('Time sleep now appears at the top of the charts');
        releaseNote.BugFixesFr.push('L\'Heure de sommeil apparaît maintenant au sommet des graphiques');
        releaseNote.BugFixesEn.push('Stopped displaying confirmation popup when entering 18:30 last meal');
        releaseNote.BugFixesFr.push('Enlevé le popup de confirmation lorsqu\'on entre un dernier repas à 18h30');
        releaseNote.FeaturesEn.push('Stop trying to sync when offline');
        releaseNote.FeaturesFr.push('Ne plus essayer de synchroniser lorsque hors ligne');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.58';
        releaseNote.BugFixesEn.push('The progress bar works when entering the application');
        releaseNote.BugFixesFr.push('La barre de progrès fonctionne lorsqu\'on entre dans l\'application');
        releaseNote.BugFixesEn.push('Lock ui when reloading');
        releaseNote.BugFixesFr.push('UI gelé lors du chargement');
        releaseNote.BugFixesEn.push('All \'yes\' buttons are on the right on dialogs');
        releaseNote.BugFixesFr.push('Tous les boutons \'oui\' sont à droite dans les dialogues');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.59';
        releaseNote.BugFixesEn.push('Removed loading popup when deleting a task');
        releaseNote.BugFixesFr.push('Enlevé le popup de chargement lorsqu\'une tâche est supprimée');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.61';
        releaseNote.FeaturesEn.push('Improved create/edit task UI as well as settings UI');
        releaseNote.FeaturesFr.push('Amélioré le UI de la création/modification de tâches ainsi que les configurations');
        releaseNote.FeaturesEn.push('Improved Landscape usability');
        releaseNote.FeaturesFr.push('Amélioré l\'utilisabilité du mode paysage');
        releaseNote.FeaturesEn.push('Added option to not sync data on server for privacy');
        releaseNote.FeaturesFr.push('Ajouté option pour ne pas synchroniser sur un serveur pour confidentialité');
        releaseNote.BugFixesEn.push('Bug in task ordering fixed');
        releaseNote.BugFixesFr.push('Corrigé bug sur l\'ordre des tâches');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.64';
        releaseNote.BugFixesEn.push('Changed timepicker implementation');
        releaseNote.BugFixesFr.push('Changé implémentation du timepicker');
        releaseNote.BugFixesEn.push('Tasks don\'t get created multiple times when spamming');
        releaseNote.BugFixesFr.push('Les tâches ne se font pas créer plusieurs fois si on spam');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.66';
        releaseNote.BugFixesEn.push('Bug in task ordering fixed');
        releaseNote.BugFixesFr.push('Corrigé bug sur l\'ordre des tâches');
        releaseNote.FeaturesEn.push('Inactive accounts are deleted after one year');
        releaseNote.FeaturesFr.push('Les comptes inactifs sont supprimés après un an d\'inactivité');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.67';
        releaseNote.BugFixesEn.push('Bug in task ordering fixed');
        releaseNote.BugFixesFr.push('Corrigé bug sur l\'ordre des tâches');
        releaseNote.BugFixesEn.push('Entering empty number value doesn\'t save');
        releaseNote.BugFixesFr.push('Ne rien entrer lorsqu\'on entre un nombre ne sauvegarde pas');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.68';
        releaseNote.BugFixesEn.push('Enter time for end of day is now centered');
        releaseNote.BugFixesFr.push('Entrer l\'heure de fin de journée le popup est maintenant centré');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.80';
        releaseNote.BugFixesEn.push('Fixed database is locked problem');
        releaseNote.BugFixesFr.push('Corrigé un problème de base de donnée barrée');
        releaseNote.BugFixesEn.push('Accelerated initial loading');
        releaseNote.BugFixesFr.push('Chargement initial accéléré');
        releaseNote.BugFixesEn.push('Added more logs for debugging');
        releaseNote.BugFixesFr.push('Ajouté des logs pour le débuggage');
        releaseNote.BugFixesEn.push('Fixed bug where data would keep trying to save because of duplicate id');
        releaseNote.BugFixesFr.push('Corrigé bug de donnée qui essaie toujours de sauvegarder à cause d\'un id dupliqué');
        releaseNote.BugFixesEn.push('Faster login load');
        releaseNote.BugFixesFr.push('Chargement plus rapide lors du login');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.1.87';
        releaseNote.FeaturesEn.push('Added icons on buttons');
        releaseNote.FeaturesFr.push('Ajouté des icônes sur des boutons');
        releaseNote.FeaturesEn.push('Notes can be browsed, updated and deleted in the Notes menu');
        releaseNote.FeaturesFr.push('Nouveau menu Notes ou on peut naviguer, dans les notes et les mettre à jour ou les supprimer');
        releaseNote.FeaturesEn.push('Added cancel timer button');
        releaseNote.FeaturesFr.push('Ajouté bouton pour annuler timer');
        // releaseNote.FeaturesEn.push('Added "..." button on the task list header to access quick configs but it\'s only mocked for now');
        // releaseNote.FeaturesFr.push('Ajouté un bouton "..." en haut de la liste de tâches mais ce n\'est pas encore fonctionnel');
        releaseNote.FeaturesEn.push('Added calendar to pick date when clicking on current day');
        releaseNote.FeaturesFr.push('Ajouté un calendrier pour choisir la date lorsqu\'on clique sur la journée présente');
        releaseNote.FeaturesEn.push('Timers are now persistent (saved locally on the phone, not on server)');
        releaseNote.FeaturesFr.push('Les timers sont maintenant sauvegardés dans la base de donnée (locale seulement, pas sur le serveur)');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.2.16';
        releaseNote.FeaturesEn.push('Added task groups, all tasks are now assigned to a group which has a name, color, order');
        releaseNote.FeaturesFr.push('Ajouté des groupes de tâches, toutes les tâches sont maintenant assignées à un groupe qui a un nom, ' +
            'une couleur et un ordre');
        releaseNote.FeaturesEn.push('Improved UI');
        releaseNote.FeaturesFr.push('Amélioré UI');
        releaseNote.FeaturesEn.push('Changed app name to HyperTask');
        releaseNote.FeaturesFr.push('Changé le nom de l\'application pour HyperTask');
        releaseNote.FeaturesEn.push('Updated icon to match app colors');
        releaseNote.FeaturesFr.push('Mis à jour l\'icône pour matcher avec les couleurs de l\'application');
        releaseNote.FeaturesEn.push('Removed text on main buttons, icons only');
        releaseNote.FeaturesFr.push('Enlevé le texte sur les boutons principaux, il n\'y a que des icônes maintenant');
        releaseNote.FeaturesEn.push('Popups to enter result doesn\'t fade anymore when clicking outside of the box');
        releaseNote.FeaturesFr.push('Les popups pour entrer le résultat ne se ferment plus lorsqu\'on clique à côté');
        releaseNote.FeaturesEn.push('Added popover menus');
        releaseNote.FeaturesFr.push('Ajouté menus en popup');
        releaseNote.BugFixesEn.push('Prevent sending empty feedback');
        releaseNote.BugFixesFr.push('Empêcher d\'envoyer du feedback vide');
        releaseNote.BugFixesEn.push('Fixed local database synchronization issues');
        releaseNote.BugFixesFr.push('Corrigé problèmes de synchronisation de données locales');
        releaseNote.BugFixesEn.push('Changed event handling to improve performance');
        releaseNote.BugFixesFr.push('Changé gestion d\'événements pour améliorer la performance');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.3.00';
        releaseNote.FeaturesEn.push('Added daily notifications for individual tasks');
        releaseNote.FeaturesFr.push('Ajouté des notifications journalières pour les tâches individuelles');
        releaseNote.FeaturesEn.push('Added ... button on the main page for a new popover menu');
        releaseNote.FeaturesFr.push('Ajouté bouton ... sur la page principale pour un nouveau menu popover');
        releaseNote.FeaturesEn.push('Added Prioritize vs Execute');
        releaseNote.FeaturesFr.push('Ajouté Prioriser ou Exécuter');
        releaseNote.FeaturesEn.push('Added drag and drop');
        releaseNote.FeaturesFr.push('Ajouté glisser-déposer');
        releaseNote.FeaturesEn.push('Added option to create group when creating a task');
        releaseNote.FeaturesFr.push('Ajouté option pour créer un group lorsqu\'on crée une tâche');
        releaseNote.FeaturesEn.push('Added auto-focus on some inputs');
        releaseNote.FeaturesFr.push('Ajouté auto-focus à quelque endroits');
        releaseNote.FeaturesEn.push('Added walkthrough for first time users');
        releaseNote.FeaturesFr.push('Ajouté tutoriel pour les nouveaux utilisateurs');
        releaseNote.FeaturesEn.push('Removed language choice, will focus on only english for the start and minimize maintenance requirement');
        releaseNote.FeaturesFr.push('Enlevé choix de langue, nous allons focusser seulement sur l\'anglais au début pour minimizer la ' +
            'maintenance');
        releaseNote.FeaturesEn.push('Moved "Skip All" button to new popover menu');
        releaseNote.FeaturesFr.push('Bougé "Tout sauter" dans un nouveau menu popover');
        releaseNote.FeaturesEn.push('Added "Postpone All" button to group popover menu');
        releaseNote.FeaturesFr.push('Ajout "Tout remettre" dans le menu popover de groupe');
        // to add later
        // releaseNote.FeaturesEn.push('Added popover with action suggestions when skipped modulo 7 days in a row');
        // releaseNote.FeaturesFr.push('Ajouté un popover avec des actions suggérées lorsqu\'une tâche est sautée 7 modulo fois de suite');
        releaseNote.FeaturesEn.push('Added cross-device auto-sync');
        releaseNote.FeaturesFr.push('Ajouté synchronisation automatique inter-appareils');
        releaseNote.FeaturesEn.push('Added retrieval/deletion of data for privacy compliance');
        releaseNote.FeaturesFr.push('Ajout du téléchargement ou suppression des données pour conformité de confidentialité');
        releaseNote.BugFixesEn.push('Fixed Skip All bugs');
        releaseNote.BugFixesFr.push('Corrigé des bugs pour tout sauter');
        releaseNote.BugFixesEn.push('Fixed popups that could appears multiple times when lagging');
        releaseNote.BugFixesFr.push('Corrigé des popups qui apparaissaient plusieurs fois lorsque ça laggais');
        releaseNote.BugFixesEn.push('Fixed timers that were not accurate');
        releaseNote.BugFixesFr.push('Corrigé timers qui n\'étaient pas précis');
        releaseNote.FeaturesEn.push('When changing task schedule type, ask if you want to change to the default group');
        releaseNote.FeaturesFr.push('Lorsque la fréquence de la tâche est changée, demander si vous voulez changer au groupe par défaut');
        releaseNote.FeaturesEn.push('Added setting option to lock in portrait mode');
        releaseNote.FeaturesFr.push('Ajouté option de barrer l\'écran en mode portrait');
        releaseNotes.push(releaseNote);
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.3.4';
        releaseNote.FeaturesEn.push('First version of pre-release');
        releaseNote.FeaturesFr.push('Première version du pre-release');
        releaseNote = new _models_Core_release_note__WEBPACK_IMPORTED_MODULE_0__.ReleaseNote();
        releaseNote.Version = '0.3.6';
        releaseNote.FeaturesEn.push('Improved performance');
        releaseNote.FeaturesFr.push('Amélioré la performance');
        return releaseNotes;
    }
};
ChangelogService.ctorParameters = () => [
    { type: _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_1__.ILocalStorageService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__.AlertController },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__.TranslateService }
];
ChangelogService = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({
        providedIn: 'root'
    })
], ChangelogService);



/***/ }),

/***/ 57783:
/*!*************************************************!*\
  !*** ./src/app/services/data-sync-2.service.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSyncService2": () => (/* binding */ DataSyncService2),
/* harmony export */   "CancellationToken": () => (/* binding */ CancellationToken)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _data_sync_server_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data-sync-server-service */ 26022);
/* harmony import */ var _shared_thread_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/thread.utils */ 39023);
/* harmony import */ var _models_Exceptions_ApiHttpError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/Exceptions/ApiHttpError */ 59032);
/* harmony import */ var _event_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./event.service */ 29170);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../interfaces/i-data-sync-local-service */ 17610);








let DataSyncService2 = class DataSyncService2 {
    constructor(localDataSync, serverDataSync, 
    //private notificationService: NotificationService, TODO CAPACITOR
    logger, eventService) {
        this.localDataSync = localDataSync;
        this.serverDataSync = serverDataSync;
        this.logger = logger;
        this.eventService = eventService;
        // NOTE : We should make sure the task is put again in queue if it fails ?
        this.API_HTTP_ERROR_COUNT = 0;
        this.ThreadTasks = [];
        this.eventService.on(_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.Resume, () => {
            console.log('Datasync On Resume');
            this.queueTransaction(new ServerGetLatestSyncThreadTask());
            this.queueTransaction(new ServerSyncThreadTask()); // OPTIONAL
            this.queueTransaction(new NotificationThreadTask());
        });
        this.eventService.on(_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.SyncRequired, () => {
            console.log('Datasync On Sync Required');
            this.queueTransaction(new LocalSyncThreadTask());
            this.queueTransaction(new ServerSyncThreadTask());
            this.queueTransaction(new NotificationThreadTask());
        });
        this.eventService.on(_event_service__WEBPACK_IMPORTED_MODULE_3__.EventService.EventIds.OnStartSync, () => {
            console.log('OnStartSync Required');
            this.queueTransaction(new ServerGetLatestSyncThreadTask());
            this.queueTransaction(new LocalSyncThreadTask());
            this.queueTransaction(new ServerSyncThreadTask());
            this.queueTransaction(new NotificationThreadTask());
        });
    }
    checkForSyncRepeat() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            while (true) {
                console.log('checkForSyncRepeat');
                try {
                    if (this.ThreadTasks.length > 0) {
                        const initialName = this.ThreadTasks[0].name;
                        console.log('------ PROCESSING THREAD TASK : ' + this.ThreadTasks[0].name, initialName, this.ThreadTasks);
                        yield this.ThreadTasks[0].processTransaction(this.localDataSync, this.serverDataSync, /*this.notificationService, */ this.logger);
                        console.log('++++++ THREAD TASK COMPLETED : ' + this.ThreadTasks[0].name, initialName, this.ThreadTasks);
                        this.ThreadTasks.splice(0, 1);
                    } /*else {
                      console.log('xxxxxx - NO TASK TO PROCESS - xxxxxx');
                    }*/
                }
                catch (error) {
                    // HANDLE API ERRORS
                    if (error instanceof _models_Exceptions_ApiHttpError__WEBPACK_IMPORTED_MODULE_2__.ApiHttpError) {
                        // console.log('INSTANCE OF API ERROR');
                        this.API_HTTP_ERROR_COUNT++;
                        this.API_HTTP_ERROR_DATE = new Date();
                    }
                    this.logger.logDebug('Error checking for sync repeat');
                    this.logger.logError(error);
                }
                finally {
                    yield _shared_thread_utils__WEBPACK_IMPORTED_MODULE_1__["default"].sleep(1500); // todo capacitor
                }
            }
        });
    }
    queueTransaction(task) {
        this.logger.logDebug('queuing Transaction sync 2: ' + task.name);
        if (this.ThreadTasks.length === 0) {
            this.logger.logDebug('>>>>>>>>>>>>> No tasks queued : ', task.name);
            this.ThreadTasks.push(task);
            this.logger.logDebug('>>>>>>>>>>>>> Queue : ' + this.ThreadTasks);
            return;
        }
        if (this.ThreadTasks.filter((u, i) => i >= 1 || u.isStarted === true).some(t => t.name === task.name)) { // queue if already at [0] and started
            this.logger.logDebug('>>>>>>>>>>>>> CANT QUEUE ALREADY EXISTS: ' + task.name);
            this.logger.logDebug('>>>>>>>>>>>>> Queue : ' + this.ThreadTasks);
            /*if (task.name === 'Notification') {
              return;
            }*/
            return;
        }
        // tslint:disable-next-line:prefer-for-of
        for (let i = 0; i < this.ThreadTasks.length; i++) {
            if (task.priority < this.ThreadTasks[i].priority) {
                this.logger.logDebug('>>>>>>>>> priority i=' + i + ' ' + task.name + ' < ' + this.ThreadTasks[i].name);
                if (this.ThreadTasks[i].isStarted === true) {
                    this.ThreadTasks[i].cancelToken.cancelRequested = true;
                    this.logger.logDebug('>>>>>>>>>>> Thread already started, requesting cancellation ' + this.ThreadTasks[i].name);
                }
                // cant insert at 0 (already started)
                if (i === 0 && this.ThreadTasks.length > 0) {
                    // check if other higher priority
                    if (this.ThreadTasks.length == 1) {
                        this.logger.logDebug('>>>>>>>>>>> Inserting at : ' + 1 + ' ' + task.name + ' ' + this.ThreadTasks);
                        this.insertAt(this.ThreadTasks, 1, task);
                        this.logger.logDebug('>>>>>>>>>>>>> Queue : ' + this.ThreadTasks);
                    }
                    else {
                        for (let j = 1; j < this.ThreadTasks.length; j++) {
                            if (task.priority < this.ThreadTasks[j].priority) {
                                this.logger.logDebug('>>>>>>>>>>> Inserting at J : ' + j + ' ' + task.name + ' ' + this.ThreadTasks);
                                this.insertAt(this.ThreadTasks, j, task);
                                this.logger.logDebug('>>>>>>>>>>>>> Queue : ' + this.ThreadTasks);
                                return;
                            }
                        }
                        this.logger.logDebug('>>>>>>>>>>>>>> Inserting at the end: ' + this.ThreadTasks);
                        this.ThreadTasks.push(task);
                        this.logger.logDebug('>>>>>>>>>>>>> Queue : ' + this.ThreadTasks);
                        return;
                    }
                }
                else {
                    this.logger.logDebug('>>>>>>>>>>> Inserting at : ' + i + ' ' + task.name + ' ' + this.ThreadTasks);
                    this.insertAt(this.ThreadTasks, i, task);
                    this.logger.logDebug('>>>>>>>>>>>>> Queue : ' + this.ThreadTasks);
                }
                return;
            }
        }
        for (const t of this.ThreadTasks) {
            if (task.priority < t.priority) {
                this.logger.logDebug('>>>>>>>>>>>>> Inserting before : ' + t + ' ' + this.ThreadTasks);
                this.ThreadTasks.unshift(task);
                this.logger.logDebug('>>>>>>>>>>>>> Queue : ' + this.ThreadTasks);
                return;
            }
        }
        this.logger.logDebug('>>>>>>>>>>>>>> Inserting at the end: ' + this.ThreadTasks);
        this.ThreadTasks.push(task);
        this.logger.logDebug('>>>>>>>>>>>>> Queue : ' + this.ThreadTasks);
        return;
    }
    insertAt(array, index, ...elementsArray) {
        array.splice(index, 0, ...elementsArray);
    }
};
DataSyncService2.ctorParameters = () => [
    { type: _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_5__.IDataSyncLocalService },
    { type: _data_sync_server_service__WEBPACK_IMPORTED_MODULE_0__.DataSyncServerService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__.ILogger },
    { type: _event_service__WEBPACK_IMPORTED_MODULE_3__.EventService }
];
DataSyncService2 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable)({
        providedIn: 'root'
    })
], DataSyncService2);

class ThreadTask {
    constructor() {
        this.cancelToken = new CancellationToken();
    }
}
// Notifications need to be checked when :
// - Resume
// - Application start
// - Action is done
class NotificationThreadTask {
    constructor() {
        this.cancelToken = new CancellationToken();
        this.priority = 4;
        this.name = 'Notification';
    }
    processTransaction(localDataSync, serverDataSync, 
    /*notificationService: NotificationService,*/
    logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            try {
                logger.logDebug('NotificationThreadTask');
                //await notificationService.refreshNotifications(); TODO Capacitor
                return true;
            }
            catch (error) {
                logger.logError(error);
                alert('Error processing thread task 1');
                return false;
            }
        });
    }
}
// Need to be checked when :
// - An action is done
class LocalSyncThreadTask {
    constructor() {
        this.cancelToken = new CancellationToken();
        this.priority = 1;
        this.name = 'LocalSync';
    }
    processTransaction(localDataSync, serverDataSync, 
    /*notificationService: NotificationService,*/
    logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            try {
                logger.logDebug('LOCALSYNCTHREAD' + localDataSync);
                yield localDataSync.processQueue();
                logger.logDebug('LOCALSYNCTHREAD END');
                return true;
            }
            catch (error) {
                logger.logError(error);
                alert('Error processing thread task 2');
                return false;
            }
        });
    }
}
// Need to be checked when :
// - all of the time ?
// - after local sync
// - as long as there is something to transmit
class ServerSyncThreadTask {
    constructor() {
        this.cancelToken = new CancellationToken();
        this.priority = 2;
        this.name = 'ServerSync';
    }
    processTransaction(localDataSync, serverDataSync, 
    /*notificationService: NotificationService,*/
    logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            try {
                logger.logDebug('SERVERSYNCTHREAD');
                yield serverDataSync.processQueue();
                logger.logDebug('SERVERSYNCTHREAD DONE');
                return true;
            }
            catch (error) {
                logger.logError(error);
                alert('Error processing thread task 3');
                return false;
            }
        });
    }
}
// Need to be checked when :
// - Resume
// - Application start
class ServerGetLatestSyncThreadTask {
    constructor() {
        this.cancelToken = new CancellationToken();
        this.priority = 3;
        this.name = 'GetLatestServer';
    }
    processTransaction(localDataSync, serverDataSync, 
    /*notificationService: NotificationService,*/
    logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__awaiter)(this, void 0, void 0, function* () {
            try {
                logger.logDebug('GetLatest');
                // logger.logDebug('SERVERGETLATESTSYNCTHREAD');
                yield serverDataSync.GetLatest(this.cancelToken);
                logger.logDebug('GetLatest END');
                return true;
            }
            catch (error) {
                logger.logError(error);
                alert('Error processing thread task 4');
                return false;
            }
        });
    }
}
class CancellationToken {
    constructor() {
        this.cancelRequested = false;
    }
}


/***/ }),

/***/ 10950:
/*!*****************************************************!*\
  !*** ./src/app/services/data-sync-local-service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSyncLocalService": () => (/* binding */ DataSyncLocalService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interfaces/i-local-storage-service */ 5295);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _event_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./event.service */ 29170);





let DataSyncLocalService = class DataSyncLocalService {
    constructor(localStorage, logger, eventService) {
        this.localStorage = localStorage;
        this.logger = logger;
        this.eventService = eventService;
        this.transactionQueue = [];
    }
    allDataIsSynced() {
        throw new Error('Method not implemented.');
    }
    getUnsynchronized() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            const result = [];
            for (const transaction of this.transactionQueue) {
                result.push(JSON.stringify(transaction.transactionObject));
            }
            return result;
        });
    }
    processQueue() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            console.log('PROCESSING QUEUE');
            while (this.transactionQueue.length > 0) {
                const transaction = this.transactionQueue.shift();
                const success = yield transaction.processTransaction(this.localStorage, this.logger);
                if (!success) {
                    this.logger.logError(new Error('Failed to process transaction'), { key: 'transaction', value: JSON.stringify(transaction) });
                }
            }
            console.log('QUEUE PROCESSED');
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_2__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_2__.EventService.EventIds.LocalSyncCompleted, null));
            return;
        });
    }
    queueInsertCalendarTask(task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (task == null) {
                return;
            }
            const transaction = new TaskTransaction();
            transaction.transactionType = TransactionType.Insert;
            transaction.transactionObject = task;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueUpdateCalendarTask(task, synced = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (task == null) {
                return;
            }
            task.Synced = synced;
            const transaction = new TaskTransaction();
            transaction.transactionType = TransactionType.Update;
            transaction.transactionObject = task;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueUpdateCalendarTasks(tasks, synced = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (tasks == null || tasks.length === 0) {
                return;
            }
            tasks.forEach(p => p.Synced = synced);
            const transaction = new TasksTransaction();
            transaction.transactionType = TransactionType.Update;
            transaction.transactionObject = tasks;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueInsertCalendarTasks(tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (tasks == null || tasks.length === 0) {
                return;
            }
            const transaction = new TasksTransaction();
            transaction.transactionType = TransactionType.Insert;
            transaction.transactionObject = tasks;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueInsertTaskHistory(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (history == null) {
                return;
            }
            const transaction = new TaskHistoryTransaction();
            transaction.transactionType = TransactionType.Insert;
            transaction.transactionObject = history;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueInsertTaskHistories(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (histories == null || histories.length === 0) {
                return;
            }
            const transaction = new TaskHistoriesTransaction();
            transaction.transactionType = TransactionType.Insert;
            transaction.transactionObject = histories;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueUpdateTaskHistory(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (history == null) {
                return;
            }
            history.Synced = false;
            const transaction = new TaskHistoryTransaction();
            transaction.transactionType = TransactionType.Update;
            transaction.transactionObject = history;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueUpdateTaskHistories(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (histories == null || histories.length === 0) {
                return;
            }
            histories.forEach(p => p.Synced = false);
            const transaction = new TaskHistoriesTransaction();
            transaction.transactionType = TransactionType.Update;
            transaction.transactionObject = histories;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueInsertTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (timer == null) {
                return;
            }
            const transaction = new TimerTransaction();
            transaction.transactionType = TransactionType.Insert;
            transaction.transactionObject = timer;
            this.transactionQueue.push(transaction);
            console.log('queued timer', this.transactionQueue);
            return;
        });
    }
    queueUpdateTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (timer == null) {
                return;
            }
            timer.isSynced = false;
            const transaction = new TimerTransaction();
            transaction.transactionType = TransactionType.Update;
            transaction.transactionObject = timer;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueInsertGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (group == null) {
                return;
            }
            const transaction = new GroupTransaction();
            transaction.transactionType = TransactionType.Insert;
            transaction.transactionObject = group;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueInsertGroups(groups) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (groups == null || groups.length === 0) {
                return;
            }
            const transaction = new GroupsTransaction();
            transaction.transactionType = TransactionType.Insert;
            transaction.transactionObject = groups;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueUpdateGroup(group, synced = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            if (group == null) {
                return;
            }
            group.Synced = synced;
            const transaction = new GroupTransaction();
            transaction.transactionType = TransactionType.Update;
            transaction.transactionObject = group;
            this.transactionQueue.push(transaction);
            return;
        });
    }
    queueUpdateGroups(groups, synced = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            console.log('queueUpdateGroups', groups);
            if (groups == null || groups.length === 0) {
                return;
            }
            groups.forEach(p => p.Synced = synced);
            const transaction = new GroupsTransaction();
            transaction.transactionType = TransactionType.Update;
            transaction.transactionObject = groups;
            this.transactionQueue.push(transaction);
            return;
        });
    }
};
DataSyncLocalService.ctorParameters = () => [
    { type: _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_0__.ILocalStorageService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_1__.ILogger },
    { type: _event_service__WEBPACK_IMPORTED_MODULE_2__.EventService }
];
DataSyncLocalService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
        providedIn: 'root'
    })
], DataSyncLocalService);

class Transaction {
}
class TaskTransaction {
    processTransaction(localService, logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (this.transactionType === TransactionType.Insert) {
                    yield localService.insertCalendarTask(this.transactionObject);
                }
                else if (this.transactionType === TransactionType.Update) {
                    yield localService.updateCalendarTask(this.transactionObject, this.transactionObject.Synced);
                }
                return true;
            }
            catch (error) {
                logger.logError(error, { key: 'transaction', value: JSON.stringify(this.transactionObject) });
                alert('Error processing transaction1');
                return false;
            }
        });
    }
}
class TasksTransaction {
    processTransaction(localService, logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (this.transactionType === TransactionType.Insert) {
                    yield localService.insertCalendarTasks(this.transactionObject);
                }
                else if (this.transactionType === TransactionType.Update) {
                    // console.log('ALLO', this.transactionObject);
                    yield localService.updateCalendarTasks(this.transactionObject, this.transactionObject[0].Synced);
                }
                return true;
            }
            catch (error) {
                logger.logError(error, { key: 'transaction', value: JSON.stringify(this.transactionObject) });
                alert('Error processing transaction2');
                return false;
            }
        });
    }
}
class TaskHistoryTransaction {
    processTransaction(localService, logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (this.transactionType === TransactionType.Insert) {
                    // console.log('PROCESSTRANSACTION INSERT HISTORY', this.transactionObject as DTOTaskHistory);
                    yield localService.insertTaskHistory(this.transactionObject);
                }
                else if (this.transactionType === TransactionType.Update) {
                    // console.log('PROCESSTRANSACTION UPDATE HISTORY', this.transactionObject as DTOTaskHistory);
                    yield localService.updateTaskHistory(this.transactionObject);
                }
                return true;
            }
            catch (error) {
                logger.logError(error, { key: 'transaction', value: JSON.stringify(this.transactionObject) });
                alert('Error processing transaction 3');
                return false;
            }
        });
    }
}
class TaskHistoriesTransaction {
    processTransaction(localService, logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (this.transactionType === TransactionType.Insert) {
                    // console.log('PROCESSTRANSACTION INSERT HISTORY', this.transactionObject as DTOTaskHistory);
                    yield localService.insertTaskHistories(this.transactionObject);
                }
                else if (this.transactionType === TransactionType.Update) {
                    yield localService.updateTaskHistories(this.transactionObject);
                }
                return true;
            }
            catch (error) {
                logger.logError(error, { key: 'transaction', value: JSON.stringify(this.transactionObject) });
                alert('Error processing transaction 4');
                return false;
            }
        });
    }
}
class TimerTransaction {
    processTransaction(localService, logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (this.transactionType === TransactionType.Insert) {
                    console.log('QUEUE PROCESS INSERT TIMER', this.transactionObject);
                    yield localService.insertTimer(this.transactionObject);
                }
                else if (this.transactionType === TransactionType.Update) {
                    yield localService.updateTimer(this.transactionObject);
                }
                return true;
            }
            catch (error) {
                logger.logError(error, { key: 'transaction', value: JSON.stringify(this.transactionObject) });
                alert('Error processing transaction 5');
                return false;
            }
        });
    }
}
class GroupTransaction {
    processTransaction(localService, logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (this.transactionType === TransactionType.Insert) {
                    console.log('ALLO2');
                    yield localService.insertGroup(this.transactionObject);
                }
                else if (this.transactionType === TransactionType.Update) {
                    yield localService.updateGroup(this.transactionObject, this.transactionObject.Synced);
                }
                return true;
            }
            catch (error) {
                logger.logError(error, { key: 'transaction', value: JSON.stringify(this.transactionObject) });
                alert('Error processing transaction 5');
                return false;
            }
        });
    }
}
class GroupsTransaction {
    processTransaction(localService, logger) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            try {
                if (this.transactionType === TransactionType.Insert) {
                    yield localService.insertGroups(this.transactionObject);
                }
                else if (this.transactionType === TransactionType.Update) {
                    yield localService.updateGroups(this.transactionObject, true);
                }
                return true;
            }
            catch (error) {
                logger.logError(error, { key: 'transaction', value: JSON.stringify(this.transactionObject) });
                alert('Error processing transaction 6');
                return false;
            }
        });
    }
}
var TransactionType;
(function (TransactionType) {
    TransactionType[TransactionType["Insert"] = 0] = "Insert";
    TransactionType[TransactionType["Update"] = 1] = "Update";
})(TransactionType || (TransactionType = {}));


/***/ }),

/***/ 26022:
/*!******************************************************!*\
  !*** ./src/app/services/data-sync-server-service.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSyncServerService": () => (/* binding */ DataSyncServerService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _local_storage_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./local-storage.service */ 27109);
/* harmony import */ var _calendar_task_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calendar-task.service */ 43772);
/* harmony import */ var _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interfaces/i-api-provider */ 67116);
/* harmony import */ var _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interfaces/i-local-storage-service */ 5295);
/* harmony import */ var _models_Exceptions_CalendarTaskNotFoundError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/Exceptions/CalendarTaskNotFoundError */ 83285);
/* harmony import */ var _models_Exceptions_TaskHistoryNotFoundError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/Exceptions/TaskHistoryNotFoundError */ 88622);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _network_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./network.service */ 42421);
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./user.service */ 77524);
/* harmony import */ var _models_Core_user_config__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/Core/user-config */ 74734);
/* harmony import */ var _models_Exceptions_GroupNotFoundError__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/Exceptions/GroupNotFoundError */ 82067);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ 9500);
/* harmony import */ var _event_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./event.service */ 29170);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../shared/date-utils */ 85218);
/* harmony import */ var _models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../models/DTO/dto-user */ 69449);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
var DataSyncServerService_1;



















let DataSyncServerService = DataSyncServerService_1 = class DataSyncServerService {
    constructor(local, apiProvider, calendarTaskService, logger, network, userService, eventService, loadingController, translate) {
        this.local = local;
        this.apiProvider = apiProvider;
        this.calendarTaskService = calendarTaskService;
        this.logger = logger;
        this.network = network;
        this.userService = userService;
        this.eventService = eventService;
        this.loadingController = loadingController;
        this.translate = translate;
        this.eventService.on(_event_service__WEBPACK_IMPORTED_MODULE_11__.EventService.EventIds.SyncRequired, () => (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            DataSyncServerService_1.SyncRequired = true;
            DataSyncServerService_1.GetLatestInvalid = true;
        }));
    }
    allDataIsSynced() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('allDataIsSynced');
            const allTasks = yield this.local.getCalendarTasks(false);
            const unsyncedTaskData = allTasks.filter(p => p.Synced === false ||
                p.Sent === false ||
                p.Histories.some(t => t.Sent === false ||
                    t.Synced === false));
            const storedGroups = yield this.local.getGroups(false);
            const unsyncedGroupData = storedGroups.filter(p => p.Synced === false || p.Sent === false);
            if (unsyncedTaskData != null && unsyncedTaskData.length > 0) {
                // console.log('unsynced data:', unsyncedTaskData);
            }
            else {
                // console.log('no unsynced data:', unsyncedTaskData);
            }
            const result = unsyncedTaskData == null ||
                unsyncedTaskData.length === 0 ||
                unsyncedGroupData == null ||
                unsyncedGroupData.length === 0;
            return result;
        });
    }
    getUnsynchronized() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            console.log('getUnsynchronized');
            // this.logger.logEvent('getUnsynchronized');
            yield this.local.waitForDbAvailable('getUnsynchronized');
            const result = [];
            _local_storage_service__WEBPACK_IMPORTED_MODULE_0__.LocalStorageService.currentlyUsed = true;
            let storedTasks = yield this.local.getCalendarTasks(true);
            // console.log('got1 CheckForUnsynchronize');
            if (storedTasks != null) {
                const unSentTasks = storedTasks.filter(p => p.Sent === false);
                if (unSentTasks != null && unSentTasks.length > 0) {
                    // console.log('sendUnsentTasks');
                    result.push('unSentTasks');
                    result.push(JSON.stringify(unSentTasks));
                    result.push('');
                }
            }
            // console.log('getting1 CheckForUnsynchronize');
            storedTasks = yield this.local.getCalendarTasks(true);
            // console.log('got2 CheckForUnsynchronize');
            if (storedTasks != null) {
                const unSyncedTasks = storedTasks.filter(p => p.Sent === true && p.Synced === false);
                if (unSyncedTasks != null && unSyncedTasks.length > 0) {
                    result.push('unSyncedTasks');
                    result.push(JSON.stringify(unSyncedTasks));
                    result.push('');
                }
            }
            // console.log('getting1 CheckForUnsynchronize');
            storedTasks = yield this.local.getCalendarTasks(true);
            // console.log('got3 CheckForUnsynchronize');
            if (storedTasks != null) {
                const unSentHistories = this.getUnsentHistories(storedTasks);
                if (unSentHistories != null && unSentHistories.length > 0) {
                    result.push('unSentHistories');
                    result.push(JSON.stringify(unSentHistories));
                    result.push('');
                }
            }
            // console.log('getting1 CheckForUnsynchronize');
            storedTasks = yield this.local.getCalendarTasks(true);
            // console.log('got4 CheckForUnsynchronize');
            if (storedTasks != null) {
                const unSyncedHistories = this.getUnsyncedHistories(storedTasks);
                if (unSyncedHistories != null && unSyncedHistories.length > 0) {
                    result.push('unSyncedHistories');
                    result.push(JSON.stringify(unSyncedHistories));
                    result.push('');
                }
            }
            // UNSENT GROUPS
            const storedGroups = yield this.local.getGroups(true);
            if (storedGroups != null) {
                const unSentGroups = this.getUnsentGroups(storedGroups);
                if (unSentGroups != null && unSentGroups.length > 0) {
                    result.push('unSentGroups');
                    result.push(JSON.stringify(unSentGroups));
                    result.push('');
                }
            }
            // UNSYNCED GROUPS
            if (storedGroups != null) {
                const unSyncedGroups = this.getUnsyncedGroups(storedGroups);
                console.log('UNSYNCED GROUPPPS ', unSyncedGroups);
                if (unSyncedGroups != null && unSyncedGroups.length > 0) {
                    result.push('unSyncedGroups');
                    result.push(JSON.stringify(unSyncedGroups));
                    result.push('');
                }
            }
            // this.logger.logEvent('ending getUnsynchronized');
            _local_storage_service__WEBPACK_IMPORTED_MODULE_0__.LocalStorageService.currentlyUsed = false;
            return result;
        });
    }
    processUnsynchronized() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('processUnsynchronized');
            // TODO : Remove this as soon as it's stable
            // const syncStart = new Date();
            //this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, LOCKING');
            yield this.local.waitForDbAvailable('checkForUnsynchronized');
            _local_storage_service__WEBPACK_IMPORTED_MODULE_0__.LocalStorageService.currentlyUsed = true;
            let success = true;
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, LOCKED, GETTING TASKS');
            // console.log('%% CHECK FOR UNSYNCHRONIZED, LOCKED, GETTING TASKS', DateUtils.getTimeSince(syncStart));
            // await ThreadUtils.sleep(5000);
            let storedTasks = yield this.local.getCalendarTasks(true);
            // console.log('got1 CheckForUnsynchronize');
            if (storedTasks != null) {
                const unSentTasks = storedTasks.filter(p => p.Sent === false);
                if (unSentTasks != null && unSentTasks.length > 0) {
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SEND UNSENT TASKS', JSON.stringify(unSentTasks));
                    if ((yield this.sendUnsentTasks(unSentTasks)) === false) {
                        success = false;
                    }
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SEND UNSENT TASKS DONE');
                }
            }
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GET TASKS AGAIN');
            storedTasks = yield this.local.getCalendarTasks(true);
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GOT TASKS AGAIN');
            if (storedTasks != null) {
                const unSyncedTasks = storedTasks.filter(p => p.Sent === true && p.Synced === false);
                if (unSyncedTasks != null && unSyncedTasks.length > 0) {
                    // console.log('unSyncedTasks : ', unSyncedTasks);
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SYNC UNSYNCED TASKS', JSON.stringify(unSyncedTasks));
                    if ((yield this.syncUnsyncedTasks(unSyncedTasks)) === false) {
                        success = false;
                    }
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SYNC UNSYNCED TASKS DONE');
                }
            }
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GET TASKS AGAIN 2');
            storedTasks = yield this.local.getCalendarTasks(true);
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GOT TASKS AGAIN 2');
            if (storedTasks != null) {
                // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GET UNSENT HISTORIES');
                const unSentHistories = this.getUnsentHistories(storedTasks);
                // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GOT UNSENT HISTORIES');
                if (unSentHistories != null && unSentHistories.length > 0) {
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SEND UNSENT HISTORIES', JSON.stringify(unSentHistories));
                    if ((yield this.sendUnsentHistories(unSentHistories)) === false) {
                        success = false;
                    }
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SEND UNSENT HISTORIES DONE');
                }
            }
            // console.log('getting1 CheckForUnsynchronize');
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GET TASKS AGAIN 3');
            storedTasks = yield this.local.getCalendarTasks(true);
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GOT TASKS AGAIN 3');
            // console.log('got4 CheckForUnsynchronize');
            if (storedTasks != null) {
                // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GET UNSYNCED HISTORIES');
                const unSyncedHistories = this.getUnsyncedHistories(storedTasks);
                // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GOT UNSYNCED HISTORIES');
                if (unSyncedHistories != null && unSyncedHistories.length > 0) {
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SYNC UNSYNCED HISTORIES');
                    if ((yield this.syncUnsyncedHistories(unSyncedHistories)) === false) {
                        success = false;
                    }
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SYNC UNSYNCED HISTORIES DONE');
                }
            }
            // UNSENT GROUPS
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GETTING GROUPS 1');
            let storedGroups = yield this.local.getGroups(true);
            // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GOT GROUPS 1');
            if (storedGroups != null) {
                const unSentGroups = this.getUnsentGroups(storedGroups);
                if (unSentGroups != null && unSentGroups.length > 0) {
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SEND UNSENT GROUPS');
                    if ((yield this.sendUnsentGroups(unSentGroups)) === false) {
                        success = false;
                    }
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SEND UNSENT GROUPS DONE');
                }
            }
            // UNSYNCED GROUPS
            this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GETTING GROUPS 2');
            storedGroups = yield this.local.getGroups(true);
            this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, GOT GROUPS 2');
            if (storedGroups != null) {
                const unSyncedGroups = this.getUnsyncedGroups(storedGroups);
                console.log('UNSYNCED GROUPS', unSyncedGroups);
                if (unSyncedGroups != null && unSyncedGroups.length > 0) {
                    this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SYNC UNSYNCED GROUPS');
                    if ((yield this.syncUnsyncedGroups(unSyncedGroups)) === false) {
                        success = false;
                    }
                    // this.logger.logDebug('%% CHECK FOR UNSYNCHRONIZED, SYNC UNSYNCED GROUPS DONE');
                }
            }
            // this.logger.logDebug('%% ENDING CHECKFORUNSYNCHRONIZED, UNLOCKING');
            // this.logger.logEvent('ending CheckForUnsynchronize');
            _local_storage_service__WEBPACK_IMPORTED_MODULE_0__.LocalStorageService.currentlyUsed = false;
            if (success === true) {
                DataSyncServerService_1.SyncRequired = false;
                this.logger.logDebug('%% SERVER SYNC COMPLETED, LOCKING');
                this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_11__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_11__.EventService.EventIds.ServerSyncCompleted, null));
                // console.log('SYNC NOT REQUIRED ANYMORE');
                return true;
            }
            else {
                // console.log('SYNC NOT SUCCESSFUL, STILL REQUIRED');
                return false;
            }
            // this.logger.logDebug('%% ENDING CHECKFORUNSYNCHRONIZED, UNLOCKED');
        });
    }
    getUnsentHistories(storedTasks) {
        const unSentHistories = [];
        storedTasks.forEach(p => p.Histories.forEach(t => {
            if (t.Sent === false) {
                unSentHistories.push(t);
            }
        }));
        return unSentHistories;
    }
    getUnsyncedHistories(storedTasks) {
        const unSynchedHistories = [];
        storedTasks.forEach(p => p.Histories.forEach(t => {
            if (t.Sent === true && t.Synced === false) {
                unSynchedHistories.push(t);
            }
        }));
        return unSynchedHistories;
    }
    getUnsentGroups(storedGroups) {
        const unSentGroups = [];
        storedGroups.forEach(p => {
            if (p.Sent === false) {
                unSentGroups.push(p);
            }
        });
        return unSentGroups;
    }
    getUnsyncedGroups(storedGroups) {
        const unSyncedGroups = [];
        storedGroups.forEach(p => {
            if (p.Sent === true && p.Synced === false) {
                unSyncedGroups.push(p);
            }
        });
        return unSyncedGroups;
    }
    sendUnsentTasks(unSentTasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            try {
                /*this.logger.logEvent('sendUnsentTasks', {
                  key: 'unSentTasks',
                  value: JSON.stringify(unSentTasks)
                });*/
                const calendarTaskIds = yield this.apiProvider.insertCalendarTasks(unSentTasks);
                /*this.logger.logEvent('sendUnsentTasks calendarTaskIds', {
                  key: 'calendarTaskIds',
                  value: JSON.stringify(calendarTaskIds)
                });*/
                if (calendarTaskIds != null) {
                    // tslint:disable-next-line:no-shadowed-variable
                    for (const { item, index } of unSentTasks.map((item, index) => ({ item, index }))) {
                        yield this.setCalendarTaskAsSent(item.CalendarTaskId, true);
                    }
                    // this.logger.logEvent('sendUnsentTasks Done');
                }
                return true;
            }
            catch (error) {
                this.logger.logError(error, { key: 'unsentTasks', value: JSON.stringify(unSentTasks) });
                return false;
            }
        });
    }
    syncUnsyncedTasks(unSyncedTasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            try {
                /*this.logger.logEvent('syncUnsyncedTasks', {
                  key: 'unSyncedTasks',
                  value: JSON.stringify(unSyncedTasks)
                });*/
                const success = yield this.apiProvider.updateCalendarTasks(unSyncedTasks);
                if (success) {
                    for (const history of unSyncedTasks) {
                        yield this.setCalendarTaskAsSynced(history.CalendarTaskId);
                    }
                }
                return true;
            }
            catch (error) {
                this.logger.logError(error, { key: 'unSyncedTasks', value: JSON.stringify(unSyncedTasks) });
                return false;
            }
        });
    }
    sendUnsentHistories(unSentHistories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            try {
                this.logger.logEvent('sendUnsentHistories', {
                    key: 'unSentHistories',
                    value: JSON.stringify(unSentHistories)
                });
                // this.logger.logDebug('sending unsent histories');
                const taskHistoryIds = yield this.apiProvider.insertTaskHistories(unSentHistories);
                // this.logger.logDebug('taskHistoryIds', JSON.stringify(taskHistoryIds));
                if (taskHistoryIds != null) {
                    for (const history of unSentHistories) {
                        yield this.setTaskHistoryAsSent(history.CalendarTaskId, history.TaskHistoryId);
                    }
                }
                else {
                    this.logger.logEvent('sendUnsentHistories FAILURE (taskHistoryIds == null)', {
                        key: 'history',
                        value: JSON.stringify(history)
                    });
                }
                return true;
            }
            catch (error) {
                this.logger.logError(error, { key: 'unSentHistories', value: JSON.stringify(unSentHistories) });
                return false;
            }
        });
    }
    syncUnsyncedHistories(unSyncedHistories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            try {
                this.logger.logEvent('syncUnsyncedHistories', {
                    key: 'syncUnsyncedHistories',
                    value: JSON.stringify(unSyncedHistories)
                });
                const success = yield this.apiProvider.updateTaskHistories(unSyncedHistories);
                if (success) {
                    for (const history of unSyncedHistories) {
                        /*this.logger.logEvent('syncUnsyncedHistories success', {
                          key: 'history',
                          value: JSON.stringify(history)
                        });*/
                        yield this.setTaskHistoryAsSynced(history.CalendarTaskId, history.TaskHistoryId);
                    }
                }
                else {
                    this.logger.logEvent('syncUnsyncedHistories FAILURE (success==false)', {
                        key: 'history',
                        value: JSON.stringify(history)
                    });
                }
                return true;
            }
            catch (error) {
                this.logger.logError(error, { key: 'unSyncedHistories', value: JSON.stringify(unSyncedHistories) });
                return false;
            }
        });
    }
    sendUnsentGroups(unSentGroups) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            try {
                /*this.logger.logEvent('unSentGroups', {
                  key: 'unSentGroups',
                  value: JSON.stringify(unSentGroups)
                });*/
                let success = true;
                for (const group of unSentGroups) {
                    // console.log('API INSERT GROUP', group);
                    if ((yield this.apiProvider.insertGroup(group)) === false) {
                        this.logger.logError(new Error('Unable to send group'), { key: 'transaction', value: JSON.stringify(group) });
                        success = false;
                    }
                }
                if (success === true) {
                    // tslint:disable-next-line:no-shadowed-variable
                    for (const { item, index } of unSentGroups.map((item, index) => ({ item, index }))) {
                        yield this.setGroupAsSent(item.GroupId);
                    }
                    // this.logger.logEvent('sendUnsentGroups Done');
                }
                return true;
            }
            catch (error) {
                this.logger.logError(error, { key: 'sendUnsentGroups', value: JSON.stringify(unSentGroups) });
                return false;
            }
        });
    }
    syncUnsyncedGroups(unSyncedGroups) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            try {
                console.log('syncUnsyncedGroups');
                this.logger.logEvent('unSyncedGroups', {
                    key: 'unSyncedGroups',
                    value: JSON.stringify(unSyncedGroups)
                });
                let success = true;
                for (const group of unSyncedGroups) {
                    if ((yield this.apiProvider.updateGroup(group)) === false) {
                        // TODO : Add error
                        this.logger.logError(new Error('Unable to sync group'), { key: 'transaction', value: JSON.stringify(group) });
                        success = false;
                    }
                }
                if (success === true) {
                    // tslint:disable-next-line:no-shadowed-variable
                    for (const { item, index } of unSyncedGroups.map((item, index) => ({ item, index }))) {
                        yield this.setGroupAsSynced(item.GroupId);
                    }
                    // this.logger.logEvent('syncUnsyncedGroups Done');
                }
                return true;
            }
            catch (error) {
                this.logger.logError(error, { key: 'syncUnsyncedGroups', value: JSON.stringify(unSyncedGroups) });
                return false;
            }
        });
    }
    setCalendarTaskAsSent(oldCalendarTaskId, alreadyLocked = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('oldtaskid vs new', oldCalendarTaskId, newCalendarTaskId);
            // TODO: Check if we can get this from local instead
            const task = this.calendarTaskService.getTask(oldCalendarTaskId);
            if (task == null) {
                this.logger.logError(new Error('Unable to find calendar task index while setting as sent 2'), {
                    key: 'allTasks',
                    value: JSON.stringify(this.calendarTaskService.getAllTasks())
                });
                throw new _models_Exceptions_CalendarTaskNotFoundError__WEBPACK_IMPORTED_MODULE_4__.CalendarTaskNotFoundError('Unable to find calendar task index while setting as sent 3');
            }
            task.Synced = true;
            task.Sent = true;
            // console.log('KKKKKKKKKK Updating date for task', task.Name);
            yield this.updateLastActivityDateFromDate(task.UpdateDate, alreadyLocked);
            yield this.local.updateSyncedCalendarTask(task.toDTO(), alreadyLocked);
        });
    }
    updateLastActivityDateFromDate(updateDate, alreadyLocked) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            if (updateDate == null) {
                this.logger.logDebug('Update date is null');
                updateDate = new Date();
            }
            if (_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.LastActivityDate.getTime() < updateDate.getTime()) {
                // console.log('XXXXXXXXX UPDATE LAST ACTIVITY DATE', updateDate);
                this.logger.logDebug('Last activity date updated : old = ' + _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.LastActivityDate.toISOString());
                this.logger.logDebug('Last activity date updated : new = ' + updateDate.toISOString());
                _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.LastActivityDate = updateDate;
                yield this.local.setUser(_models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_13__.DTOUser.FromUser(_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser), alreadyLocked);
                // Save local ?
            }
        });
    }
    setCalendarTaskAsSynced(calendarTaskId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // TODO: Check if we can get this from local instead
            const task = this.calendarTaskService.getTask(calendarTaskId);
            if (task == null) {
                this.logger.logError(new Error('Unable to find calendar task index while setting as synced'), {
                    key: 'allTasks',
                    value: JSON.stringify(this.calendarTaskService.getAllTasks())
                });
                throw new _models_Exceptions_CalendarTaskNotFoundError__WEBPACK_IMPORTED_MODULE_4__.CalendarTaskNotFoundError('Unable to find calendar task index while setting as synced');
            }
            task.Synced = true;
            // console.log('KKKKKKKKKK Updating date for calendarTask', task.Name);
            yield this.updateLastActivityDateFromDate(task.UpdateDate, true);
            yield this.local.updateSyncedCalendarTask(task.toDTO(), true);
        });
    }
    setTaskHistoryAsSent(calendarTaskId, historyId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // TODO: Check if we can get this from local instead
            // this.logger.logDebug('## SET TASK HISTORY AS SENT ', calendarTaskId + ' ' + historyId);
            const task = this.calendarTaskService.getTask(calendarTaskId);
            // this.logger.logDebug('## SET TASK HISTORY GOT TASK ', task.Name);
            const historyIndex = task.Histories.findIndex(p => p.TaskHistoryId === historyId);
            /*const count = task.Histories.filter(p => p.TaskHistoryId === historyId);
            if (count.length > 1) {
              this.logger.logDebug('@@@@ MORE THAN ONE TASK =  ', JSON.stringify(count));
            }*/
            // this.logger.logDebug('## SET TASK HISTORY INDEX =  ', JSON.stringify(historyIndex));
            if (historyIndex === -1) {
                this.logger.logDebug('## Unable to find task history while setting as sent, HistoriesIds = ', JSON.stringify(task.Histories.map(p => p.TaskHistoryId)));
                // console.log('Unable to find task history while setting as sent, presumably because its only in localstorage');
                this.logger.logError(new Error('Unable to find task history while setting as sent'), {
                    key: 'task.Histories',
                    value: JSON.stringify(task.Histories)
                });
                this.logger.logError(new Error('Unable to find task history while setting as sent2'), {
                    key: 'ids',
                    value: 'calendarTaskId=' + calendarTaskId + ', historyId=' + historyId
                });
                throw new _models_Exceptions_TaskHistoryNotFoundError__WEBPACK_IMPORTED_MODULE_5__.TaskHistoryNotFoundError('Unable to find task history while setting as sent');
            }
            const history = task.Histories[historyIndex]; // TODO : use map
            history.Synced = true;
            history.Sent = true;
            // console.log('KKKKKKKKKK Updating date for history', history);
            yield this.updateLastActivityDateFromDate(history.UpdateDate, true);
            // console.log('(SET AS SENT 1)', history);
            // this.logger.logDebug('## SET TASK HISTORY AS SENT UPDATING', calendarTaskId, historyId);
            yield this.local.updateSyncedTaskHistory(history.toDTO(), true);
            // this.logger.logDebug('## SET TASK HISTORY AS SENT UPDATED', calendarTaskId, historyId);
        });
    }
    setTaskHistoryAsSynced(calendarTaskId, newHistoryId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // TODO: Check if we can get this from local instead
            // console.log('setTaskHistoryAsSynced', calendarTaskId, newHistoryId);
            const task = this.calendarTaskService.getTask(calendarTaskId);
            const historyIndex = task.Histories.findIndex(p => p.TaskHistoryId === newHistoryId); // TODO: USE MAP
            if (historyIndex === -1) {
                this.logger.logError(new Error('Unable to find task history while setting as synced'), {
                    key: 'task.Histories',
                    value: JSON.stringify(task.Histories)
                });
                this.logger.logError(new Error('Unable to find task history while setting as synced2'), {
                    key: 'newHistoryId',
                    value: JSON.stringify(newHistoryId)
                });
            }
            const history = task.Histories[historyIndex]; // TODO: Use MAP
            history.Synced = true;
            // console.log('KKKKKKKKKK Updating date for history', history);
            yield this.updateLastActivityDateFromDate(history.UpdateDate, true);
            yield this.local.updateSyncedTaskHistory(history.toDTO(), true);
        });
    }
    setGroupAsSent(groupId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('SET GROUP AS SENT', groupId);
            // console.log('oldtaskid vs new', oldCalendarTaskId, newCalendarTaskId);
            // TODO: Check if we can get this from local instead
            const allGroups = this.calendarTaskService.allGroups;
            const taskIndex = allGroups.findIndex(p => p.GroupId === groupId);
            if (taskIndex === -1) {
                this.logger.logError(new Error('Unable to find group index while setting as sent 2'), {
                    key: 'allGroups',
                    value: JSON.stringify(allGroups)
                });
                throw new _models_Exceptions_GroupNotFoundError__WEBPACK_IMPORTED_MODULE_10__.GroupNotFoundError('Unable to find group index while setting as sent 3');
            }
            const group = allGroups[taskIndex];
            group.Synced = true;
            group.Sent = true;
            // console.log('KKKKKKKKKK Updating date for group', group.Name);
            yield this.updateLastActivityDateFromDate(group.UpdateDate, true);
            yield this.local.updateSyncedGroup(group.toDTO());
        });
    }
    setGroupAsSynced(groupId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('SET GROUP AS SYNCED', groupId, this.calendarTaskService.allGroups);
            // console.log('oldtaskid vs new', oldCalendarTaskId, newCalendarTaskId);
            // TODO: Check if we can get this from local instead
            const allGroups = this.calendarTaskService.allGroups;
            const taskIndex = allGroups.findIndex(p => p.GroupId === groupId);
            if (taskIndex === -1) {
                this.logger.logError(new Error('Unable to find group index while setting as sent 2'), {
                    key: 'allGroups',
                    value: JSON.stringify(allGroups)
                });
                throw new _models_Exceptions_GroupNotFoundError__WEBPACK_IMPORTED_MODULE_10__.GroupNotFoundError('Unable to find group index while setting as sent 3');
            }
            const group = allGroups[taskIndex];
            group.Synced = true;
            // console.log('KKKKKKKKKK Updating date for group', group.Name);
            yield this.updateLastActivityDateFromDate(group.UpdateDate, true);
            yield this.local.updateGroup(group.toDTO(), true);
        });
    }
    processQueue() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            console.log('PROCESSING QUEUE SERVER SYNC');
            if (this.calendarTaskService.getAllTasks().length > 0) {
                console.log('CHECK FOR EVENTS : CONFIGS', (yield this.userService.getCurrentUser()).Config);
                // console.log('ENABLE7');
                if (this.userService.getConfig(_models_Core_user_config__WEBPACK_IMPORTED_MODULE_9__.UserConfig.EnableCloudSyncKey) === true) {
                    const status = yield this.network.getCurrentNetworkStatus();
                    if (status === _network_service__WEBPACK_IMPORTED_MODULE_7__.ConnectionStatus.Online) {
                        // console.log('NETWORK STATUS ONLINE', status);
                        return yield this.processUnsynchronized();
                    }
                    else {
                        // console.log('DONT CHECK FOR EVENTS 3');
                    }
                }
                else {
                    // console.log('DONT CHECK FOR EVENTS 2');
                }
            }
            else {
                // console.log('DONT CHECK FOR EVENTS 1');
                DataSyncServerService_1.SyncRequired = false;
            }
            // console.log('QUEUE PROCESSED SYNC SERVER');
            return true;
        });
    }
    /**
     * Reloads all groups and tasks from local or server.
     * Used at the start of the application or when hitting refresh manually (for dev only, we can't put this in production)
     */
    reloadAllGroupsAndTasksServer(cancellationToken, lastActivityDate = null, apiUserConfigs = null) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            try {
                console.log("reloading started");
                DataSyncServerService_1.GetLatestStarted = true;
                DataSyncServerService_1.GetLatestInvalid = false;
                let dtoTasks = [];
                let dtoGroups = [];
                dtoGroups = yield this.calendarTaskService.getAllGroupsFromServer();
                if (cancellationToken.cancelRequested === true) {
                    console.log('CANCELATION TOKEN CANCEL 1');
                    return;
                }
                dtoTasks = yield this.calendarTaskService.getAllTodoFromServer((yield this.calendarTaskService.getTaskListDTORequest()));
                if (dtoTasks == null) {
                    this.logger.logError(new Error('Unable to reload tasks'));
                    return (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.throwError)('Unable to reload tasks').toPromise();
                }
                console.log("got tasks");
                // Check if everything is synced or else abort refresh to avoid conflict
                if ((yield this.CanEndRefresh()) === false) {
                    this.logger.logDebug('XXXXXXXXXXXX CANT REFRESH ABORT :( :(');
                    DataSyncServerService_1.GetLatestStarted = false;
                    DataSyncServerService_1.GetLatestRequired = true;
                    return;
                }
                else {
                    if (lastActivityDate != null) {
                        this.logger.logDebug('XXXXXXXXXXXX CAN REFRESH :) :)', lastActivityDate.toISOString());
                    }
                    else {
                        this.logger.logDebug('XXXXXXXXXXXX CAN REFRESH :) :)');
                    }
                }
                // TODO : lock database for this operation, save to local
                // TODO : Test
                const loading = yield this.loadingController.create({
                    message: this.translate.instant('local-storage.refreshing-data'),
                });
                // await this.loadingController.dismiss(null, null, 'reload-server');
                yield loading.present();
                yield this.local.setGroupsAndTasks(dtoGroups, dtoTasks);
                yield this.calendarTaskService.processAndAssignAllGroupsAndTasks(dtoTasks, dtoGroups);
                if (lastActivityDate != null) {
                    _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.LastActivityDate = lastActivityDate;
                    if (apiUserConfigs != null) {
                        // console.log('API CONFIGS : ', apiUserConfigs);
                        _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.Config = apiUserConfigs;
                    }
                    yield this.local.setUser(_models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_13__.DTOUser.FromUser(_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser), false);
                }
                yield loading.dismiss();
                DataSyncServerService_1.GetLatestStarted = false;
                DataSyncServerService_1.GetLatestRequired = false;
                DataSyncServerService_1.GetLatestInvalid = false;
                this.logger.logDebug('XXXXXXXXXXXX REFRESH COMPLETED');
            }
            catch (error) {
                DataSyncServerService_1.GetLatestStarted = false;
                DataSyncServerService_1.GetLatestRequired = true;
                DataSyncServerService_1.GetLatestRequiredReason = 'Reload failed';
                // console.log('Error refreshing all', error);
                this.logger.logError(error);
            }
        });
    }
    CanStartRefresh() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            /*console.log('CAN REFRESH : ',
                        await this.allDataIsSynced(),
                        DataSyncServerService.SyncRequired,
                        DataSyncServerService.ApplicationLoaded);*/
            return (yield this.allDataIsSynced()) === true &&
                DataSyncServerService_1.SyncRequired === false &&
                DataSyncServerService_1.GetLatestStarted === false &&
                DataSyncServerService_1.ApplicationLoaded === true;
        });
    }
    CanEndRefresh() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('CAN REFRESH : ', await this.allDataIsSynced(),
            // DataSyncServerService.SyncRequired, DataSyncServerService.GetLatestInvalid);
            return (yield this.allDataIsSynced()) === true &&
                DataSyncServerService_1.SyncRequired === false &&
                DataSyncServerService_1.GetLatestInvalid === false;
        });
    }
    GetLatest(cancellationToken) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('GETLATEST');
            const ready = yield this.userService.awaitUserReady();
            // console.log('USER IS READY', ready);
            if (this.userService.getConfig(_models_Core_user_config__WEBPACK_IMPORTED_MODULE_9__.UserConfig.EnableCloudSyncKey) === true) { // Only sync if cloud is enabled
                // console.log('SYNC ENABLED');
                if (DataSyncServerService_1.GetLatestRequired === true) {
                    this.logger.logDebug('GET LATEST REQUIRED', DataSyncServerService_1.GetLatestRequiredReason);
                    // console.log('GETTING USER : ', UserService.currentUserId, new Date());
                    const DTOapiUser = yield this.apiProvider.getUser(_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUserId);
                    const apiUser = _models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_13__.DTOUser.ToUser(DTOapiUser);
                    // console.log('USER FROM API : ', apiUser);
                    if (apiUser == null) { // if account not yet created
                        return true;
                    }
                    if (DataSyncServerService_1.SyncRequired === true) {
                        return true;
                    }
                    if (cancellationToken.cancelRequested === true) {
                        console.log('CANCELATION TOKEN CANCEL 2');
                        return true;
                    }
                    // if (apiUser.LastActivityDate == null) {
                    // console.log('ACTIVITY DATE = NULL');
                    // user.LastActivityDate = (DateUtils.YearAgo()).toISOString();
                    // }
                    if (!_shared_date_utils__WEBPACK_IMPORTED_MODULE_12__["default"].dateTimeAreEqual(apiUser.LastActivityDate, _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.LastActivityDate) &&
                        DataSyncServerService_1.SyncRequired === false) {
                        this.logger.logDebug('GET LATEST REQUIRED USER NOT SYNCED');
                        if (_user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.LastActivityDate == null) {
                            _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.LastActivityDate = _shared_date_utils__WEBPACK_IMPORTED_MODULE_12__["default"].YearAgo();
                        }
                        DataSyncServerService_1.GetLatestRequired = true;
                        DataSyncServerService_1.GetLatestRequiredReason = 'Last activity dates : ' +
                            apiUser.LastActivityDate.toISOString() +
                            ' ,' +
                            _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUser.LastActivityDate.toISOString();
                        this.logger.logDebug('Users not synced : ' + DataSyncServerService_1.GetLatestRequiredReason);
                        // this.eventService.emit(new EventData(EventService.EventIds.ReloadFromServer, null));
                        if ((yield this.CanStartRefresh()) === true) {
                            this.logger.logDebug('Can start refresh, STARTING REFRESH 2');
                            yield this.reloadAllGroupsAndTasksServer(cancellationToken, apiUser.LastActivityDate, apiUser.Config);
                        }
                        else {
                            this.logger.logDebug('Unable to refresh, retrying later');
                        }
                    }
                    else {
                        this.logger.logDebug('USER SYNCED');
                        DataSyncServerService_1.GetLatestRequired = false;
                    }
                }
                else {
                    this.logger.logDebug('GET LATEST NOT REQUIRED');
                }
            }
            else {
                // console.log('SYNC NOT ENABLED');
            }
        });
    }
};
DataSyncServerService.GetLatestRequired = false;
DataSyncServerService.SyncRequired = false;
DataSyncServerService.GetLatestStarted = false;
DataSyncServerService.GetLatestInvalid = false;
DataSyncServerService.ApplicationLoaded = false;
DataSyncServerService.GetLatestRequiredReason = '';
DataSyncServerService.ctorParameters = () => [
    { type: _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_3__.ILocalStorageService },
    { type: _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_2__.IApiProvider },
    { type: _calendar_task_service__WEBPACK_IMPORTED_MODULE_1__.CalendarTaskService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_6__.ILogger },
    { type: _network_service__WEBPACK_IMPORTED_MODULE_7__.NetworkService },
    { type: _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService },
    { type: _event_service__WEBPACK_IMPORTED_MODULE_11__.EventService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_16__.LoadingController },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_17__.TranslateService }
];
DataSyncServerService = DataSyncServerService_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_14__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_18__.Injectable)({
        providedIn: 'root'
    })
], DataSyncServerService);



/***/ }),

/***/ 46879:
/*!***********************************************!*\
  !*** ./src/app/services/data-sync.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSyncService": () => (/* binding */ DataSyncService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _data_sync_server_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data-sync-server-service */ 26022);
/* harmony import */ var _shared_thread_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/thread.utils */ 39023);
/* harmony import */ var _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interfaces/i-data-sync-local-service */ 17610);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/date-utils */ 85218);
/* harmony import */ var _calendar_task_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./calendar-task.service */ 43772);
/* harmony import */ var _task_history_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./task-history.service */ 22586);
/* harmony import */ var _models_Core_task_history__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/Core/task-history */ 42367);
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./user.service */ 77524);
/* harmony import */ var _interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../interfaces/i-user-service */ 1109);
/* harmony import */ var _models_Core_user_config__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/Core/user-config */ 74734);
/* harmony import */ var _models_Exceptions_ApiHttpError__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../models/Exceptions/ApiHttpError */ 59032);
/* harmony import */ var _data_sync_2_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./data-sync-2.service */ 57783);





//import { NotificationService } from './notification.service';










let DataSyncService = class DataSyncService {
    constructor(localDataSync, serverDataSync, 
    //private notificationService: NotificationService,
    logger, calendarTaskService, historyService, userService) {
        this.localDataSync = localDataSync;
        this.serverDataSync = serverDataSync;
        this.logger = logger;
        this.calendarTaskService = calendarTaskService;
        this.historyService = historyService;
        this.userService = userService;
        // private RETRY_SECONDS: number = environment.resyncSeconds;
        this.API_HTTP_ERROR_COUNT = 0;
    }
    checkForSyncRepeat() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            while (true) {
                try {
                    // console.log('CHECKFORSINC1');
                    yield this.localDataSync.processQueue();
                    if (this.canProcessServerRequest()) {
                        if ((yield this.serverDataSync.processQueue()) === true) {
                            // console.log('processqueue successful');
                            this.API_HTTP_ERROR_COUNT = 0;
                        }
                    }
                    // console.log('CHECKFORSINC2');
                    yield this.localDataSync.processQueue();
                    if (this.canProcessServerRequest()) {
                        if ((yield this.serverDataSync.GetLatest(new _data_sync_2_service__WEBPACK_IMPORTED_MODULE_12__.CancellationToken())) === true) {
                            // console.log('get latest successful');
                            this.API_HTTP_ERROR_COUNT = 0;
                        }
                    }
                    // console.log('CHECKFORSINC3');
                    yield this.localDataSync.processQueue();
                    //await this.notificationService.refreshNotifications(); // TODO CAPACITOR
                    // await this.processAutoSkip();
                }
                catch (error) {
                    // HANDLE API ERRORS
                    if (error instanceof _models_Exceptions_ApiHttpError__WEBPACK_IMPORTED_MODULE_11__.ApiHttpError) {
                        // console.log('INSTANCE OF API ERROR');
                        this.API_HTTP_ERROR_COUNT++;
                        this.API_HTTP_ERROR_DATE = new Date();
                    }
                    this.logger.logDebug('Error checking for sync repeat');
                    this.logger.logError(error);
                }
                finally {
                    yield _shared_thread_utils__WEBPACK_IMPORTED_MODULE_1__["default"].sleep(1000);
                }
            }
        });
    }
    canProcessServerRequest() {
        const minimumTimeWait = this.getMinimumTimeWait();
        if (this.API_HTTP_ERROR_COUNT > 0) {
            const timeSinceLastError = _shared_date_utils__WEBPACK_IMPORTED_MODULE_4__["default"].getMillisecondsSince(this.API_HTTP_ERROR_DATE);
            if (timeSinceLastError > minimumTimeWait) {
                return true;
            }
            else {
                // console.log('CANNOT PROCESS SERVER REQUEST, NEED TO WAIT', minimumTimeWait);
                return false;
            }
        }
        else {
            // console.log('No Error');
            return true;
        }
    }
    getMinimumTimeWait() {
        const maxMinutesWait = 1;
        const maxTimeWait = 1000 * 60 * maxMinutesWait;
        const timeWait = Math.pow(2, this.API_HTTP_ERROR_COUNT) * 1000;
        // console.log('timewait = ', timeWait);
        return Math.min(maxTimeWait, timeWait);
    }
    // Wait for feature to be requested
    processAutoSkip() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            if (this.userService.getConfig(_models_Core_user_config__WEBPACK_IMPORTED_MODULE_10__.UserConfig.AutoSkipAfter2DaysId) === true) {
                // HAS TO KNOW IF ITS DONE ALREADY OR NOT
                // console.log('skipping config is true');
                const lastUpdateDate = new Date(this.userService.getConfig(_models_Core_user_config__WEBPACK_IMPORTED_MODULE_10__.UserConfig.AutoSkipAfter2DaysLastSkipDateId));
                // console.log('Last Skip Date = ', lastUpdateDate);
                const twoDaysAgo = _shared_date_utils__WEBPACK_IMPORTED_MODULE_4__["default"].AddDays(_shared_date_utils__WEBPACK_IMPORTED_MODULE_4__["default"].Today(), -2);
                if (lastUpdateDate == null || _shared_date_utils__WEBPACK_IMPORTED_MODULE_4__["default"].datesAreEqual(lastUpdateDate, _shared_date_utils__WEBPACK_IMPORTED_MODULE_4__["default"].Today()) === false) {
                    // TODO : Not going to work if person doesnt use the app
                    // TODO : SHOW SKIP
                    // console.log('starting to process skip 2 days ago');
                    for (const group of this.calendarTaskService.allGroups) {
                        for (const task of group.Tasks) {
                            if (this.calendarTaskService.isShown(task, twoDaysAgo.getDay(), twoDaysAgo) &&
                                this.calendarTaskService.isDoneOrSkipped(task, twoDaysAgo) === false) {
                                // console.log('Skipping', task.Name);
                                const calendarTaskHistory = yield _models_Core_task_history__WEBPACK_IMPORTED_MODULE_7__.TaskHistory.createNew(null, false, true, new Date(), twoDaysAgo, task.CalendarTaskId, _user_service__WEBPACK_IMPORTED_MODULE_8__.UserService.currentUserId);
                                // Send event to refresh ui ?
                                yield this.historyService.insertTaskHistory(calendarTaskHistory);
                            }
                        }
                    }
                    // console.log('finished processing skip 2 days ago');
                    this.userService.setConfig(_models_Core_user_config__WEBPACK_IMPORTED_MODULE_10__.UserConfig.AutoSkipAfter2DaysLastSkipDateId, new Date());
                }
            }
        });
    }
};
DataSyncService.ctorParameters = () => [
    { type: _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_2__.IDataSyncLocalService },
    { type: _data_sync_server_service__WEBPACK_IMPORTED_MODULE_0__.DataSyncServerService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_3__.ILogger },
    { type: _calendar_task_service__WEBPACK_IMPORTED_MODULE_5__.CalendarTaskService },
    { type: _task_history_service__WEBPACK_IMPORTED_MODULE_6__.TaskHistoryService },
    { type: _interfaces_i_user_service__WEBPACK_IMPORTED_MODULE_9__.IUserService }
];
DataSyncService = (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_14__.Injectable)({
        providedIn: 'root'
    })
], DataSyncService);



/***/ }),

/***/ 23516:
/*!******************************************!*\
  !*** ./src/app/services/date.service.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DateService": () => (/* binding */ DateService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./user.service */ 77524);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/date-utils */ 85218);
/* harmony import */ var _models_Core_user_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/Core/user-config */ 74734);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ngx-translate/core */ 90466);






let DateService = class DateService {
    constructor(userService, translate) {
        this.userService = userService;
        this.translate = translate;
        this.cachedWorkDates = new Map();
        this.cachingEnabled = false;
        this.currentWorkDate = new Date();
        this.weekdays = [
            'create-task.sunday-abbreviation',
            'create-task.monday-abbreviation',
            'create-task.tuesday-abbreviation',
            'create-task.wednesday-abbreviation',
            'create-task.thursday-abbreviation',
            'create-task.friday-abbreviation',
            'create-task.saturday-abbreviation'
        ];
        this.monthAbbrs = [
            'task-list.january-abbreviation',
            'task-list.february-abbreviation',
            'task-list.march-abbreviation',
            'task-list.april-abbreviation',
            'task-list.may-abbreviation',
            'task-list.june-abbreviation',
            'task-list.july-abbreviation',
            'task-list.august-abbreviation',
            'task-list.september-abbreviation',
            'task-list.october-abbreviation',
            'task-list.november-abbreviation',
            'task-list.december-abbreviation',
        ];
        this.weekAbbrs = [
            'task-list.sunday-abbreviation',
            'task-list.monday-abbreviation',
            'task-list.tuesday-abbreviation',
            'task-list.wednesday-abbreviation',
            'task-list.thursday-abbreviation',
            'task-list.friday-abbreviation',
            'task-list.saturday-abbreviation'
        ];
    }
    GetMonthAbbrs() {
        return [
            this.translate.instant(this.monthAbbrs[0]),
            this.translate.instant(this.monthAbbrs[1]),
            this.translate.instant(this.monthAbbrs[2]),
            this.translate.instant(this.monthAbbrs[3]),
            this.translate.instant(this.monthAbbrs[4]),
            this.translate.instant(this.monthAbbrs[5]),
            this.translate.instant(this.monthAbbrs[6]),
            this.translate.instant(this.monthAbbrs[7]),
            this.translate.instant(this.monthAbbrs[8]),
            this.translate.instant(this.monthAbbrs[9]),
            this.translate.instant(this.monthAbbrs[10]),
            this.translate.instant(this.monthAbbrs[11]),
        ];
    }
    GetWeekAbbrs() {
        return [
            this.translate.instant(this.weekAbbrs[0]),
            this.translate.instant(this.weekAbbrs[1]),
            this.translate.instant(this.weekAbbrs[2]),
            this.translate.instant(this.weekAbbrs[3]),
            this.translate.instant(this.weekAbbrs[4]),
            this.translate.instant(this.weekAbbrs[5]),
            this.translate.instant(this.weekAbbrs[6]),
        ];
    }
    GetWorkDate(date) {
        /*console.log('GetWorkDate Fastest Possible');
        return DateUtils.RemoveHours(new Date());*/
        let dateSubString;
        if (this.cachingEnabled === true) {
            dateSubString = date.toISOString().substring(0, 13);
            const cachedDate = this.cachedWorkDates.get(dateSubString);
            if (cachedDate != null) {
                // console.log('GetWorkDate from Cache');
                return cachedDate;
            }
        }
        const result = _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].GetWorkDate(date, this.cachedEndOfDayTime == null ?
            this.cachedEndOfDayTime :
            this.userService.getConfig(_models_Core_user_config__WEBPACK_IMPORTED_MODULE_2__.UserConfig.EndOfDayTimeKey));
        if (this.cachingEnabled === true) {
            this.cachedWorkDates.set(dateSubString, result);
        }
        // console.log('GetWorkDate Regular');
        return result;
        /*console.log('GetWorkDate Regular');
        return DateUtils.GetWorkDate(date, this.userService.getUserConfig().EndOfDayTime);*/
    }
    ResetCaching() {
        this.cachedEndOfDayTime = this.userService.getConfig(_models_Core_user_config__WEBPACK_IMPORTED_MODULE_2__.UserConfig.EndOfDayTimeKey);
        this.cachedWorkDates.clear();
    }
    GetTodayWorkDate() {
        return _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].GetWorkDate(new Date(), this.cachedEndOfDayTime == null ?
            this.cachedEndOfDayTime :
            this.userService.getConfig(_models_Core_user_config__WEBPACK_IMPORTED_MODULE_2__.UserConfig.EndOfDayTimeKey));
    }
    GetmmddFromMinusDays(minusDays, todayWorkDate) {
        // console.log('getmmdd', minusDays, todayWorkDate, new Date().toISOString().substring(10));
        const date = _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].AddDays(todayWorkDate, -1 * minusDays);
        const ddmm = date.toISOString().slice(5, 10);
        // const dayAbbr = this.translate.instant(this.weekdays[date.getDay()]);
        // const result = dayAbbr + ' ' + ddmm;
        return ddmm;
    }
};
DateService.ctorParameters = () => [
    { type: _user_service__WEBPACK_IMPORTED_MODULE_0__.UserService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_3__.TranslateService }
];
DateService = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({
        providedIn: 'root'
    })
], DateService);



/***/ }),

/***/ 29170:
/*!*******************************************!*\
  !*** ./src/app/services/event.service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventService": () => (/* binding */ EventService),
/* harmony export */   "EventData": () => (/* binding */ EventData)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ 64008);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ 48027);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ 88377);
var _a;




let EventService = class EventService {
    constructor() {
        this.subject$ = new rxjs__WEBPACK_IMPORTED_MODULE_0__.Subject();
    }
    emit(event) {
        this.subject$.next(event);
    }
    on(eventName, action) {
        return this.subject$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_1__.filter)((e) => e.name === eventName), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__.map)((e) => e.value)).subscribe(action);
    }
};
EventService.EventIds = (_a = class {
    },
    _a.NotificationSyncedFalse = 'NotificationSyncedFalse',
    _a.ProgressBar = 'ProgressBar',
    _a.DateChanged = 'DateChanged',
    _a.SkipAllGroup = 'SkipAllGroup',
    _a.PostponeAllGroup = 'PostponeAllGroup',
    _a.CardReset = 'CardReset',
    _a.ToggleDragAndDrop = 'ToggleDragAndDrop',
    _a.TimerCancel = 'TimerCancel',
    _a.TimerComplete = 'TimerComplete',
    _a.TimerUnpause = 'TimerUnpause',
    _a.TimerResume = 'TimerResume',
    _a.TimerStart = 'TimerStart',
    _a.TimerPause = 'TimerPause',
    _a.ShowStats = 'ShowStats',
    _a.LanguageChanged = 'LanguageChanged',
    _a.Walkthrough = 'Walkthrough',
    _a.Resume = 'Resume',
    _a.HideStats = 'HideStats',
    _a.SkipAll = 'SkipAll',
    _a.SyncRequired = 'SyncRequired',
    _a.OnStartSync = 'OnStartSync',
    _a.SkipTask = 'SkipTask',
    _a.PostponeTask = 'PostponeTask',
    _a.DeleteTask = 'DeleteTask',
    // public static EnableNotifications = 'DeleteTask';
    _a.LocalSyncCompleted = 'LocalSyncCompleted',
    _a.ServerSyncCompleted = 'ServerSyncCompleted',
    _a);
EventService.ctorParameters = () => [];
EventService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_4__.Injectable)({
        providedIn: 'root'
    })
], EventService);

class EventData {
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
}


/***/ }),

/***/ 89514:
/*!***********************************************!*\
  !*** ./src/app/services/fireworks.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FireworksService": () => (/* binding */ FireworksService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 14001);


let FireworksService = class FireworksService {
    constructor() { }
    GenerateFireworks() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
            /*const fx = require('fireworks');*/
            // console.log('fireworks', fx);
            /*for (let i = 0 ; i < 10 ; i++) {
              fx.fireworks({
                x: (Math.random() * window.innerWidth) * 0.8 + window.innerWidth * 0.1,
                y: (Math.random() * window.innerHeight) * 0.8 + window.innerHeight * 0.1,
                colors: ['#4CAF50', '#2f80ed', '#D1D1D1'],
                count: 10
              });
              await ThreadUtils.sleep(200);
            }*/
        });
    }
};
FireworksService.ctorParameters = () => [];
FireworksService = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)({
        providedIn: 'root'
    })
], FireworksService);



/***/ }),

/***/ 27109:
/*!***************************************************!*\
  !*** ./src/app/services/local-storage.service.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LocalStorageService": () => (/* binding */ LocalStorageService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _models_DTO_dto_calendar_task__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/DTO/dto-calendar-task */ 76806);
/* harmony import */ var _ionic_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @ionic/storage */ 17897);
/* harmony import */ var _models_Exceptions_DatabaseLockedError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/Exceptions/DatabaseLockedError */ 36953);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _shared_thread_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/thread.utils */ 39023);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _models_DTO_dto_user_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/DTO/dto-user-config */ 62087);
/* harmony import */ var _models_DTO_dto_task_group__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/DTO/dto-task-group */ 4158);
var LocalStorageService_1;










let LocalStorageService = LocalStorageService_1 = class LocalStorageService {
    constructor(storage, logger, translate) {
        this.storage = storage;
        this.logger = logger;
        this.translate = translate;
        this.Initialized = false;
    }
    insertCalendarTasks(tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            try {
                // this.logger.logDebug('{inserting task locally, LOCKING}', new Date().toISOString());
                yield this.lockLocalStorage(false, 'insertCalendarTasks');
                // this.logger.logDebug('{inserting task locally, LOCKED, GETTING TASKS}', new Date().toISOString());
                LocalStorageService_1.LastUsedDatabaseReason = 'insertCalendarTasks' + (new Date()).toISOString();
                const localTasks = yield this.getCalendarTasks(true);
                // this.logger.logDebug('{inserting task locally, GOT TASKS, SETTING TASKS}', new Date().toISOString());
                tasks.forEach(p => localTasks.push(p));
                const result = yield this.setCalendarTasks(localTasks, true);
                // this.logger.logDebug('{inserting task locally, SET TASKS DONE}', new Date().toISOString());
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database insertCalendarTasks1 ' + error));
                alert('unable to read from local database 33');
                return;
            }
            finally {
                // this.logger.logDebug('{insert task FINALLY UNLOCKING}', new Date().toISOString());
                this.unlockLocalStorage(false);
                // this.logger.logDebug('{insert task FINALLY UNLOCKED}', new Date().toISOString());
            }
        });
    }
    insertTaskHistories(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            try {
                /*this.logger.logDebug('inserting history locally (ATTEMPTING TO LOCK)',
                                      JSON.stringify(history),
                                      LocalStorageService.LastUsedDatabaseReason);*/
                yield this.lockLocalStorage(false, 'insertTaskHistories');
                LocalStorageService_1.LastUsedDatabaseReason = 'insertTaskHistories_' + (new Date()).toISOString();
                // this.logger.logDebug('inserting history locally (LOCKED)', JSON.stringify(history));
                const tasks = yield this.getUpdatedTasksHistoriesInserted(histories);
                yield this.setCalendarTasks(tasks, true);
                // this.logger.logDebug('inserted history locally (UNLOCKING)', JSON.stringify(history));
                return;
            }
            catch (error) {
                this.logger.logDebug('ERROR insertTaskHistory', JSON.stringify(error));
                alert('unable inserting task histories');
                return;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    updateTaskHistories(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updating history locally', history);
            try {
                yield this.lockLocalStorage(false, 'updateTaskHistories');
                LocalStorageService_1.LastUsedDatabaseReason = 'updateTaskHistories' + (new Date()).toISOString();
                histories.forEach(p => p.Synced = false);
                const tasks = yield this.getUpdatedTasksHistoriesUpdated(histories);
                yield this.setCalendarTasks(tasks, true);
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateTaskHistories1 ' + error));
                alert('unable to read from local database 77');
                return;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    insertGroups(groups) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('INSERTING GROUP LOCAL STORAGE', group);
            yield this.lockLocalStorage(false, 'setGroups');
            LocalStorageService_1.LastUsedDatabaseReason = 'setGroups ' + (new Date()).toISOString();
            try {
                const localGroups = yield this.getGroups(true);
                groups.forEach(p => localGroups.push(p));
                yield this.setGroups(localGroups, true);
                return;
            }
            catch (error) {
                // console.error('error');
                this.logger.logError(new Error('unable to set groups in local database'));
                alert('unable to read from local database 122');
                return null;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    updateGroups(groups, alreadyLocked) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('UPDATING GROUP LOCAL STORAGE', group);
            if (alreadyLocked === false) {
                yield this.lockLocalStorage(false, 'setGroups');
                LocalStorageService_1.LastUsedDatabaseReason = 'setGroups ' + (new Date()).toISOString();
            }
            try {
                const localGroups = yield this.getGroups(true);
                for (const group of groups) {
                    const index = localGroups.findIndex(p => p.GroupId === group.GroupId);
                    localGroups[index] = group;
                }
                yield this.setGroups(localGroups, true);
                return;
            }
            catch (error) {
                // console.error('error');
                this.logger.logError(new Error('unable to set groups in local database'));
                alert('unable to read from local database 133');
                return null;
            }
            finally {
                if (alreadyLocked === false) {
                    this.unlockLocalStorage(false);
                }
            }
        });
    }
    initialize(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            if (userId == null) {
                // console.log('local storage userId is null');
                return;
            }
            LocalStorageService_1.CALENDAR_TASK_KEY = String('calendarTasks' + userId);
            LocalStorageService_1.TIMER_KEY = String('timer' + userId);
            LocalStorageService_1.GROUPS_KEY = String('group' + userId);
            try {
                yield this.storage.create();
            }
            catch (error2) {
                console.log('error creating database', error2);
            }
            console.log('Initialized Local storage');
            this.Initialized = true;
            return;
        });
    }
    terminate() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('TERMINATE, Currently used:', String(LocalStorageService.currentlyUsed));
            // console.log('TERMINATE, Currently used:', LocalStorageService.currentlyUsed);
            yield this.waitForDbAvailable('terminate');
            LocalStorageService_1.CALENDAR_TASK_KEY = '';
            LocalStorageService_1.TIMER_KEY = '';
            LocalStorageService_1.GROUPS_KEY = '';
            this.Initialized = false;
        });
    }
    getUser(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('getting user from local (awaiting)');
            yield this.lockLocalStorage(false, 'getUser');
            // console.log('getting user from local');
            LocalStorageService_1.LastUsedDatabaseReason = 'getUser ' + (new Date()).toISOString();
            try {
                const user = yield this.storage.get(LocalStorageService_1.USER_KEY + userId);
                // console.log('got user');
                if (user.Config.Configs == null || user.Config.Configs.length == null) {
                    // console.log('INITIALIZING NEW CONFIGS');
                    user.Config = new _models_DTO_dto_user_config__WEBPACK_IMPORTED_MODULE_5__.DTOUserConfig();
                } /*else {
                  console.log('USER CONFIG', user, user.Config.Configs.length);
                  console.log('USER', user);
                }*/
                return user;
            }
            catch (error) {
                // console.log('cant get local user (normal first usage)');
                // this.logger.logError(new Error('unable to read user from local database')); Removed log because this is normal when first install
                // Cant display this because it happens when we create a new account
                // alert('unable to read user from local database');
                return null;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    setUser(user, alreadyLocked = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            yield this.lockLocalStorage(alreadyLocked, 'setUser');
            LocalStorageService_1.LastUsedDatabaseReason = 'setUser ' + (new Date()).toISOString();
            try {
                // console.log('SETTING USER LOCALLY : ', user);
                yield this.storage.set(LocalStorageService_1.USER_KEY + user.UserId, user);
                return;
            }
            catch (error) {
                console.error('error', error);
                this.logger.logError(new Error('unable to set user in local database'));
                alert('unable to set user in local database');
                return null;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    setCalendarTasks(tasks, alreadyReadOnly = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // const dateStart = new Date();
            // this.logger.logDebug('setCalendarTasks');
            yield this.lockLocalStorage(alreadyReadOnly, 'setCalendarTasks');
            LocalStorageService_1.LastUsedDatabaseReason = 'setCalendarTasks ' + (new Date()).toISOString();
            try {
                yield this.setCalendarTasksToDatabase(tasks);
                return true;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database 3'), error);
                alert('unable to read from database 3');
                return false;
            }
            finally {
                this.unlockLocalStorage(alreadyReadOnly);
                // this.logger.logDebug('SET CALENDAR TASKS COMPLETED IN ', DateUtils.getTimeSince(dateStart));
            }
        });
    }
    getCalendarTasks(alreadyLocked = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('GETCALENDARTASKS LOCKING', new Date().toISOString());
            yield this.lockLocalStorage(alreadyLocked, 'getCalendarTasks');
            /*if (alreadyLocked === false) {
              this.logger.logDebug('GETCALENDARTASKS LOCKED', new Date().toISOString());
            }*/
            LocalStorageService_1.LastUsedDatabaseReason = 'getCalendarTasks' + (new Date()).toISOString();
            try {
                const tasks = yield this.getCalendarTasksFromDatabase();
                // console.log('TASKS', tasks);
                return tasks.filter(p => p.CalendarTaskId != null);
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database getCalendarTasks1 ' + error));
                alert('unable to read from local database 2');
                return [];
            }
            finally {
                if (alreadyLocked === false) {
                    // this.logger.logDebug('GETCALENDARTASKS UNLOCKING', new Date().toISOString());
                    // this.logger.logDebug('GETCALENDARTASKS ALREADY LOCKED', String(alreadyLocked));
                }
                this.unlockLocalStorage(alreadyLocked);
                /*if (alreadyLocked === false) {
                  this.logger.logDebug('GETCALENDARTASKS UNLOCKED', new Date().toISOString());
                }*/
            }
        });
    }
    getCalendarTasksFromDatabase() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('getCalendarTasksFromDatabase', LocalStorageService.CALENDAR_TASK_KEY);
            if (LocalStorageService_1.CALENDAR_TASK_KEY == null) {
                return [];
            }
            // this.logger.logDebug('getCalendarTasksFromDatabase2', LocalStorageService.CALENDAR_TASK_KEY, new Date().toISOString());
            //await this.storage.ready;
            // this.logger.logDebug('isReady', LocalStorageService.CALENDAR_TASK_KEY, new Date().toISOString());
            const tasks = yield this.storage.get(LocalStorageService_1.CALENDAR_TASK_KEY);
            if (tasks == null) {
                // console.log('Tasks is null');
                return [];
            }
            // this.logger.logDebug('gotCalendarTasksFromDatabase TASKS', new Date().toISOString());
            const allTasks = tasks.map(p => _models_DTO_dto_calendar_task__WEBPACK_IMPORTED_MODULE_0__.DTOCalendarTask.fromAny(p));
            // this.logger.logDebug('gotCalendarTasksFromDatabase', new Date().toISOString());
            return allTasks;
        });
    }
    setCalendarTasksToDatabase(tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('setSetCalendarTasksToDatabase');
            //await this.storage.ready;
            yield this.storage.set(LocalStorageService_1.CALENDAR_TASK_KEY, tasks);
            return;
        });
    }
    insertCalendarTask(task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            try {
                // this.logger.logDebug('{inserting task locally, LOCKING}', new Date().toISOString());
                yield this.lockLocalStorage(false, 'insertCalendarTask');
                // this.logger.logDebug('{inserting task locally, LOCKED, GETTING TASKS}', new Date().toISOString());
                LocalStorageService_1.LastUsedDatabaseReason = 'insertCalendarTask' + (new Date()).toISOString();
                const tasks = yield this.getCalendarTasks(true);
                // this.logger.logDebug('{inserting task locally, GOT TASKS, SETTING TASKS}', new Date().toISOString());
                tasks.push(task);
                const result = yield this.setCalendarTasks(tasks, true);
                // this.logger.logDebug('{inserting task locally, SET TASKS DONE}', new Date().toISOString());
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database insertCalendarTask1 ' + error));
                alert('unable to read from local database 3');
                return;
            }
            finally {
                // this.logger.logDebug('{insert task FINALLY UNLOCKING}', new Date().toISOString());
                this.unlockLocalStorage(false);
                // this.logger.logDebug('{insert task FINALLY UNLOCKED}', new Date().toISOString());
            }
        });
    }
    updateCalendarTask(task, synced = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updating task locally', task);
            try {
                // console.log('{updading task locally, LOCKING}', task, new Date().toISOString());
                yield this.lockLocalStorage(false, 'updateCalendarTask');
                // console.log('{updaded task locally, LOCKED}', new Date().toISOString());
                LocalStorageService_1.LastUsedDatabaseReason = 'updateCalendarTask' + (new Date()).toISOString();
                task.Synced = synced;
                const tasks = yield this.getUpdatedTasks(task);
                // console.log('{updating task locally, GOT TASKS, SETTING TASKS}', new Date().toISOString());
                yield this.setCalendarTasks(tasks, true);
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateCalendarTask1 ' + error));
                alert('unable to read from local database 4');
                return;
            }
            finally {
                // console.log('{update task FINALLY UNLOCKING}', new Date().toISOString());
                this.unlockLocalStorage(false);
                // console.log('{update task FINALLY UNLOCKING}', new Date().toISOString());
            }
        });
    }
    updateCalendarTasks(tasks, synced = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updating tasks locally', tasks);
            try {
                // console.log('{updading tasks locally, LOCKING}', tasks, new Date().toISOString());
                yield this.lockLocalStorage(false, 'updateCalendarTasks');
                // console.log('{updading tasks locally, LOCKED}', new Date().toISOString());
                LocalStorageService_1.LastUsedDatabaseReason = 'updateCalendarTasks' + (new Date()).toISOString();
                tasks.forEach(p => p.Synced = synced);
                const allTasks = yield this.getUpdatedTasksBatch(tasks);
                // console.log('{inserting tasks locally, GOT TASKS, SETTING TASKS}', new Date().toISOString());
                yield this.setCalendarTasks(allTasks, true);
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateCalendarTasks1 ' + error));
                alert('unable to read from local database 5');
                return;
            }
            finally {
                // console.log('{update tasks FINALLY UNLOCKING}', new Date().toISOString());
                this.unlockLocalStorage(false);
                // console.log('{update tasks FINALLY UNLOCKING}', new Date().toISOString());
            }
        });
    }
    updateSyncedCalendarTask(task, alreadyLocked = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updateSyncedCalendarTask');
            // await this.waitForDbAvailable(); don't put this on, it causes a bug, or put a parameter
            // console.log('lock (updateSyncedCalendarTask)');
            try {
                /*if (LocalStorageService.currentlyUsed === true) {
                  this.logger.logError(new Error('updateSyncedCalendarTask already in use'));
                }*/
                if (alreadyLocked === true) {
                    // console.log('{updading synced task locally, LOCKING}', task, new Date().toISOString());
                    LocalStorageService_1.currentlyUsed = true;
                    // console.log('{updading synced task locally, LOCKED}', task, new Date().toISOString());
                    LocalStorageService_1.LastUsedDatabaseReason = 'updateSyncedCalendarTask' + (new Date()).toISOString();
                }
                // await this.lockLocalStorage(false); // don't put this on, it causes a bug, or put a parameter
                const tasks = yield this.getUpdatedTasks(task);
                // console.log('{updating synced task locally, GOT TASKS, SETTING TASKS}', new Date().toISOString());
                yield this.setCalendarTasks(tasks, true);
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateSyncedCalendarTask1 ' + error));
                alert('unable to read from local database 6');
            }
            finally {
                if (alreadyLocked === true) {
                    // console.log('{update synced tasks FINALLY UNLOCKING}', new Date().toISOString());
                    this.unlockLocalStorage(alreadyLocked); // Are we sure we want to unlock ?
                    // console.log('{update synced tasks FINALLY UNLOCKING}', new Date().toISOString());
                }
            }
        });
    }
    getUpdatedTasks(task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('getUpdatedTasks');
            const tasks = yield this.getCalendarTasks(true);
            const index = tasks.findIndex(p => p.CalendarTaskId === task.CalendarTaskId);
            tasks[index] = task;
            return tasks;
        });
    }
    getUpdatedTasksBatch(tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('getUpdatedTasks');
            const allTasks = yield this.getCalendarTasks(true);
            for (const task of tasks) {
                const index = allTasks.findIndex(p => p.CalendarTaskId === task.CalendarTaskId);
                allTasks[index] = task;
            }
            return allTasks;
        });
    }
    insertTaskHistory(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            try {
                /*this.logger.logDebug('inserting history locally (ATTEMPTING TO LOCK)',
                                      JSON.stringify(history),
                                      LocalStorageService.LastUsedDatabaseReason);*/
                yield this.lockLocalStorage(false, 'insertTaskHistory');
                LocalStorageService_1.LastUsedDatabaseReason = 'insertTaskHistory_' + (new Date()).toISOString();
                // this.logger.logDebug('inserting history locally (LOCKED)', JSON.stringify(history));
                const tasks = yield this.getUpdatedTasksHistoryInserted(history);
                yield this.setCalendarTasks(tasks, true);
                // this.logger.logDebug('inserted history locally (UNLOCKING)', JSON.stringify(history));
                return;
            }
            catch (error) {
                this.logger.logDebug('ERROR insertTaskHistory', JSON.stringify(error));
                alert('unable inserting task history');
                return;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    updateTaskHistory(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updating history locally', history);
            try {
                yield this.lockLocalStorage(false, 'updateTaskHistory');
                LocalStorageService_1.LastUsedDatabaseReason = 'updateTaskHistory' + (new Date()).toISOString();
                history.Synced = false;
                const tasks = yield this.getUpdatedTasksHistoryUpdated(history);
                yield this.setCalendarTasks(tasks, true);
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateTaskHistory1 ' + error));
                alert('unable to read from local database 7');
                return;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    updateSyncedTaskHistory(history, alreadySynced = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('lock (updateSyncedTaskHistory)');
            try {
                if (alreadySynced === false) {
                    LocalStorageService_1.currentlyUsed = true;
                    LocalStorageService_1.LastUsedDatabaseReason = 'updateSyncedTaskHistory' + (new Date()).toISOString();
                }
                const tasks = yield this.getUpdatedTasksHistoryUpdated2(history);
                // this.logger.logDebug('SETTING TASKS:', JSON.stringify(tasks));
                // this.logger.logDebug('## updateSyncedTaskHistory SETTING CALENDAR TASKS');
                yield this.setCalendarTasks(tasks, true);
                // this.logger.logDebug('## updateSyncedTaskHistory SET CALENDAR TASKS');
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateSyncedTaskHistory1 ' + error));
                alert('unable to read from local database 8');
                return;
            }
            finally {
                this.unlockLocalStorage(alreadySynced); // Are we sure we want to unlock ?
            }
        });
    }
    updateSyncedGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('lock (updateSyncedTaskHistory)');
            try {
                const groups = yield this.getUpdatedGroups(group);
                // this.logger.logDebug('SETTING TASKS:', tasks);
                // this.logger.logDebug('## updateSyncedTaskHistory SETTING CALENDAR TASKS');
                yield this.setGroups(groups, true);
                // this.logger.logDebug('## updateSyncedTaskHistory SET CALENDAR TASKS');
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateSyncedTaskHistory1 ' + error));
                alert('unable to read from local database 9');
                return;
            }
        });
    }
    getUpdatedTasksHistoryInserted(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('getUpdatedTasksHistoryInserted');
            const tasks = yield this.getCalendarTasks(true);
            const task = tasks.filter(p => p.CalendarTaskId === history.CalendarTaskId)[0];
            // this.logger.logDebug('pushing histories');
            if (!task.Histories.some(p => p.TaskHistoryId === history.TaskHistoryId)) {
                task.Histories.push(history);
            }
            else {
                this.logger.logError(new Error('HISTORY ALREADY EXISTS'), { key: 'transaction', value: JSON.stringify(history) });
            }
            return tasks;
        });
    }
    getUpdatedTasksHistoriesInserted(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('getUpdatedTasksHistoryInserted');
            const tasks = yield this.getCalendarTasks(true);
            for (const history of histories) {
                const task = tasks.filter(p => p.CalendarTaskId === history.CalendarTaskId)[0];
                // this.logger.logDebug('pushing histories');
                if (!task.Histories.some(p => p.TaskHistoryId === history.TaskHistoryId)) {
                    task.Histories.push(history);
                }
                else {
                    this.logger.logError(new Error('HISTORY ALREADY EXISTS'), { key: 'transaction', value: JSON.stringify(history) });
                }
            }
            return tasks;
        });
    }
    getUpdatedTasksHistoryUpdated(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('getUpdatedTasksHistoryUpdated');
            const tasks = yield this.getCalendarTasks(true);
            const task = tasks.filter(p => p.CalendarTaskId === history.CalendarTaskId)[0];
            const index = task.Histories.findIndex(p => p.TaskHistoryId === history.TaskHistoryId);
            task.Histories[index] = history;
            return tasks;
        });
    }
    getUpdatedTasksHistoriesUpdated(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('getUpdatedTasksHistoryUpdated');
            const tasks = yield this.getCalendarTasks(true);
            for (const history of histories) {
                const task = tasks.filter(p => p.CalendarTaskId === history.CalendarTaskId)[0];
                const index = task.Histories.findIndex(p => p.TaskHistoryId === history.TaskHistoryId);
                task.Histories[index] = history;
            }
            return tasks;
        });
    }
    getUpdatedTasksHistoryUpdated2(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('getUpdatedTasksHistoryUpdated2');
            const tasks = yield this.getCalendarTasks(true);
            const taskIndex = tasks.findIndex(p => p.CalendarTaskId === history.CalendarTaskId);
            // this.logger.logDebug('taskIndex = ', JSON.stringify(taskIndex));
            const task = tasks[taskIndex];
            const historyIndex = task.Histories.findIndex(p => p.TaskHistoryId === history.TaskHistoryId);
            task.Histories[historyIndex] = history;
            tasks[taskIndex] = task;
            return tasks;
        });
    }
    getUpdatedGroups(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('[ GET UPDATED GROUP ]', group);
            // console.log('getUpdatedTasksHistoryUpdated2');
            const groups = yield this.getGroups(true);
            const groupIndex = groups.findIndex(p => p.GroupId === group.GroupId);
            // console.log('taskIndex = ', taskIndex);
            groups[groupIndex] = group;
            return groups;
        });
    }
    clear() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            yield this.storage.clear();
            return;
        });
    }
    shouldViewChangeLog(currentVersion) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            //await this.storage.ready;
            const lastReadVersion = yield this.storage.get(LocalStorageService_1.LAST_READ_CHANGELOG_VERSION_KEY);
            if (lastReadVersion != null) {
                if (lastReadVersion !== currentVersion) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                this.storage.set(LocalStorageService_1.LAST_READ_CHANGELOG_VERSION_KEY, currentVersion);
                return false;
            }
        });
    }
    setChangeLogToViewed(currentVersion) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            yield this.storage.set(LocalStorageService_1.LAST_READ_CHANGELOG_VERSION_KEY, currentVersion);
            return true;
        });
    }
    getTimers(alreadyLocked = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            //this.logger.logDebug('GETTING TIMERS)');
            yield this.lockLocalStorage(alreadyLocked, 'getTimers');
            LocalStorageService_1.LastUsedDatabaseReason = 'getTimers ' + (new Date()).toISOString();
            try {
                let timers = yield this.storage.get(LocalStorageService_1.TIMER_KEY);
                //this.logger.logDebug('LOCAL GETTIMERS : ', JSON.stringify(timers));
                if (timers == null || timers.length == null) {
                    // console.log('INITIALIZING NEW TIMERS');
                    timers = [];
                }
                else {
                    // TODO : Maybe we will need timers someday, right now we are filtering the completed ones
                    timers = timers.filter(p => p.isDone === false && p.isVoid !== true);
                }
                return timers;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read timers from local database'));
                return null;
            }
            finally {
                this.unlockLocalStorage(alreadyLocked);
            }
        });
    }
    setTimers(timers, alreadyReadOnly = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            yield this.lockLocalStorage(alreadyReadOnly, 'setTimers');
            LocalStorageService_1.LastUsedDatabaseReason = 'setTimers ' + (new Date()).toISOString();
            try {
                //console.log('LOCAL SET TIMERS', timers, LocalStorageService.TIMER_KEY);
                yield this.storage.set(LocalStorageService_1.TIMER_KEY, timers);
                return;
            }
            catch (error) {
                // console.error('error');
                this.logger.logError(new Error('unable to set timers in local database'));
                return null;
            }
            finally {
                this.unlockLocalStorage(alreadyReadOnly);
            }
        });
    }
    insertTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('INSERTING TIMER LOCAL STORAGE', JSON.stringify(timer));
            yield this.lockLocalStorage(false, 'setTimer');
            LocalStorageService_1.LastUsedDatabaseReason = 'setTimer ' + (new Date()).toISOString();
            try {
                const timers = yield this.getTimers(true);
                timers.push(timer);
                yield this.setTimers(timers, true);
                return;
            }
            catch (error) {
                // console.error('error');
                this.logger.logError(new Error('unable to set timer in local database'));
                return null;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    updateTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('UPDATING TIMER LOCAL STORAGE', timer);
            yield this.lockLocalStorage(false, 'setTimer');
            LocalStorageService_1.LastUsedDatabaseReason = 'setTimer ' + (new Date()).toISOString();
            try {
                const timers = yield this.getTimers(true);
                const index = timers.findIndex(p => p.TimerId === timer.TimerId);
                timers[index] = timer;
                yield this.setTimers(timers, true);
                return;
            }
            catch (error) {
                // console.error('error');
                this.logger.logError(new Error('unable to set timer in local database'));
                return null;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    getGroups(alreadyLocked = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('GETGROUPS LOCKING', new Date().toISOString());
            yield this.lockLocalStorage(alreadyLocked, 'getGroups');
            /*if (alreadyLocked === false) {
              this.logger.logDebug('GETCALENDARTASKS LOCKED', new Date().toISOString());
            }*/
            LocalStorageService_1.LastUsedDatabaseReason = 'getGroups' + (new Date()).toISOString();
            try {
                const groups = yield this.getGroupsFromDatabase();
                // console.log('GOT GROUPS : ', groups);
                // TODO : Temporary, remove
                const oops = groups.filter(p => p.Void == null);
                oops.forEach(p => p.Void = false);
                return groups; // groups.filter(p => p.Void === false);
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database getGroups ' + error));
                alert('unable to read from local database 10');
                return [];
            }
            finally {
                /*if (alreadyLocked === false) {
                  this.logger.logDebug('GETCALENDARTASKS UNLOCKING', new Date().toISOString());
                  this.logger.logDebug('GETCALENDARTASKS ALREADY LOCKED', String(alreadyLocked));
                }*/
                this.unlockLocalStorage(alreadyLocked);
                /*if (alreadyLocked === false) {
                  this.logger.logDebug('GETGROUPS UNLOCKED', new Date().toISOString());
                }*/
            }
        });
    }
    getGroupsFromDatabase() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('getCalendarTasksFromDatabase', LocalStorageService.CALENDAR_TASK_KEY);
            if (LocalStorageService_1.GROUPS_KEY == null) {
                return [];
            }
            // this.logger.logDebug('getCalendarTasksFromDatabase2', LocalStorageService.CALENDAR_TASK_KEY, new Date().toISOString());
            //await this.storage.ready;
            // this.logger.logDebug('isReady', LocalStorageService.CALENDAR_TASK_KEY, new Date().toISOString());
            const tasks = yield this.storage.get(LocalStorageService_1.GROUPS_KEY);
            if (tasks == null) {
                // console.log('Tasks is null');
                return [];
            }
            // this.logger.logDebug('gotCalendarTasksFromDatabase TASKS', new Date().toISOString());
            const allGroups = tasks.map(p => _models_DTO_dto_task_group__WEBPACK_IMPORTED_MODULE_6__.DTOTaskGroup.fromAny(p));
            // console.log('ALLGROUPS FROMDATABASE', allGroups);
            // this.logger.logDebug('gotCalendarTasksFromDatabase', new Date().toISOString());
            return allGroups;
        });
    }
    setGroups(groups, alreadyReadOnly = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('setCalendarTasks');
            yield this.lockLocalStorage(alreadyReadOnly, 'setGroups');
            LocalStorageService_1.LastUsedDatabaseReason = 'setGroups ' + (new Date()).toISOString();
            try {
                yield this.setGroupsToDatabase(groups);
                return true;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database 6767'), error);
                alert('unable to read from local database 11');
                return false;
            }
            finally {
                this.unlockLocalStorage(alreadyReadOnly);
                // this.logger.logDebug('SET CALENDAR TASKS COMPLETED');
            }
        });
    }
    setGroupsAndTasks(groups, tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('setCalendarTasks');
            yield this.lockLocalStorage(false, 'setGroupsAndTasks');
            LocalStorageService_1.LastUsedDatabaseReason = 'setGroupsAndTasks ' + (new Date()).toISOString();
            try {
                yield this.setGroups(groups, true);
                yield this.setCalendarTasks(tasks, true);
                return true;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database 6768'), error);
                alert('unable to read from local database 65');
                return false;
            }
            finally {
                this.unlockLocalStorage(false);
                // this.logger.logDebug('SET CALENDAR TASKS COMPLETED');
            }
        });
    }
    setGroupsToDatabase(groups) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('setGroupsToDatabase', groups);
            //await this.storage.ready;
            yield this.storage.set(LocalStorageService_1.GROUPS_KEY, groups);
            return;
        });
    }
    // TODO: Do Generic method is is the same as timer
    insertGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('INSERTING GROUP LOCAL STORAGE', group);
            yield this.lockLocalStorage(false, 'setGroup');
            LocalStorageService_1.LastUsedDatabaseReason = 'setGroup ' + (new Date()).toISOString();
            try {
                const groups = yield this.getGroups(true);
                groups.push(group);
                yield this.setGroups(groups, true);
                return;
            }
            catch (error) {
                // console.error('error');
                this.logger.logError(new Error('unable to set group in local database'));
                alert('unable to read from local database 12');
                return null;
            }
            finally {
                this.unlockLocalStorage(false);
            }
        });
    }
    updateGroup(group, alreadyLocked = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('UPDATING GROUP LOCAL STORAGE', group);
            if (alreadyLocked === false) {
                yield this.lockLocalStorage(false, 'setGroup');
                LocalStorageService_1.LastUsedDatabaseReason = 'setGroup ' + (new Date()).toISOString();
            }
            try {
                const groups = yield this.getGroups(true);
                const index = groups.findIndex(p => p.GroupId === group.GroupId);
                groups[index] = group;
                yield this.setGroups(groups, true);
                return;
            }
            catch (error) {
                // console.error('error');
                this.logger.logError(new Error('unable to set group in local database'));
                alert('unable to read from local database 13');
                return null;
            }
            finally {
                if (alreadyLocked === false) {
                    this.unlockLocalStorage(false);
                }
            }
        });
    }
    unlockLocalStorage(alreadyLocked) {
        if (alreadyLocked === false) {
            // console.log('[UNLOCK]');
            LocalStorageService_1.currentlyUsed = false;
        }
    }
    lockLocalStorage(alreadyLocked, reason) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            if (alreadyLocked === false) {
                // console.log('[ATTEMPTING LOCK]');
                yield this.waitForDbAvailable('lockLocalStorage ' + reason);
                // console.log('[LOCK SUCCESSFUL]');
                LocalStorageService_1.currentlyUsed = true;
                return;
            }
            return;
        });
    }
    waitForDbAvailable(reason) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            if (LocalStorageService_1.currentlyUsed === true || LocalStorageService_1.CALENDAR_TASK_KEY == null) {
                for (let i = 0; i < 30; i++) {
                    /*console.log('----- CURRENTLY USED BY ' + LocalStorageService.LastUsedDatabaseReason + ', FOR ' +
                                reason + ' WAITING, CURRENT DATE = ', new Date().toISOString());*/
                    yield _shared_thread_utils__WEBPACK_IMPORTED_MODULE_4__["default"].sleep(1000);
                    if (this.dbAvailable()) {
                        this.logger.logDebug('available after i=', i.toString());
                        return;
                    }
                }
                this.logger.logError(new Error('database is locked'), { key: 'reason', value: LocalStorageService_1.LastUsedDatabaseReason });
                alert(this.translate.instant('local-storage.database-locked'));
                throw new _models_Exceptions_DatabaseLockedError__WEBPACK_IMPORTED_MODULE_2__.DatabaseLockedError('database is locked');
            }
            else {
                // console.log('CURRENTLY NOT USED, RETURNING');
                return;
            }
        });
    }
    dbAvailable() {
        return LocalStorageService_1.currentlyUsed === false;
    }
};
LocalStorageService.currentlyUsed = false;
LocalStorageService.LAST_READ_CHANGELOG_VERSION_KEY = 'lastReadChangelogVersion';
LocalStorageService.USER_KEY = 'user';
LocalStorageService.ctorParameters = () => [
    { type: _ionic_storage__WEBPACK_IMPORTED_MODULE_1__.Storage },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_3__.ILogger },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_8__.TranslateService }
];
LocalStorageService = LocalStorageService_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_9__.Injectable)({
        providedIn: 'root'
    })
], LocalStorageService);



/***/ }),

/***/ 39853:
/*!*******************************************!*\
  !*** ./src/app/services/modal.service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModalService": () => (/* binding */ ModalService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _event_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./event.service */ 29170);
var _a;
var ModalService_1;






let ModalService = ModalService_1 = class ModalService {
    constructor(modalController, eventService, translate, loadingController, logger, platform) {
        this.modalController = modalController;
        this.eventService = eventService;
        this.translate = translate;
        this.loadingController = loadingController;
        this.logger = logger;
        this.platform = platform;
    }
    showCreateTaskModal(component, groupId = "") {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            // PREVENT DUPLICATE MODAL
            const modalId = ModalService_1.ModalIds.CreateTask;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            // console.log('CREATE CLICK', new Date().toISOString());
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId,
                componentProps: { preSelectedGroupId: groupId }
            });
            modal.present().then(() => {
                const firstInput = document.querySelector('ion-modal input');
                firstInput.focus();
            });
            // console.log('CREATE PRESENTED', new Date().toISOString());
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_1__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_1__.EventService.EventIds.ProgressBar, null));
            return;
        });
    }
    showEditTaskModal(component, task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.EditTask;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal2 = yield this.modalController.create({
                component,
                backdropDismiss: false,
                componentProps: {
                    currentTask: task,
                },
                id: modalId
            });
            yield modal2.present();
            yield modal2.onWillDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
            return;
        });
    }
    showCreateGroupModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.CreateGroup;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal2 = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            yield modal2.present();
            const firstInput = document.querySelector('app-group-create input');
            firstInput.focus();
            const subscription = this.platform.backButton.subscribe(() => (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
                yield modal2.dismiss();
            }));
            const data = yield modal2.onDidDismiss();
            subscription.unsubscribe();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
            return data.data;
        });
    }
    showEditGroupModal(component, group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.EditGroup;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal2 = yield this.modalController.create({
                component,
                backdropDismiss: false,
                componentProps: {
                    currentGroup: group,
                },
                id: modalId
            });
            yield modal2.present();
            const data = yield modal2.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
            return data.data;
        });
    }
    showFeedbackModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.Feedback;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                // this.logger.logDebug('FeedbackModal already shown');
                return;
            }
            else {
                // this.logger.logDebug('FeedbackModal not shown, showing');
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId,
            });
            yield modal.present();
            yield modal.onDidDismiss();
            // this.logger.logDebug('FeedbackModal dismissed');
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showNotesModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.Notes;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            yield modal.present();
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showLogsModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.Logs;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.msg-show-logs')
            });
            yield loading.present();
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            yield modal.present();
            yield loading.dismiss();
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showUserSettingsModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.UserSettings;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.load-settings'),
            });
            yield loading.present();
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            modal.present();
            yield loading.dismiss();
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showTaskSelectionModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.TaskSelection;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const loading = yield this.loadingController.create({
                message: this.translate.instant('menu.loading-task-selection'),
            });
            yield loading.present();
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            yield modal.present();
            yield loading.dismiss();
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showPrivacyModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.Privacy;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            modal.present();
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showTermsModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.Terms;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            modal.present();
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showGroupsModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.Groups;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            modal.present();
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showAssignedDateModal(component, datePickerObj, task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.AssignedDate;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const datePickerModal = yield this.modalController.create({
                component,
                cssClass: 'li-ionic4-datePicker',
                componentProps: {
                    objConfig: datePickerObj,
                    selectedDate: task.AssignedDate
                },
                id: modalId
            });
            yield datePickerModal.present();
            const data = yield datePickerModal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
            return data;
        });
    }
    showWelcomeModal(component) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.Welcome;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const modal = yield this.modalController.create({
                component,
                backdropDismiss: false,
                id: modalId
            });
            modal.present();
            yield modal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
        });
    }
    showCurrentDateModal(component, datePickerObj, selectedDate) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(this, void 0, void 0, function* () {
            const modalId = ModalService_1.ModalIds.CurrentDate;
            if (ModalService_1.shownModalIds.some(p => p === modalId)) {
                return null;
            }
            else {
                ModalService_1.shownModalIds.push(modalId);
            }
            const datePickerModal = yield this.modalController.create({
                component,
                cssClass: 'li-ionic4-datePicker',
                componentProps: {
                    objConfig: datePickerObj,
                    selectedDate
                },
                id: modalId
            });
            yield datePickerModal.present();
            const data = yield datePickerModal.onDidDismiss();
            ModalService_1.shownModalIds = ModalService_1.shownModalIds.filter(p => p !== modalId);
            return data;
        });
    }
};
ModalService.ModalIds = (_a = class {
    },
    _a.CreateTask = 'CreateTaskModal',
    _a.EditTask = 'EditTaskModal',
    _a.CreateGroup = 'CreateGroupModal',
    _a.EditGroup = 'EditGroupModal',
    _a.Feedback = 'FeedbackModal',
    _a.Notes = 'NotesModal',
    _a.Logs = 'LogsModal',
    _a.UserSettings = 'UserSettingsModal',
    _a.TaskSelection = 'TaskSelectionModal',
    _a.Privacy = 'PrivacyModal',
    _a.Terms = 'TermsModal',
    _a.Groups = 'GroupsModal',
    _a.AssignedDate = 'AssignedDateModal',
    _a.Welcome = 'WelcomeModal',
    _a.CurrentDate = 'CurrentDate',
    _a);
ModalService.shownModalIds = [];
ModalService.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__.ModalController },
    { type: _event_service__WEBPACK_IMPORTED_MODULE_1__.EventService },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__.TranslateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__.LoadingController },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_0__.ILogger },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_3__.Platform }
];
ModalService = ModalService_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_5__.Injectable)({
        providedIn: 'root'
    })
], ModalService);



/***/ }),

/***/ 42421:
/*!*********************************************!*\
  !*** ./src/app/services/network.service.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionStatus": () => (/* binding */ ConnectionStatus),
/* harmony export */   "NetworkService": () => (/* binding */ NetworkService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _capacitor_network__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/network */ 35609);




var ConnectionStatus;
(function (ConnectionStatus) {
    ConnectionStatus[ConnectionStatus["Online"] = 0] = "Online";
    ConnectionStatus[ConnectionStatus["Offline"] = 1] = "Offline";
})(ConnectionStatus || (ConnectionStatus = {}));
/**
 * Source : https://devdactic.com/ionic-4-offline-mode/
 * Credits : Steve
 */
let NetworkService = class NetworkService {
    constructor(plt) {
        this.plt = plt;
        this.plt.ready().then(() => {
            this.initializeNetworkEvents();
            /*Network.addListener('networkStatusChange', status => {
              console.log('Network status changed', status);
            });*/
            //const status = (await Network.getStatus()) == ConnectionStatus.Online : ConnectionStatus.Offline;
            //this.status.next(status);
        });
    }
    ngOnDestroy() {
        this.connectSubscription.unsubscribe();
        this.disconnectSubscription.unsubscribe();
    }
    initializeNetworkEvents() {
        /*this.disconnectSubscription = this.network.onDisconnect().subscribe(() => {
          if (this.status.getValue() === ConnectionStatus.Online) {
            // console.log('WE ARE OFFLINE');
            this.updateNetworkStatus(ConnectionStatus.Offline);
          }
        });
        this.connectSubscription = this.network.onConnect().subscribe(() => {
          if (this.status.getValue() === ConnectionStatus.Offline) {
            // console.log('WE ARE ONLINE');
            this.updateNetworkStatus(ConnectionStatus.Online);
          }
        });*/
    }
    updateNetworkStatus(status) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            //this.status.next(status);
            const connection = status === ConnectionStatus.Offline ? 'Offline' : 'Online';
            // console.log('connection status = ', connection);
        });
    }
    /*public onNetworkChange(): Observable<ConnectionStatus> {
      return this.status.asObservable();
    }*/
    getCurrentNetworkStatus() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {
            console.log('GETTING CURRENT NETWORK STATUS');
            //return this.status.getValue();
            var status = yield _capacitor_network__WEBPACK_IMPORTED_MODULE_0__.Network.getStatus();
            if (status.connected === true) {
                console.log('ONELINE');
                return ConnectionStatus.Online;
            }
            else {
                console.log('OFFLINE', status);
                return;
            }
        });
    }
};
NetworkService.ctorParameters = () => [
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_2__.Platform }
];
NetworkService = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_3__.Injectable)({
        providedIn: 'root'
    })
], NetworkService);



/***/ }),

/***/ 91681:
/*!********************************************!*\
  !*** ./src/app/services/report.service.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReportService": () => (/* binding */ ReportService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ionic/angular */ 78099);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../interfaces/i-api-provider */ 67116);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _user_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./user.service */ 77524);







let ReportService = class ReportService {
    constructor(api, alert, translate, logger) {
        this.api = api;
        this.alert = alert;
        this.translate = translate;
        this.logger = logger;
    }
    getAllData() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const filePath = yield this.api.downloadAllData(_user_service__WEBPACK_IMPORTED_MODULE_2__.UserService.currentUserId);
                if (filePath.length > 0) {
                    const alert = yield this.alert.create({ message: this.translate.instant('alert.data-downloaded-success') + filePath });
                    alert.present();
                }
                else {
                    yield this.showError();
                }
            }
            catch (error) {
                this.logger.logError(error);
                yield this.showError();
            }
        });
    }
    showError() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {
            const alert = yield this.alert.create({ message: this.translate.instant('alert.data-downloaded-error') });
            alert.present();
        });
    }
};
ReportService.ctorParameters = () => [
    { type: _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_0__.IApiProvider },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_4__.AlertController },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__.TranslateService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_1__.ILogger }
];
ReportService = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable)({
        providedIn: 'root'
    })
], ReportService);



/***/ }),

/***/ 17570:
/*!*****************************************************!*\
  !*** ./src/app/services/selectable-task.service.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectableTaskService": () => (/* binding */ SelectableTaskService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/Core/selectable-task */ 73990);
/* harmony import */ var _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/Core/task-frequency.enum */ 90616);
/* harmony import */ var _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/Core/result-type.enum */ 82869);
/* harmony import */ var _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/Core/custom-stat.enum */ 91878);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
var SelectableTaskService_1;







let SelectableTaskService = SelectableTaskService_1 = class SelectableTaskService {
    constructor(translate) {
        this.translate = translate;
    }
    getAllSelectableTasks() {
        const tasks = [];
        let positionIterator = 1;
        const task1 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.sleep-title'), this.translate.instant('selectable-tasks.sleep-description'), _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.TimeOfDay, SelectableTaskService_1.MorningRoutinesGroupName);
        let additionnalTask = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.AdditionnalTask();
        additionnalTask.Task1Name = this.translate.instant('selectable-tasks.time-wake-up');
        additionnalTask.Task2Name = this.translate.instant('selectable-tasks.time-sleep');
        additionnalTask.StatName = this.translate.instant('selectable-tasks.sleeping-duration');
        task1.AbsolutePosition = positionIterator++;
        additionnalTask.GroupName = SelectableTaskService_1.EveningRoutinesGroupName;
        additionnalTask.AbsolutePositionTask2 = 398;
        additionnalTask.StatType1 = _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_3__.StatType.TimeUp;
        additionnalTask.StatType2 = _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_3__.StatType.TimeSleep;
        task1.AdditionnalTask = additionnalTask;
        tasks.push(task1);
        /*
        const task12 = new SelectableTask(this.translate.instant('selectable-tasks.time-restricted-title'),
                                          this.translate.instant('selectable-tasks.time-restricted-description'),
                                          TaskFrequency.Daily,
                                          ResultType.TimeOfDay);
        additionnalTask = new AdditionnalTask();
        additionnalTask.Task1Name = this.translate.instant('selectable-tasks.first-non-water');
        additionnalTask.Task2Name = this.translate.instant('selectable-tasks.last-non-water');
        additionnalTask.StatName = this.translate.instant('selectable-tasks.time-restricted-duraton');
        additionnalTask.StatType1 = StatType.TimeNonWaterStart;
        additionnalTask.StatType2 = StatType.TimeNonWaterStop;
        task12.AbsolutePosition = 2;
        additionnalTask.AbsolutePositionTask2 = 397;
        task12.AdditionnalTask = additionnalTask;
        tasks.push(task12);*/
        const task11 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.fasting-title'), this.translate.instant('selectable-tasks.fasting-description'), _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.TimeOfDay, SelectableTaskService_1.MorningRoutinesGroupName);
        additionnalTask = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.AdditionnalTask();
        additionnalTask.Task1Name = this.translate.instant('selectable-tasks.first-eating');
        additionnalTask.Task2Name = this.translate.instant('selectable-tasks.last-eating');
        additionnalTask.StatName = this.translate.instant('selectable-tasks.fast-duration');
        additionnalTask.StatType1 = _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_3__.StatType.TimeEatStart;
        additionnalTask.StatType2 = _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_3__.StatType.TimeEatStop;
        additionnalTask.GroupName = SelectableTaskService_1.EveningRoutinesGroupName;
        task11.AbsolutePosition = positionIterator++;
        additionnalTask.AbsolutePositionTask2 = 300;
        task11.AdditionnalTask = additionnalTask;
        tasks.push(task11);
        const task17 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.bed-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary, SelectableTaskService_1.MorningRoutinesGroupName);
        task17.AbsolutePosition = positionIterator++;
        tasks.push(task17);
        const task2 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.weight-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Decimal, SelectableTaskService_1.MorningRoutinesGroupName);
        task2.AbsolutePosition = positionIterator++;
        tasks.push(task2);
        const task5 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.reading-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Duration, SelectableTaskService_1.RegularRoutinesGroupName);
        task5.AbsolutePosition = positionIterator++;
        tasks.push(task5);
        const task20 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.audio-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Duration, SelectableTaskService_1.RegularRoutinesGroupName);
        task20.AbsolutePosition = positionIterator++;
        tasks.push(task20);
        const task4 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.meditation-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary, SelectableTaskService_1.RegularRoutinesGroupName);
        task4.AbsolutePosition = positionIterator++;
        tasks.push(task4);
        const task3 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.exercise-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Duration, SelectableTaskService_1.RegularRoutinesGroupName);
        task3.AbsolutePosition = positionIterator++;
        tasks.push(task3);
        const task19 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.stretch-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary, SelectableTaskService_1.RegularRoutinesGroupName);
        task19.AbsolutePosition = positionIterator++;
        tasks.push(task19);
        const task6 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.mail-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary, SelectableTaskService_1.RegularRoutinesGroupName);
        task6.AbsolutePosition = positionIterator++;
        tasks.push(task6);
        const task7 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.emails-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary, SelectableTaskService_1.RegularRoutinesGroupName);
        task7.AbsolutePosition = positionIterator++;
        tasks.push(task7);
        const task9 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.clean-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary, SelectableTaskService_1.RegularRoutinesGroupName);
        task9.AbsolutePosition = positionIterator++;
        tasks.push(task9);
        const task10 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.dishes-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary, SelectableTaskService_1.RegularRoutinesGroupName);
        task10.AbsolutePosition = positionIterator++;
        tasks.push(task10);
        const task16 = new _models_Core_selectable_task__WEBPACK_IMPORTED_MODULE_0__.SelectableTask(this.translate.instant('selectable-tasks.walk-title'), null, _models_Core_task_frequency_enum__WEBPACK_IMPORTED_MODULE_1__.TaskFrequency.Daily, _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_2__.ResultType.Binary, SelectableTaskService_1.RegularRoutinesGroupName);
        task16.AbsolutePosition = positionIterator++;
        tasks.push(task16);
        /*const task18 = new SelectableTask(this.translate.instant('selectable-tasks.floss-title'),
                                          null,
                                          TaskFrequency.Daily,
                                          ResultType.Binary);
        task18.AbsolutePosition = positionIterator++;
        tasks.push(task18);*/
        /*
            const task15 = new SelectableTask(this.translate.instant('selectable-tasks.rating-title'),
                                              this.translate.instant('selectable-tasks.rating-description'),
                                              TaskFrequency.Daily,
                                              ResultType.Decimal);
            task15.AbsolutePosition = 12;
            tasks.push(task15);*/
        return tasks;
    }
};
SelectableTaskService.MorningRoutinesGroupName = 'MorningRoutines';
SelectableTaskService.EveningRoutinesGroupName = 'EveningRoutines';
SelectableTaskService.RegularRoutinesGroupName = 'RegularRoutines';
SelectableTaskService.ctorParameters = () => [
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_4__.TranslateService }
];
SelectableTaskService = SelectableTaskService_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable)({
        providedIn: 'root'
    })
], SelectableTaskService);



/***/ }),

/***/ 41951:
/*!********************************************!*\
  !*** ./src/app/services/sqlite.service.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SqliteService": () => (/* binding */ SqliteService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _ionic_native_sqlite_ngx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ionic-native/sqlite/ngx */ 64297);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _ionic_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ionic/storage */ 17897);
/* harmony import */ var _models_DTO_dto_user_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/DTO/dto-user-config */ 62087);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @ionic/angular */ 78099);
var SqliteService_1;








let SqliteService = SqliteService_1 = class SqliteService {
    constructor(sqlite, storage, logger, translate, platform) {
        this.sqlite = sqlite;
        this.storage = storage;
        this.logger = logger;
        this.translate = translate;
        this.platform = platform;
        this.Initialized = false;
    }
    waitForDbAvailable(reason) {
        // throw new Error('Method not implemented.');
        return;
    }
    initialize(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('initialize SQLite');
            this.isMobile = this.platform.is('cordova');
            if (this.isMobile) {
                // console.log('ISmOBILE');
                yield this.platform.ready();
                // console.log('platform ready');
                try {
                    const db = yield this.sqlite.create({
                        name: 'hypertask_' + userId + '.db',
                        location: 'default'
                    });
                    SqliteService_1.database = db;
                    // console.log('this.database:', SqliteService.database);
                    /*await SqliteService.database.executeSql(`DROP TABLE IF EXISTS task_group;`, []);
                    await SqliteService.database.executeSql(`DROP TABLE IF EXISTS task_history;`, []);
                    await SqliteService.database.executeSql(`DROP TABLE IF EXISTS user;`, []);
                    await SqliteService.database.executeSql(`DROP TABLE IF EXISTS task_todo;`, []);
                    await SqliteService.database.executeSql(`DROP TABLE IF EXISTS task_timer;`, []);*/
                    SqliteService_1.currentlyUsed = true;
                    const result01 = yield SqliteService_1.database.executeSql(`CREATE TABLE IF NOT EXISTS task_group (
                              "GROUP_ID" TEXT NOT NULL,
                              "TASK_GROUP_DATA"	TEXT NOT NULL,
                              PRIMARY KEY("GROUP_ID")
                            );`, []).catch(err => {
                        console.log('error11 sql:', JSON.stringify(err));
                    });
                    /*const result02 = await SqliteService.database.executeSql(`CREATE TABLE IF NOT EXISTS task_history (
                                          "TASK_HISTORY_ID"	TEXT NOT NULL,
                                          "CALENDAR_TASK_ID" TEXT NOT NULL,
                                          "TASK_HISTORY_DATA"	TEXT NOT NULL,
                                          PRIMARY KEY("TASK_HISTORY_ID")
                                        );`, []).catch(err => {
                                          console.log('error12 sql:', JSON.stringify(err));
                                        });*/
                    const result03 = yield SqliteService_1.database.executeSql(`CREATE TABLE IF NOT EXISTS task_todo (
                              "CALENDAR_TASK_ID" TEXT NOT NULL,
                              "CALENDAR_TASK_DATA" TEXT NOT NULL,
                              PRIMARY KEY("CALENDAR_TASK_ID")
                            );`, []).catch(err => {
                        console.log('error13 sql:', JSON.stringify(err));
                    });
                    const result04 = yield SqliteService_1.database.executeSql(`CREATE TABLE IF NOT EXISTS task_timer (
                              TIMER_ID	TEXT,
                              TIMER_DATA	TEXT,
                              PRIMARY KEY("TIMER_ID")
                            );`, []).catch(err => {
                        console.log('error14 sql:', JSON.stringify(err));
                    });
                    const result05 = yield SqliteService_1.database.executeSql(`CREATE TABLE IF NOT EXISTS user (
                              "USER_ID"	INTEGER NOT NULL,
                              "USER_DATA"	TEXT NOT NULL,
                              PRIMARY KEY("USER_ID")
                            );`, []).catch(err => {
                        console.log('error15 sql:', JSON.stringify(err));
                    });
                    /*console.log('result01', JSON.stringify(result01));
                    console.log('result02', JSON.stringify(result02));
                    console.log('result03', JSON.stringify(result03));
                    console.log('result04', JSON.stringify(result04));
                    console.log('result05', JSON.stringify(result05));*/
                    // tslint:disable-next-line:max-line-length
                    /*const result = await SqliteService.database.executeSql(`CREATE TABLE IF NOT EXISTS task_timer (TIMER_ID	TEXT PRIMARY KEY,TIMER_DATA TEXT);`, []).catch(err => {
                      console.log('error sql:', err);
                    });*/
                    //console.log('Executed SQL, testing select');
                    /*const result2 = await SqliteService.database.executeSql(`SELECT * FROM task_group`, []).catch(err => {
                      console.log('error1 sql:', JSON.stringify(err));
                    });
                    const result4 = await SqliteService.database.executeSql(`SELECT * FROM task_todo`, []).catch(err => {
                      console.log('error3 sql:', JSON.stringify(err));
                    });
                    const result5 = await SqliteService.database.executeSql(`SELECT * FROM task_timer`, []).catch(err => {
                      console.log('error4 sql:', JSON.stringify(err));
                    });
                    const result6 = await SqliteService.database.executeSql(`SELECT * FROM user`, []).catch(err => {
                      console.log('error5 sql:', JSON.stringify(err));
                    });
                    console.log('result2', JSON.stringify(result2));
                    // console.log('result3', JSON.stringify(result3));
                    console.log('result4', JSON.stringify(result4));
                    console.log('result5', JSON.stringify(result5));
                    console.log('result6', JSON.stringify(result6));
            
                    const result22 = await SqliteService.database.executeSql(`PRAGMA table_info(task_group);`, []).catch(err => {
                      console.log('error21 sql:', JSON.stringify(err));
                    });
                    const result24 = await SqliteService.database.executeSql(`PRAGMA table_info(task_todo);`, []).catch(err => {
                      console.log('error23 sql:', JSON.stringify(err));
                    });
                    const result25 = await SqliteService.database.executeSql(`PRAGMA table_info(task_timer);`, []).catch(err => {
                      console.log('error24 sql:', JSON.stringify(err));
                    });
                    const result26 = await SqliteService.database.executeSql(`PRAGMA table_info(user);`, []).catch(err => {
                      console.log('error25 sql:', JSON.stringify(err));
                    });
                    console.log('result22', JSON.stringify(result22.rows.item(0)));
                    console.log('result22', JSON.stringify(result22.rows.item(1)));
                    console.log('result24', JSON.stringify(result24.rows.item(0)));
                    console.log('result24', JSON.stringify(result24.rows.item(1)));
                    console.log('result25', JSON.stringify(result25.rows.item(0)));
                    console.log('result25', JSON.stringify(result25.rows.item(1)));
                    console.log('result26', JSON.stringify(result26.rows.item(0)));
                    console.log('result26', JSON.stringify(result26.rows.item(1)));*/
                    this.Initialized = true;
                    SqliteService_1.currentlyUsed = false;
                    console.log('Executed SQL7, isInitialized = true');
                }
                catch (error) {
                    console.error('Error executing initialize7', error);
                    console.log(error);
                    this.logger.logError(new Error('Error initializing database'));
                }
            }
        });
    }
    terminate() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // await this.waitForDbAvailable('terminate');
            this.Initialized = false;
        });
    }
    setCalendarTasks(tasks, alreadyUsed) {
        // DONT NEED ANYMORE
        throw new Error('Method not implemented.');
    }
    getCalendarTasks(alreadyUsed) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('getCalendarTasks', new Date());
            const query = 'SELECT * FROM task_todo';
            const data = yield SqliteService_1.database.executeSql(query, []);
            // console.log('getCalendarTasks got data', new Date());
            const tasks = [];
            if (data.rows.length > 0) {
                for (let i = 0; i < data.rows.length; i++) {
                    // console.log('item:', data.rows.item(i));
                    tasks.push(JSON.parse(data.rows.item(i).CALENDAR_TASK_DATA));
                }
            }
            // console.log('ALLTASKS HISTORIES:' + JSON.stringify(tasks[0].Histories));
            // console.log('getCalendarTasks got data 2', new Date());
            // console.log('tasks: ', JSON.stringify(tasks));
            /*const query2 = 'SELECT * FROM task_history'; // TODO : UserID ?
            const data2 = await SqliteService.database.executeSql(query2, []);
        
            console.log('getCalendarTasks got data 3', new Date());
        
            const Histories: DTOTaskHistory[] = [];
            if (data2.rows.length > 0) {
              for (let i = 0; i < data2.rows.length; i++) {
                // console.log('item:', data2.rows.item(i));
                Histories.push(JSON.parse(data2.rows.item(i).TASK_HISTORY_DATA));
              }
            }*/
            /*const tasksDict = tasks.reduce((a, x) => ({...a, [x.CalendarTaskId]: x}), {});
        
            for (const history of Histories) {
              // console.log('history', history);
              tasksDict[history.CalendarTaskId].Histories.push(history);
            }*/
            // console.log('getCalendarTasks got data 6', new Date());
            // console.log('histories: ', JSON.stringify(Histories));
            // console.log('tasks2: ', JSON.stringify(tasks));
            return tasks;
        });
    }
    insertCalendarTask(task) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('insertCalendarTask');
            // task.Histories = [];
            const data = [task.CalendarTaskId, JSON.stringify(task)];
            // console.log('insertCalendarTask2 data', data);
            yield SqliteService_1.database.executeSql('INSERT INTO task_todo (CALENDAR_TASK_ID,CALENDAR_TASK_DATA) VALUES (?, ?)', data);
        });
    }
    insertCalendarTasks(tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('insertCalendarTasks');
            for (const task of tasks) {
                // task.Histories = [];
                yield this.insertCalendarTask(task);
            }
        });
    }
    updateCalendarTask(task, synced) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // task.Histories = [];
            const data = [JSON.stringify(task), task.CalendarTaskId];
            // console.log('updateCalendarTask data', data);
            yield SqliteService_1.database.executeSql('UPDATE task_todo SET CALENDAR_TASK_DATA = ? WHERE CALENDAR_TASK_ID = ?', data);
        });
    }
    updateCalendarTasks(tasks, synced) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updateCalendarTask');
            for (const task of tasks) {
                // task.Histories = [];
                yield this.updateCalendarTask(task, synced);
            }
        });
    }
    updateSyncedCalendarTask(task, alreadyLocked) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            console.log('updateSyncedCalendarTask');
            // throw new Error('Method not implemented.');
            // ??
        });
    }
    insertTaskHistory(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            console.log('insertTaskHistory, might have to do sync stuff', history);
            /*const data = [history.TaskHistoryId, JSON.stringify(history), history.CalendarTaskId];
            // tslint:disable-next-line:max-line-length
            await SqliteService.database.executeSql('INSERT INTO task_history (TASK_HISTORY_ID,TASK_HISTORY_DATA,CALENDAR_TASK_ID) VALUES (?, ?, ?)', data);*/
            const task = yield this.getCalendarTask(history.CalendarTaskId);
            // console.log('task', task);
            task.Histories.push(history);
            yield this.updateCalendarTask(task, false);
        });
    }
    getCalendarTask(calendarTaskId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            const query = `SELECT * FROM task_todo where CALENDAR_TASK_ID = '${calendarTaskId}'`;
            const data = yield SqliteService_1.database.executeSql(query, []);
            // console.log('getCalendarTasks got data', new Date());
            if (data.rows.length > 0) {
                return JSON.parse(data.rows.item(0).CALENDAR_TASK_DATA);
            }
            else {
                return null;
            }
        });
    }
    insertTaskHistories(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            console.log('insertTaskHistories');
            for (const history of histories) {
                yield this.insertTaskHistory(history);
            }
        });
    }
    updateTaskHistory(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('updateTaskHistory', history);
            /*const data = [JSON.stringify(history), history.CalendarTaskId, history.TaskHistoryId];
            // tslint:disable-next-line:max-line-length
            await SqliteService.database.executeSql('UPDATE task_history SET TASK_HISTORY_DATA = ?, CALENDAR_TASK_ID = ? WHERE TASK_HISTORY_ID = ?', data);*/
            const task = yield this.getCalendarTask(history.CalendarTaskId);
            const historyIndex = task.Histories.findIndex(p => p.TaskHistoryId === history.TaskHistoryId); // TODO: USE MAP ?
            if (historyIndex === -1) {
                this.logger.logError(new Error('Unable to find task history while setting as synced3'), {
                    key: 'task.Histories',
                    value: JSON.stringify(task.Histories)
                });
                this.logger.logError(new Error('Unable to find task history while setting as synced4'), {
                    key: 'newHistoryId',
                    value: JSON.stringify(history.TaskHistoryId)
                });
            }
            else {
                task.Histories[historyIndex] = history;
                yield this.updateCalendarTask(task, false);
            }
        });
    }
    updateTaskHistories(histories) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updateTaskHistories');
            for (const history of histories) {
                yield this.updateTaskHistory(history);
            }
        });
    }
    updateSyncedTaskHistory(history, alreadyLocked) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logDebug('lock (updateSyncedTaskHistory)');
            try {
                // if (alreadySynced === false) {
                SqliteService_1.currentlyUsed = true;
                SqliteService_1.LastUsedDatabaseReason = 'updateSyncedTaskHistory' + (new Date()).toISOString();
                // }
                yield this.updateTaskHistory(history);
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateSyncedTaskHistory19 ' + error));
                alert('unable to read from local database 98');
                return;
            }
            // ??
        });
    }
    clear() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            yield SqliteService_1.database.executeSql(`DELETE FROM task_group`, []);
            yield SqliteService_1.database.executeSql(`DELETE FROM user`, []);
            yield SqliteService_1.database.executeSql(`DELETE FROM task_todo`, []);
            yield SqliteService_1.database.executeSql(`DELETE FROM task_timer`, []);
            console.log('deleted all');
            /*const result2 = await SqliteService.database.executeSql(`SELECT * FROM task_group`, []).catch(err => {
              console.log('error1 sql:', JSON.stringify(err));
            });
            const result4 = await SqliteService.database.executeSql(`SELECT * FROM task_todo`, []).catch(err => {
              console.log('error3 sql:', JSON.stringify(err));
            });
            const result5 = await SqliteService.database.executeSql(`SELECT * FROM task_timer`, []).catch(err => {
              console.log('error4 sql:', JSON.stringify(err));
            });
            const result6 = await SqliteService.database.executeSql(`SELECT * FROM user`, []).catch(err => {
              console.log('error5 sql:', JSON.stringify(err));
            });
            console.log('result2', JSON.stringify(result2));
            console.log('result4', JSON.stringify(result4));
            console.log('result5', JSON.stringify(result5));
            console.log('result6', JSON.stringify(result6));*/
        });
    }
    shouldViewChangeLog(currentVersion) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //await this.storage.ready;
            const lastReadVersion = yield this.storage.get(SqliteService_1.LAST_READ_CHANGELOG_VERSION_KEY);
            if (lastReadVersion != null) {
                if (lastReadVersion !== currentVersion) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                this.storage.set(SqliteService_1.LAST_READ_CHANGELOG_VERSION_KEY, currentVersion);
                return false;
            }
        });
    }
    setChangeLogToViewed(currentVersion) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            yield this.storage.set(SqliteService_1.LAST_READ_CHANGELOG_VERSION_KEY, currentVersion);
            return true;
        });
    }
    getUser(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('getUser');
            // console.log('getting user from local (awaiting)');
            // await this.lockLocalStorage(false, 'getUser');
            // console.log('getting user from local');
            SqliteService_1.LastUsedDatabaseReason = 'getUser ' + (new Date()).toISOString();
            try {
                const user = yield this.storage.get(SqliteService_1.USER_KEY + userId);
                //console.log('gotUser');
                // console.log('got user');
                if (user.Config.Configs == null || user.Config.Configs.length == null) {
                    // console.log('INITIALIZING NEW CONFIGS');
                    user.Config = new _models_DTO_dto_user_config__WEBPACK_IMPORTED_MODULE_3__.DTOUserConfig();
                } /*else {
                  console.log('USER CONFIG', user, user.Config.Configs.length);
                  console.log('USER', user);
                }*/
                return user;
            }
            catch (error) {
                // console.log('cant get local user (normal first usage)');
                // this.logger.logError(new Error('unable to read user from local database')); Removed log because this is normal when first install
                // Cant display this because it happens when we create a new account
                // alert('unable to read user from local database');
                return null;
            } /*finally {
              this.unlockLocalStorage(false);
            }*/
        });
    }
    setUser(user, alreadyLocked = false) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('setUser');
            // await this.lockLocalStorage(alreadyLocked, 'setUser');
            SqliteService_1.LastUsedDatabaseReason = 'setUser ' + (new Date()).toISOString();
            try {
                // console.log('SETTING USER LOCALLY : ', user);
                //await this.storage.ready();
                yield this.storage.set(SqliteService_1.USER_KEY + user.UserId, user);
                return;
            }
            catch (error) {
                // console.error('error');
                this.logger.logError(new Error('unable to set user in local database'));
                alert('unable to set user in local database');
                return null;
            } /*finally {
              this.unlockLocalStorage(false);
            }*/
        });
    }
    getTimers(alreadyReadOnly) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('getTimers');
            // await this.waitForDbAvailable('getTimers');
            const query = 'SELECT * FROM task_timer';
            //console.log('this.database2:', SqliteService.database);
            const data = yield SqliteService_1.database.executeSql(query, []);
            const timers = [];
            if (data.rows.length > 0) {
                for (let i = 0; i < data.rows.length; i++) {
                    // console.log('item timer:', data.rows.item(i));
                    timers.push(JSON.parse(data.rows.item(i).TIMER_DATA));
                }
            }
            //console.log('timers: ', timers);
            return timers;
        });
    }
    setTimers(timers, alreadyReadOnly) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('SET TIMERS');
            for (const timer of timers) {
                yield this.insertTimer(timer);
            }
        });
    }
    insertTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('insertTimer');
            const data = [timer.TimerId, JSON.stringify(timer)];
            yield SqliteService_1.database.executeSql('INSERT INTO task_timer (TIMER_ID,TIMER_DATA) VALUES (?, ?)', data);
        });
    }
    updateTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('updateTimer');
            const data = [JSON.stringify(timer), timer.TimerId];
            yield SqliteService_1.database.executeSql('UPDATE task_timer set TIMER_DATA = ? WHERE TIMER_ID = ?', data);
        });
    }
    getGroups(alreadyLocked) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('getGroups');
            const query = 'SELECT * FROM task_group';
            const data = yield SqliteService_1.database.executeSql(query, []);
            const groups = [];
            if (data.rows.length > 0) {
                for (let i = 0; i < data.rows.length; i++) {
                    groups.push(JSON.parse(data.rows.item(i).TASK_GROUP_DATA));
                }
            }
            //console.log('groups: ', groups);
            return groups;
        });
    }
    setGroups(groups, alreadyReadOnly) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('Settings groups');
            yield this.insertGroups(groups);
            return true;
        });
    }
    setGroupsAndTasks(groups, tasks) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('setGroupsAndTasks', groups, tasks);
            // throw new Error('Method not implemented.');
            // remove this
            yield this.insertGroups(groups);
            yield this.insertCalendarTasks(tasks);
            return true;
        });
    }
    insertGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('insertGroup');
            const data = [group.GroupId, JSON.stringify(group)];
            yield SqliteService_1.database.executeSql('INSERT INTO task_group (GROUP_ID,TASK_GROUP_DATA) VALUES (?, ?)', data);
        });
    }
    insertGroups(groups) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('insertGroups');
            for (const group of groups) {
                yield this.insertGroup(group);
            }
        });
    }
    updateGroup(group, alreadyLocked) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('updateGroup');
            const data = [JSON.stringify(group), group.GroupId];
            yield SqliteService_1.database.executeSql('UPDATE task_group set TASK_GROUP_DATA = ? WHERE GROUP_ID = ?', data);
        });
    }
    updateGroups(groups, alreadyLocked) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            for (const group of groups) {
                yield this.updateGroup(group, alreadyLocked);
            }
        });
    }
    updateSyncedGroup(group) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__awaiter)(this, void 0, void 0, function* () {
            try {
                yield this.updateGroup(group, false);
                // this.logger.logDebug('## updateSyncedTaskHistory SET CALENDAR TASKS');
                return;
            }
            catch (error) {
                this.logger.logError(new Error('unable to read from local database updateSyncedTaskHistory1 ' + error));
                alert('unable to read from local database 9');
                return;
            }
        });
    }
};
SqliteService.currentlyUsed = false;
// TODO: Use non-static variable. For now it's assignation gets lost because of scoping issues
SqliteService.LAST_READ_CHANGELOG_VERSION_KEY = 'lastReadChangelogVersion';
SqliteService.USER_KEY = 'user';
SqliteService.ctorParameters = () => [
    { type: _ionic_native_sqlite_ngx__WEBPACK_IMPORTED_MODULE_0__.SQLite },
    { type: _ionic_storage__WEBPACK_IMPORTED_MODULE_2__.Storage },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_1__.ILogger },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_5__.TranslateService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_6__.Platform }
];
SqliteService = SqliteService_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_7__.Injectable)({
        providedIn: 'root'
    })
], SqliteService);



/***/ }),

/***/ 22586:
/*!**************************************************!*\
  !*** ./src/app/services/task-history.service.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskHistoryService": () => (/* binding */ TaskHistoryService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _calendar_task_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calendar-task.service */ 43772);
/* harmony import */ var _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../interfaces/i-data-sync-local-service */ 17610);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _models_Exceptions_TaskHistoryAlreadyExistsError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/Exceptions/TaskHistoryAlreadyExistsError */ 67718);
/* harmony import */ var _event_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./event.service */ 29170);







let TaskHistoryService = class TaskHistoryService {
    constructor(localDataSync, taskService, logger, eventService) {
        this.localDataSync = localDataSync;
        this.taskService = taskService;
        this.logger = logger;
        this.eventService = eventService;
    }
    insertTaskHistory(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            history.UpdateDate = new Date();
            history.InsertDate = new Date();
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_4__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_4__.EventService.EventIds.SyncRequired, null));
            // console.log('insertTaskHistory', history);
            const task = this.taskService.getTask(history.CalendarTaskId);
            // console.log('inserting local with sent false', task);
            if (task.Histories.some(p => p.TaskHistoryId === history.TaskHistoryId)) {
                this.logger.logError(new Error('Task History already exists'));
                throw new _models_Exceptions_TaskHistoryAlreadyExistsError__WEBPACK_IMPORTED_MODULE_3__.TaskHistoryAlreadyExistsError('historyId = ' + history.TaskHistoryId);
            }
            task.Histories.push(history);
            history.Sent = false;
            this.taskService.SetHistoriesMap(task); // todo this should not be here ?
            // console.log('inserted local with sent false', task, task);
            this.localDataSync.queueInsertTaskHistory(history.toDTO());
            // this.logger.logDebug('queueInsertTaskHistory', JSON.stringify(history.toDTO()));
            return true;
        });
    }
    updateTaskHistory(history) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__awaiter)(this, void 0, void 0, function* () {
            history.UpdateDate = new Date();
            // console.log('updateTaskHistory', history);
            // this.logger.logDebug('UpdateTaskHistory', JSON.stringify(history));
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_4__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_4__.EventService.EventIds.SyncRequired, null));
            history.Synced = false;
            const task = this.taskService.getTask(history.CalendarTaskId);
            const index = task.Histories.findIndex(p => p.TaskHistoryId === history.TaskHistoryId); // TODO : Use MAP
            task.Histories[index] = history;
            this.taskService.SetHistoriesMap(task); // todo this should not be here ?
            this.localDataSync.queueUpdateTaskHistory(history.toDTO());
            return true;
        });
    }
};
TaskHistoryService.ctorParameters = () => [
    { type: _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_1__.IDataSyncLocalService },
    { type: _calendar_task_service__WEBPACK_IMPORTED_MODULE_0__.CalendarTaskService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_2__.ILogger },
    { type: _event_service__WEBPACK_IMPORTED_MODULE_4__.EventService }
];
TaskHistoryService = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_6__.Injectable)({
        providedIn: 'root'
    })
], TaskHistoryService);



/***/ }),

/***/ 18546:
/*!************************************************!*\
  !*** ./src/app/services/task-stats.service.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TaskStatsService": () => (/* binding */ TaskStatsService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _models_Core_task_stat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/Core/task-stat */ 92338);
/* harmony import */ var _calendar_task_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./calendar-task.service */ 43772);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/date-utils */ 85218);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/common */ 28267);
/* harmony import */ var _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/Core/result-type.enum */ 82869);
/* harmony import */ var _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/Core/custom-stat.enum */ 91878);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _date_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./date.service */ 23516);










let TaskStatsService = class TaskStatsService {
    constructor(calendarTaskService, datepipe, translate, dateService) {
        this.calendarTaskService = calendarTaskService;
        this.datepipe = datepipe;
        this.translate = translate;
        this.dateService = dateService;
        this.minusDaysArray = [6, 5, 4, 3, 2, 1, 0];
    }
    getTaskStats(calendarTaskId, currentWorkDate, minusWeeks) {
        // console.log('getTaskStats start', new Date().toISOString());
        const taskStats = new _models_Core_task_stat__WEBPACK_IMPORTED_MODULE_0__.TaskStats();
        const task = this.calendarTaskService.getTask(calendarTaskId);
        taskStats.resultType = task.ResultType;
        taskStats.StartingMinusDays = minusWeeks > 0 ?
            task.MinimumStartingMinusDay :
            0;
        taskStats.MinusWeeksArray = minusWeeks > 0 ?
            this.getMinusWeeksArray(minusWeeks, taskStats.StartingMinusDays) :
            [];
        taskStats.Name = task.Name;
        // console.log('-=-=-=- GetTaskStats');
        taskStats.TaskInsertWorkDate = this.dateService.GetWorkDate(task.InsertDate);
        for (const minusWeek of taskStats.MinusWeeksArray) {
            for (const minusDay of this.minusDaysArray) {
                const minusDays = minusWeek * 7 + minusDay;
                // console.log('loop minusDays', minusDays, new Date().toISOString());
                const targetDate = _shared_date_utils__WEBPACK_IMPORTED_MODULE_2__["default"].AddDays(currentWorkDate, -minusDays);
                const history = this.calendarTaskService.getTaskHistoryNoVoid(task, targetDate);
                taskStats.results.push(this.getPreviousDayResult(task, history));
                taskStats.doneDays.push(this.previousDayDone(history));
                taskStats.skippedDays.push(this.previousDaySkipped(history));
            }
        }
        // console.log('getTaskStats done', new Date().toISOString());
        return taskStats;
    }
    getCustomStats(currentWorkDate, minusWeeks, taskType1, taskType2, statName) {
        const taskStats = new _models_Core_task_stat__WEBPACK_IMPORTED_MODULE_0__.TaskStats();
        const task1 = this.calendarTaskService.getTaskFromStatType(taskType1);
        const task2 = this.calendarTaskService.getTaskFromStatType(taskType2);
        if (task1 == null || task2 == null) {
            return;
        }
        taskStats.Name = statName;
        taskStats.TaskInsertWorkDate = this.dateService.GetWorkDate(task1.InsertDate);
        taskStats.resultType = _models_Core_result_type_enum__WEBPACK_IMPORTED_MODULE_3__.ResultType.TimeOfDay;
        taskStats.StartingMinusDays = minusWeeks > 0 ?
            task1.MinimumStartingMinusDay :
            0;
        taskStats.MinusWeeksArray = minusWeeks > 0 ?
            this.getMinusWeeksArray(minusWeeks, taskStats.StartingMinusDays) :
            [];
        for (const minusWeek of taskStats.MinusWeeksArray) {
            for (const minusDay of this.minusDaysArray) {
                const minusDaysUp = minusWeek * 7 + minusDay;
                const minusDaysSleep = minusWeek * 7 + minusDay + 1;
                const targetDateUp = _shared_date_utils__WEBPACK_IMPORTED_MODULE_2__["default"].AddDays(currentWorkDate, -minusDaysUp);
                const targetDateSleep = _shared_date_utils__WEBPACK_IMPORTED_MODULE_2__["default"].AddDays(currentWorkDate, -minusDaysSleep);
                const history1 = this.calendarTaskService.getTaskHistoryNoVoid(task1, targetDateUp);
                const history2 = this.calendarTaskService.getTaskHistoryNoVoid(task2, targetDateSleep);
                const date1 = this.getPreviousDayResultDate(history1);
                const date2 = this.getPreviousDayResultDate(history2);
                // TODO : Filter Invalid Data
                // if (taskStats. date2.getHours() )
                // TODO : const EndOfDayCutOff
                if (date1 == null || date2 == null) {
                    taskStats.results.push('n/a');
                }
                else {
                    const diffTOtal = _shared_date_utils__WEBPACK_IMPORTED_MODULE_2__["default"].getHHmmFromTimeDifferences(date1, date2);
                    taskStats.results.push(diffTOtal);
                }
                const previousDaySkipped = taskStats.results[taskStats.results.length - 1].includes('n/a');
                taskStats.skippedDays.push(previousDaySkipped);
                taskStats.doneDays.push(!previousDaySkipped);
            }
        }
        return taskStats;
    }
    getSleepDurationStats(currentWorkDate, minusWeeks) {
        return this.getCustomStats(currentWorkDate, minusWeeks, _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_4__.StatType.TimeUp, _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_4__.StatType.TimeSleep, this.translate.instant('task-stats.hours-of-sleep'));
    }
    getTimeRestrictedDurationStats(currentWorkDate, minusWeeks) {
        return this.getCustomStats(currentWorkDate, minusWeeks, _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_4__.StatType.TimeNonWaterStart, _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_4__.StatType.TimeNonWaterStop, this.translate.instant('task-stats.time-restricted-duration'));
    }
    getFastingDurationStats(currentWorkDate, minusWeeks) {
        return this.getCustomStats(currentWorkDate, minusWeeks, _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_4__.StatType.TimeEatStart, _models_Core_custom_stat_enum__WEBPACK_IMPORTED_MODULE_4__.StatType.TimeEatStop, this.translate.instant('task-stats.fasting-duration'));
    }
    getPreviousDayResult(currentTask, history) {
        // console.log('Origin GetPreviousDayResult');
        if (history != null && history.TaskResult != null) {
            if (currentTask.isTime()) {
                return this.datepipe.transform(history.TaskResult, 'HH:mm');
            }
            else {
                return String(history.TaskResult);
            }
        }
        else {
            return ' n/a ';
        }
    }
    getPreviousDayResultDate(history) {
        if (history != null && history.TaskResult != null) {
            // console.log('GETPreviousDayResultDate', history);
            return new Date(history.TaskResult);
        }
        else {
            return null;
        }
    }
    getPreviousDayDuration(history) {
        return history.getDurationString();
    }
    previousDaySkipped(history) {
        if (history == null) {
            return true;
        }
        else if (history.TaskResult == null && history.TaskDone !== true) { // TODO: Result should be true for binary
            return true;
        }
        else if (history.TaskSkipped) {
            return true;
        }
        else {
            return false;
        }
    }
    previousDayDone(history) {
        return history.TaskDone === true;
    }
    getMinusWeeksArray(weeksBehind, startingMinDays) {
        const minusWeeksArray = [];
        let startingWeek = Math.ceil(startingMinDays / 7);
        if (startingWeek === 0) {
            startingWeek = 1;
        }
        if (weeksBehind > startingWeek) {
            weeksBehind = startingWeek;
        }
        for (let i = 0; i < weeksBehind; i++) {
            minusWeeksArray.push(weeksBehind - i - 1);
        }
        // console.log('minusWeeksArray', minusWeeksArray, startingMinDays, weeksBehind, startingWeek);
        return minusWeeksArray;
    }
};
TaskStatsService.ctorParameters = () => [
    { type: _calendar_task_service__WEBPACK_IMPORTED_MODULE_1__.CalendarTaskService },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_6__.DatePipe },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_7__.TranslateService },
    { type: _date_service__WEBPACK_IMPORTED_MODULE_5__.DateService }
];
TaskStatsService = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_9__.Injectable)({
        providedIn: 'root'
    })
], TaskStatsService);



/***/ }),

/***/ 47557:
/*!*******************************************!*\
  !*** ./src/app/services/timer.service.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TimerService": () => (/* binding */ TimerService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _models_Core_task_timer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/Core/task-timer */ 85153);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/date-utils */ 85218);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../interfaces/i-data-sync-local-service */ 17610);
/* harmony import */ var _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interfaces/i-local-storage-service */ 5295);
/* harmony import */ var _alert_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./alert.service */ 34571);
/* harmony import */ var _calendar_task_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./calendar-task.service */ 43772);
/* harmony import */ var _ionic_angular__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ionic/angular */ 78099);










let TimerService = class TimerService {
    constructor(logger, localSync, local, alertService, alertCtrl, calendarTaskService) {
        this.logger = logger;
        this.localSync = localSync;
        this.local = local;
        this.alertService = alertService;
        this.alertCtrl = alertCtrl;
        this.calendarTaskService = calendarTaskService;
        this.allTimers = [];
    }
    addTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // this.logger.logEvent('addTimer', { key: 'timer', value: JSON.stringify(timer)});
            this.logger.logDebug('addTimer');
            // this.logger.logDebug('addTimer', JSON.stringify(timer));
            const timers = this.allTimers.filter(p => p.CalendarTaskId === timer.CalendarTaskId &&
                p.isDone === false &&
                p.isVoid === false &&
                _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].datesAreEqual(p.TimerDate, timer.TimerDate));
            if (timers.length > 0) {
                alert('timers for same taskid already exists : ' + timers[0].CalendarTaskId);
                // alert('timers for same taskid already exists : ' + JSON.stringify(timers));
                // this.logger.logDebug('timers for same taskid already exists : ', JSON.stringify(timers));
                this.logger.logDebug('timers for same taskid already exists : ' + timers[0].CalendarTaskId);
            }
            this.allTimers.push(timer);
            yield this.localSync.queueInsertTimer(timer.toDTO());
        });
    }
    updateTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('UPDATING TIMER', timer);
            const dto = timer.toDTO();
            yield this.localSync.queueUpdateTimer(dto);
        });
    }
    voidTimer(timer) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            const dto = timer.toDTO();
            dto.isVoid = true;
            yield this.localSync.queueUpdateTimer(dto);
            const index = this.allTimers.findIndex(p => p.TimerId === timer.TimerId);
            this.allTimers.splice(index, 1);
        });
    }
    /* Returns null if we can't find timer */
    getTimer(date, calendarTaskId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            // console.log('GET TIMER calendarTaskId', calendarTaskId, this.allTimers, date);
            /*if (calendarTaskId === 'XpcSrbVi3b8AMEwUJ8Lq') {
              console.log('this.allTimers', this.allTimers);
              this.logger.logEvent('getTimer1', { key: 'date', value: JSON.stringify(date)});
              this.logger.logEvent('getTimer2', { key: 'TimerDate', value: JSON.stringify(this.allTimers.map(p => p.TimerDate))});
            }*/
            // console.log('[0]datesAreEqual');
            const timers = this.allTimers.filter(p => p.CalendarTaskId === calendarTaskId &&
                p.isDone === false &&
                p.isVoid === false &&
                _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].datesAreEqual(p.TimerDate, date));
            //console.log('TIMERS : ', timers);
            if (timers.length > 0) {
                if (timers.length > 1) {
                    alert('Multiple timers for same taskid');
                    //this.logger.logDebug('MULTIPLE TIMERS FOR SAME TASKID', timers[9].CalendarTaskId);
                    // this.logger.logDebug('MULTIPLE TIMERS FOR SAME TASKID', JSON.stringify(timers));
                    // Delete extra timers but we need to find the source of this
                    if (timers.length > 0) {
                        for (let i = 1; i < timers.length; i++) {
                            yield this.voidTimer(timers[i]);
                        }
                    }
                    return timers[0];
                } /*else {
                  console.log('ONE TIMER RETRIEVED', timers[0]);
                }*/
                return timers[0];
            }
            else {
                /*if (calendarTaskId === 'XpcSrbVi3b8AMEwUJ8Lq') {
                  this.logger.logEvent('logger is null', { key: 'this.allTimers', value: JSON.stringify(this.allTimers)});
                }*/
                return null;
            }
        });
    }
    loadTimersFromDatabase() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            const dtos = yield this.local.getTimers(false);
            this.allTimers = dtos.filter(p => p.isVoid !== true).map(p => _models_Core_task_timer__WEBPACK_IMPORTED_MODULE_0__.TaskTimer.fromDTO(p));
            //console.log('TIMERS FROM DATABASE', this.allTimers);
            for (const timer of this.allTimers) {
                // RUNNING TIMER
                if (timer.isPaused === false && timer.isDone === false) {
                    // console.log('ACTIVATING STARTED TIMER', timer);
                    timer.currentTimerSeconds = Number(_shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].getTimeSince(timer.StartDate)) / 1000 + timer.currentTimerSeconds;
                    timer.start();
                }
            }
        });
    }
    /* Returns null if we can't find timer */
    anyTimerOn() {
        const result = this.allTimers.some(p => p.isPaused === false &&
            p.isDone === false);
        if (result === true) {
            this.logger.logDebug('TIMERS ON :', JSON.stringify(this.allTimers.filter(p => p.isPaused === false &&
                p.isDone === false)));
        }
        return result;
    }
    /**
     * Checks if there are old timers still running and either dismiss them or ask user
     * if he wants to keep them
     */
    checkForOldTimer() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__awaiter)(this, void 0, void 0, function* () {
            for (const timer of this.allTimers) {
                // IF TIMER IS OVER 24 HOURS AGO AUTOMATICALLY DISMISS IT
                if (timer.isKeepLongTimer !== true &&
                    _shared_date_utils__WEBPACK_IMPORTED_MODULE_1__["default"].daysBetween(timer.StartDate, new Date()) > 1) {
                    // console.log('Automatically dismiss old timer : ', timer);
                    timer.cancel();
                    this.voidTimer(timer);
                    // this.eventService.emit(new EventData(EventService.EventIds.CardReset + this.currentTaskId, true));
                }
                // IF TIMER IS > 10 HOURS SHOW ALERT TO DISMISS IT
                if (timer.isKeepLongTimer !== true &&
                    timer.currentTimerSeconds >= 60 * 60 * 10) {
                    const handlerCancel = (alertData) => {
                        timer.isKeepLongTimer = true;
                        this.updateTimer(timer);
                    };
                    const handlerOk = (alertData) => {
                        timer.cancel();
                        this.voidTimer(timer);
                        // this.eventService.emit(new EventData(EventService.EventIds.CardReset + this.currentTaskId, true));
                    };
                    if (timer.CalendarTaskId == null) {
                        // console.log('TIMER IS NULL');
                        this.logger.logDebug('TIMER IS NULL');
                    }
                    // console.log('getting task from timer');
                    const task = this.calendarTaskService.getTask(timer.CalendarTaskId);
                    if (task == null) { // Delete timer if task no longer exists
                        timer.cancel();
                        this.voidTimer(timer);
                    }
                    else {
                        const alertOptions = this.alertService.getTimerExpiredAlertOptions(handlerCancel, handlerOk, timer.currentTimerSeconds, task.Name);
                        const alert = yield this.alertCtrl.create(alertOptions);
                        yield alert.present();
                        yield alert.onWillDismiss();
                        // console.log('DISMISSED');
                    }
                }
            }
        });
    }
};
TimerService.ctorParameters = () => [
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_2__.ILogger },
    { type: _interfaces_i_data_sync_local_service__WEBPACK_IMPORTED_MODULE_3__.IDataSyncLocalService },
    { type: _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_4__.ILocalStorageService },
    { type: _alert_service__WEBPACK_IMPORTED_MODULE_5__.AlertService },
    { type: _ionic_angular__WEBPACK_IMPORTED_MODULE_8__.AlertController },
    { type: _calendar_task_service__WEBPACK_IMPORTED_MODULE_6__.CalendarTaskService }
];
TimerService = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_9__.Injectable)({
        providedIn: 'root'
    })
], TimerService);



/***/ }),

/***/ 77524:
/*!******************************************!*\
  !*** ./src/app/services/user.service.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UserService": () => (/* binding */ UserService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _models_Core_user__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/Core/user */ 42535);
/* harmony import */ var _models_Exceptions_UserNotFoundError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/Exceptions/UserNotFoundError */ 8488);
/* harmony import */ var _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../interfaces/i-api-provider */ 67116);
/* harmony import */ var _ngx_translate_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @ngx-translate/core */ 90466);
/* harmony import */ var _models_Core_language_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/Core/language.enum */ 76975);
/* harmony import */ var _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../interfaces/i-logger */ 27388);
/* harmony import */ var _models_Exceptions_UnknownLanguageError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/Exceptions/UnknownLanguageError */ 9702);
/* harmony import */ var _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../interfaces/i-local-storage-service */ 5295);
/* harmony import */ var _interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../interfaces/i-authentication-service */ 39296);
/* harmony import */ var _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/Core/user-config */ 74734);
/* harmony import */ var _models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/DTO/dto-user */ 69449);
/* harmony import */ var _shared_thread_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../shared/thread.utils */ 39023);
/* harmony import */ var _event_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./event.service */ 29170);
/* harmony import */ var _shared_date_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../shared/date-utils */ 85218);
var UserService_1;
















let UserService = UserService_1 = class UserService {
    constructor(local, api, translate, logger, auth, eventService) {
        this.local = local;
        this.api = api;
        this.translate = translate;
        this.logger = logger;
        this.auth = auth;
        this.eventService = eventService;
    }
    getUser(userId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            try {
                //console.log('getUser', userId);
                if (userId == null) {
                    return null;
                }
                if (this.local.Initialized === false) {
                    //console.log('%%%% INITIALIZING LOCAL IN GETUSER %%%%');
                    yield this.local.initialize(userId);
                }
                // try to get user from server to get latest
                //console.log('GETTING USER ID : ', userId);
                if (UserService_1.currentUser != null && UserService_1.currentUser.UserId === userId) {
                    //console.log('got user from ram ', UserService.currentUser);
                    return UserService_1.currentUser;
                }
                else {
                    let dtoUser = yield this.local.getUser(userId);
                    let user = _models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__.DTOUser.ToUser(dtoUser);
                    if (user != null && user.UserId != null) {
                        //console.log('GOT USER FROM LOCAL ', user);
                        UserService_1.currentUser = user;
                        //console.log('GOT USER FROM LOCAL2 ', UserService.currentUser);
                        return user;
                    }
                    else {
                        dtoUser = yield this.api.getUser(userId);
                        user = _models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__.DTOUser.ToUser(dtoUser);
                        //console.log('GetUserFromAPI', user);
                        if (user != null && user.UserId != null) {
                            //console.log('GOT USER FROM API ', user);
                            UserService_1.currentUser = user;
                            yield this.local.setUser(_models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__.DTOUser.FromUser(user), false);
                            return user;
                        }
                        else {
                            //console.log('NO USER FROM API NOT LOCAL, RETURN NEW USER');
                            const newUser = new _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User();
                            newUser.UserId = userId;
                            newUser.IsNew = true;
                            UserService_1.currentUser = user;
                            return newUser;
                        }
                    }
                }
            }
            catch (error) {
                this.logger.logError(new Error('Unable to find user : ' + error.message));
                throw new _models_Exceptions_UserNotFoundError__WEBPACK_IMPORTED_MODULE_1__.UserNotFoundError('Unable to find user');
            }
        });
    }
    /**
     * Same as getUser but this is for when logging in
     */
    getUserForLogin() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            try {
                const userId = yield this.auth.getUserId();
                this.logger.logDebug('~ GetUserForLogin', new Date().toISOString());
                if (userId == null) {
                    return null;
                }
                if (this.local.Initialized === false) {
                    this.logger.logDebug('~ Initializing local', new Date().toISOString());
                    yield this.local.initialize(userId);
                    this.logger.logDebug('~ Local Initialized', new Date().toISOString());
                }
                // Get local user first to see if it's first install
                const localDTOUser = yield this.local.getUser(userId);
                if (localDTOUser != null) {
                    this.logger.logDebug('~ Got User, not a new install, returning user', new Date().toISOString(), JSON.stringify(localDTOUser));
                    return _models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__.DTOUser.ToUser(localDTOUser);
                }
                else {
                    this.logger.logDebug('~ We dont have local user, new install', new Date().toISOString());
                    // try to get user from server to get latest
                    this.logger.logDebug('getting user from api');
                    const apiDTOUser = yield this.api.getUser(userId);
                    if (apiDTOUser != null) {
                        this.logger.logDebug('got user from api, saving locally', JSON.stringify(apiDTOUser));
                        const localUser = _models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__.DTOUser.ToUser(apiDTOUser);
                        localUser.LastActivityDate = _shared_date_utils__WEBPACK_IMPORTED_MODULE_12__["default"].YearAgo(); // todo save it somewhere so we dont have to get user from api twice
                        yield this.local.setUser(_models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__.DTOUser.FromUser(localUser), false);
                        this.logger.logDebug('~ User Set', new Date().toISOString());
                        return localUser;
                    }
                    else {
                        this.logger.logDebug('did not get user from api, first install, creating a new one');
                        const newUser = new _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User();
                        newUser.UserId = userId;
                        newUser.IsNew = true;
                        return newUser;
                    }
                }
            }
            catch (error) {
                this.logger.logError(new Error('Unable to find user : ' + error.message));
                throw new _models_Exceptions_UserNotFoundError__WEBPACK_IMPORTED_MODULE_1__.UserNotFoundError('Unable to find user');
            }
        });
    }
    getCurrentUser() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            if (UserService_1.currentUser == null) {
                const startDate = new Date();
                //console.log('<> GETTING CURRENT USER');
                const id = UserService_1.currentUserId == null ? yield this.auth.getUserId() : UserService_1.currentUserId;
                UserService_1.currentUserId = id;
                //console.log('<> GOT USER ID', DateUtils.getTimeSince(startDate), UserService.currentUserId);
                const user = yield this.getUser(id);
                //console.log('<> GOT USER', DateUtils.getTimeSince(startDate));
                UserService_1.currentUser = user;
                //console.log('<> GOT USER', UserService.currentUser);
                return user;
            }
            else {
                //console.log('<> GETTING CURRENT USER FROM RAM');
                return UserService_1.currentUser;
            }
        });
    }
    awaitUserReady(waitForever) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            let iterations = 0;
            while (waitForever === true || iterations < 200) { // 50ms * 100 = 5000 ms = 5s
                //console.log('awaitUserReady');
                if (UserService_1.currentUser == null || UserService_1.currentUserId == null) {
                    //console.log('currentuser ' + UserService.currentUser);
                    yield _shared_thread_utils__WEBPACK_IMPORTED_MODULE_10__["default"].sleep(50);
                    iterations++;
                }
                else {
                    this.logger.logDebug('AWAIT COMPLETED, GOT USER : ', JSON.stringify(UserService_1.currentUser), UserService_1.currentUserId);
                    return true;
                }
            }
            // console.log('AWAIT ABORTED, NEVER GOT USER : ' + new Date().toISOString(), UserService.currentUser, UserService.currentUserId);
            return false;
        });
    }
    getCurrentUserId(reason) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            if (UserService_1.currentUserId != null) {
                return UserService_1.currentUserId;
            }
            else {
                // this.logger.logDebug('GET User GET USERID ', reason);
                const user = yield this.getCurrentUser();
                const result = user != null ?
                    user.UserId :
                    null;
                UserService_1.currentUserId = result;
                return result;
            }
        });
    }
    getConfig(key) {
        if (UserService_1.currentUser == null) {
            // console.log('GETCONFIG USER IS NULL', key, UserService.currentUser);
            if (key === _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.EndOfDayTimeKey) { // TODO: Fix bug instead of using this, when logging in it doesnt work
                return '04:00';
            }
            return null;
        }
        else {
            // console.log('GETCONFIG', key);
            const value = UserService_1.currentUser.Config.Configs.get(key);
            // console.log('GOT VALUE', value);
            return value;
        }
    }
    setConfig(key, value) {
        if (UserService_1.currentUser == null) {
            return null;
        }
        else {
            return UserService_1.currentUser.Config.Configs.set(key, value);
        }
    }
    saveUser(user) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            try {
                //console.log('HHHHHHHH SAVING USER');
                user.LastActivityDate = new Date();
                yield this.local.setUser(_models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__.DTOUser.FromUser(user), false);
                yield this.api.saveUser(_models_DTO_dto_user__WEBPACK_IMPORTED_MODULE_9__.DTOUser.FromUser(user));
                UserService_1.currentUser = user;
                UserService_1.currentUserId = user.UserId;
            }
            catch (error) {
                this.logger.logError(error, { key: 'user', value: JSON.stringify(user) });
            }
        });
    }
    setLanguage(value) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            if (Number(value) === _models_Core_language_enum__WEBPACK_IMPORTED_MODULE_3__.Language.French) {
                this.translate.use('fr');
                // this.logger.logDebug('GET User SET LANGUAGE');
                const currentUser = yield this.getCurrentUser();
                _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.PreferedLanguageKey, _models_Core_language_enum__WEBPACK_IMPORTED_MODULE_3__.Language.French);
                // console.log('Saving user for language', currentUser);
                this.saveUser(currentUser);
            }
            else if (Number(value) === _models_Core_language_enum__WEBPACK_IMPORTED_MODULE_3__.Language.English) {
                this.translate.use('en');
                // this.logger.logDebug('GET User SET LANGUAGE');
                const currentUser = yield this.getCurrentUser();
                _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.PreferedLanguageKey, _models_Core_language_enum__WEBPACK_IMPORTED_MODULE_3__.Language.English);
                // console.log('Saving user for language', currentUser);
                this.saveUser(currentUser);
            }
            else {
                this.logger.logEvent('Unable to change language');
                throw new _models_Exceptions_UnknownLanguageError__WEBPACK_IMPORTED_MODULE_5__.UnknownLanguageError('Unable to change language');
            }
            this.eventService.emit(new _event_service__WEBPACK_IMPORTED_MODULE_11__.EventData(_event_service__WEBPACK_IMPORTED_MODULE_11__.EventService.EventIds.LanguageChanged, null));
        });
    }
    setDefaultRecurringPositionName(value) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            const currentUser = yield this.getCurrentUser();
            _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.DefaultRecurringAfterTaskNameKey, value);
            // console.log('[Saving User for Recurring Name]', currentUser);
            yield this.saveUser(currentUser);
        });
    }
    setDefaultNonRecurringPositionName(value) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            const currentUser = yield this.getCurrentUser();
            _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.DefaultNonRecurringAfterTaskNameKey, value);
            // console.log('[Saving User for NonRecurringName]', currentUser);
            yield this.saveUser(currentUser);
        });
    }
    logout() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            //console.log('logging out3');
            UserService_1.currentUser = null;
            UserService_1.currentUserId = null;
            yield this.auth.logout();
            return;
        });
    }
    // TODO : Don't even sync this if they choose privacy
    setCloudSync(value) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            if (value === true) {
                const currentUser = yield this.getCurrentUser();
                _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.EnableCloudSyncKey, true);
                // console.log('Saving user for cloudsync', currentUser);
                this.saveUser(currentUser);
            }
            else {
                const currentUser = yield this.getCurrentUser();
                _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.EnableCloudSyncKey, false);
                // console.log('Saving user for cloudsync2', currentUser);
                this.saveUser(currentUser);
            }
        });
    }
    setDefaultNonRecurringGroupId(groupId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            const currentUser = yield this.getCurrentUser();
            // console.log('SET DEFAULT NON RECURRING GROUP ID');
            _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.DefaultNonRecurringGroupId, groupId);
            // console.log('[Saving user for NonRecurringGroupId]', currentUser);
            yield this.saveUser(currentUser);
        });
    }
    setDefaultRecurringGroupId(groupId) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            const currentUser = yield this.getCurrentUser();
            _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.DefaultRecurringGroupId, groupId);
            // console.log('[Saving user for Recurring GroupId]', currentUser);
            yield this.saveUser(currentUser);
        });
    }
    permanentlyDeleteAccount() {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            return yield this.api.permanentlyDeleteAccount(UserService_1.currentUserId);
        });
    }
    setKeepPortrait(value) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__awaiter)(this, void 0, void 0, function* () {
            if (value === true) {
                const currentUser = yield this.getCurrentUser();
                _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.KeepPortrait, true);
                this.saveUser(currentUser);
            }
            else {
                const currentUser = yield this.getCurrentUser();
                _models_Core_user__WEBPACK_IMPORTED_MODULE_0__.User.setConfig(currentUser, _models_Core_user_config__WEBPACK_IMPORTED_MODULE_8__.UserConfig.KeepPortrait, false);
                this.saveUser(currentUser);
            }
        });
    }
};
UserService.ctorParameters = () => [
    { type: _interfaces_i_local_storage_service__WEBPACK_IMPORTED_MODULE_6__.ILocalStorageService },
    { type: _interfaces_i_api_provider__WEBPACK_IMPORTED_MODULE_2__.IApiProvider },
    { type: _ngx_translate_core__WEBPACK_IMPORTED_MODULE_14__.TranslateService },
    { type: _interfaces_i_logger__WEBPACK_IMPORTED_MODULE_4__.ILogger },
    { type: _interfaces_i_authentication_service__WEBPACK_IMPORTED_MODULE_7__.IAuthenticationService },
    { type: _event_service__WEBPACK_IMPORTED_MODULE_11__.EventService }
];
UserService = UserService_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_13__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_15__.Injectable)({
        providedIn: 'root'
    })
], UserService);



/***/ }),

/***/ 71551:
/*!***********************************************!*\
  !*** ./src/app/services/vibration.service.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VibrationService": () => (/* binding */ VibrationService)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 98806);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 14001);


let VibrationService = class VibrationService {
    /**
     * For now the functionality is disabled, include it in a future update
     */
    constructor() { }
    vibrate(milliseconds) {
        return;
    }
};
VibrationService.ctorParameters = () => [];
VibrationService = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__decorate)([
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable)({
        providedIn: 'root'
    })
], VibrationService);



/***/ }),

/***/ 85218:
/*!**************************************!*\
  !*** ./src/app/shared/date-utils.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DateUtils)
/* harmony export */ });
class DateUtils {
    static datesAreEqual(d1, d2) {
        if (d1 == null && d2 == null) {
            return true;
        }
        if (d1 == null || d2 == null) {
            return false;
        }
        // console.log('datesAreEqual'); /*, d1, d2);*/
        return d1.setHours(0, 0, 0, 0) === d2.setHours(0, 0, 0, 0);
    }
    static dateTimeAreEqual(d1, d2) {
        if (d1 == null && d2 == null) {
            return true;
        }
        if (d1 == null || d2 == null) {
            return false;
        }
        // console.log('datesAreEqual'); /*, d1, d2);*/
        return d1.getTime() === d2.getTime();
    }
    static Today() {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        return today;
    }
    // Taken from : https://stackoverflow.com/questions/563406/add-days-to-javascript-date
    // Credits to sparebytes for the correct answer
    static AddDays(date, addDays) {
        const resultDate = new Date(date);
        resultDate.setDate(date.getDate() + addDays);
        resultDate.setHours(0, 0, 0, 0);
        return resultDate;
    }
    static Tomorrow() {
        return this.AddDays(this.Today(), 1);
    }
    static MonthAgo() {
        return this.AddDays(this.Today(), -31);
    }
    static YearAgo() {
        return this.AddDays(this.Today(), -365);
    }
    static RemoveHours(date) {
        const resultDate = new Date(date);
        resultDate.setHours(0, 0, 0, 0);
        return resultDate;
    }
    static GetWorkDate(date, endOfDay = '04:00') {
        let resultDate = new Date(date);
        const endOfDayHours = Number(endOfDay.substring(0, 2));
        const endOfDayMinutes = Number(endOfDay.substring(3, 5));
        // console.log('IIIIIIII    GETWORKDATE     IIIIIII');
        // console.log('DATE', date);
        // console.log('endOfDay', endOfDay);
        // console.log('hours = ', date.getHours(), endOfDayHours);
        // console.log('minutes = ', date.getMinutes(), endOfDayMinutes);
        if (endOfDayHours < 12) {
            if (date.getHours() * 60 + date.getMinutes() < endOfDayHours * 60 + endOfDayMinutes) {
                // console.log('Workdate after midnight', endOfDay, endOfDayHours, endOfDayMinutes);
                resultDate = this.AddDays(new Date(date), -1);
            }
        }
        else {
            if (date.getHours() * 60 + date.getMinutes() > endOfDayHours * 60 + endOfDayMinutes) {
                // console.log('Workdate before midnight', endOfDay, endOfDayHours, endOfDayMinutes);
                resultDate = this.AddDays(new Date(date), 1);
            }
        }
        return this.RemoveHours(resultDate);
    }
    static getLocalMysqlTimeFloored(date) {
        const time = this.getLocalMysqlTimeString(date);
        let minuteIterator = Number(time.substring(3, 3 + 2));
        for (let i = 0; i < 60; i++) {
            minuteIterator--;
            if (minuteIterator % 5 === 0) {
                break;
            }
        }
        const minutes = minuteIterator.toString();
        if (minutes.length === 2) {
            return time.substring(0, 3) + minutes;
        }
        else {
            return time.substring(0, 3) + '0' + minutes;
        }
    }
    static getLocalMysqlDateString(date) {
        const d = new Date(date);
        let month = '' + (d.getMonth() + 1);
        let day = '' + d.getDate();
        const year = d.getFullYear();
        if (month.length < 2) {
            month = '0' + month;
        }
        if (day.length < 2) {
            day = '0' + day;
        }
        return [year, month, day].join('-');
    }
    static getLocalMysqlTimeString(date) {
        const d = new Date(date);
        let hours = '' + (d.getHours());
        let minutes = '' + d.getMinutes();
        let seconds = String(Math.floor(d.getSeconds()));
        if (hours.length < 2) {
            hours = '0' + hours;
        }
        if (minutes.length < 2) {
            minutes = '0' + minutes;
        }
        if (seconds.length < 2) {
            seconds = '0' + seconds;
        }
        return [hours, minutes, seconds].join(':');
    }
    static getHHmmTimeUTC(date) {
        return date.toISOString().substring(11, 16);
    }
    static getAbsmsTimeDifference(date1, date2) {
        return Math.abs(date1.getTime() - date2.getTime());
    }
    static getHHmmFrommsTime(ms) {
        const dateUtc = new Date(new Date(ms).toUTCString());
        return DateUtils.getHHmmTimeUTC(dateUtc);
    }
    static getHHmmFromTimeDifferences(date1, date2) {
        const diff = DateUtils.getAbsmsTimeDifference(date1, date2);
        return DateUtils.getHHmmFrommsTime(diff);
    }
    static getHoursFromSeconds(seconds) {
        return Math.floor(seconds / DateUtils.SecondsInHour);
    }
    static getMinutesFromSeconds(seconds) {
        return Math.floor((seconds - DateUtils.getHoursFromSeconds(seconds) * DateUtils.SecondsInHour) / DateUtils.SecondsInMinute);
    }
    static getSecondsFromSeconds(seconds) {
        return seconds - DateUtils.getMinutesFromSeconds(seconds) - DateUtils.getHoursFromSeconds(seconds);
    }
    static daysBetween(startDate, endDate) {
        const millisecondsPerDay = 24 * 60 * 60 * 1000;
        return (DateUtils.treatAsUTC(endDate).getTime() - DateUtils.treatAsUTC(startDate).getTime()) / millisecondsPerDay;
    }
    static treatAsUTC(date) {
        const result = new Date(date);
        result.setMinutes(result.getMinutes() - result.getTimezoneOffset());
        return result;
    }
    static getFlooredDate(date) {
        const coeff = 1000 * 60 * 5;
        const rounded = new Date(Math.floor(date.getTime() / coeff) * coeff);
        return rounded;
    }
    static getTimeSince(date) {
        const timediff = Date.now() - date.getTime();
        return timediff.toString();
    }
    static getMillisecondsSince(date) {
        const timediff = Date.now() - date.getTime();
        return timediff;
    }
    static isValidDate(d) {
        return d instanceof Date && !isNaN(d.valueOf());
    }
    static getDurationString(totalSeconds) {
        const hours = DateUtils.getHoursFromSeconds(totalSeconds);
        const minutes = DateUtils.getMinutesFromSeconds(totalSeconds);
        const seconds = Math.round(totalSeconds - DateUtils.SecondsInMinute * minutes - hours * DateUtils.SecondsInHour);
        const secondsString = seconds >= 10 ? String(seconds) : '0' + seconds;
        const minutesString = minutes >= 10 ? String(minutes) : '0' + minutes;
        // console.log('hours, minutes, seconds, secondsstring, minutestring', hours, minutes, seconds, minutesString, secondsString);
        if (hours === 0 && minutes < 1) {
            return '00:' + secondsString;
        }
        else if (hours === 0) {
            return minutes + ':' + secondsString;
        }
        else {
            return hours + ':' + minutesString + ':' + secondsString;
        }
    }
}
DateUtils.SecondsInMinute = 60;
DateUtils.SecondsInHour = 60 * 60;


/***/ }),

/***/ 26173:
/*!****************************************!*\
  !*** ./src/app/shared/number-utils.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NumberUtils)
/* harmony export */ });
// Taken from https://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-a-range-within-the-supp
// Credits to Remi
class NumberUtils {
    static Range(start, stop, step) {
        const a = [start];
        let b = start;
        if (start <= stop) {
            while (b < stop) {
                a.push(b += step || 1);
            }
        }
        else {
            while (b > stop) {
                a.push(b += step || 1);
            }
        }
        return a;
    }
    static getRandomId() {
        let result = Math.random().toString(36);
        if (result.length < 20) {
            result += Math.random().toString(36);
        }
        return result;
    }
    static checkIfDuplicateExists(w) {
        const duplicateExists = new Set(w).size !== w.length;
        /*if (duplicateExists === true) {
          console.log('DUPLICATE EXISTS', duplicateExists, w);
        } else {
          console.log('DUPLICATE DOES NOT EXIST', duplicateExists, w);
        }*/
        return duplicateExists;
    }
}


/***/ }),

/***/ 39023:
/*!****************************************!*\
  !*** ./src/app/shared/thread.utils.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ThreadUtils)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ 98806);

class ThreadUtils {
    static sleep(ms) {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {
            return new Promise(resolve => setTimeout(resolve, ms));
        });
    }
}


/***/ }),

/***/ 18260:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environment": () => (/* binding */ environment)
/* harmony export */ });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
const environment = {
    production: false,
    firebase: {
        apiKey: 'AIzaSyAXSnqPkR051dZJgT5NI1lm6KQTY-sOtF0',
        authDomain: 'pp-app-1893d.firebaseapp.com',
        databaseURL: 'https://pp-app-1893d.firebaseio.com',
        projectId: 'pp-app-1893d',
        storageBucket: 'pp-app-1893d.appspot.com',
        messagingSenderId: '6037718437',
        appId: '1:6037718437:web:a4ed7e101ce3e50685544c',
        measurementId: 'G-DTCY90CRT9',
    },
    apiUrl: 'https://hypertaskprod11.azurewebsites.net/',
    // apiUpdateXmlUrl: 'https://hypertaskdev.azurewebsites.net/staticfiles/habit-tracker-update.xml',
    //apiUrl: 'https://localhost:44397/',
    /// / apiUrl: 'https://localhost:5000:80/',
    apiUpdateXmlUrl: 'https://hypertaskprod11.azurewebsites.net/staticfiles/habit-tracker-update.xml',
    instrumentationKey: '375ecb22-853a-409c-9a2a-91abb22adab6',
};
// C:\Program Files\Java\jdk1.8.0_221\bin
// keytool -genkey -v -keystore F:\my-release-key.keystore -alias dailyhabittracker -keyalg RSA -keysize 2048 -validity 10000
// tslint:disable-next-line:max-line-length
// jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore F://my-release-key.keystore F://app-release-unsigned.apk dailyhabittracker
// To get SHA1 signature :
// keytool -exportcert -list -v \
// -alias <your-key-name> -keystore <path-to-production-keystore>
// F:\Android\Sdk\build-tools\29.0.2
// zipalign -v 4 F:\app-release-unsigned.apk F://daily-habit-tracker.apk
// http://localhost:44397/staticfiles/habit-tracker-update.xml
// https://habittrackerfree.azurewebsites.net/staticfiles/habit-tracker-update.xml
// first time sign : jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore my_application.apk hypertask


/***/ }),

/***/ 90271:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 14001);
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ 42577);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/app.module */ 34750);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environments/environment */ 18260);




if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.production) {
    (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.enableProdMode)();
}
(0,_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_3__.platformBrowserDynamic)().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.AppModule)
    .catch(err => console.log(err));


/***/ }),

/***/ 50863:
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ lazy ^\.\/.*\.entry\.js$ include: \.entry\.js$ exclude: \.system\.entry\.js$ namespace object ***!
  \******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./ion-accordion_2.entry.js": [
		83477,
		"common",
		"node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js"
	],
	"./ion-action-sheet.entry.js": [
		67196,
		"common",
		"node_modules_ionic_core_dist_esm_ion-action-sheet_entry_js"
	],
	"./ion-alert.entry.js": [
		38081,
		"common",
		"node_modules_ionic_core_dist_esm_ion-alert_entry_js"
	],
	"./ion-app_8.entry.js": [
		75017,
		"common",
		"node_modules_ionic_core_dist_esm_ion-app_8_entry_js"
	],
	"./ion-avatar_3.entry.js": [
		69721,
		"common",
		"node_modules_ionic_core_dist_esm_ion-avatar_3_entry_js"
	],
	"./ion-back-button.entry.js": [
		99216,
		"common",
		"node_modules_ionic_core_dist_esm_ion-back-button_entry_js"
	],
	"./ion-backdrop.entry.js": [
		96612,
		"node_modules_ionic_core_dist_esm_ion-backdrop_entry_js"
	],
	"./ion-breadcrumb_2.entry.js": [
		42694,
		"common",
		"node_modules_ionic_core_dist_esm_ion-breadcrumb_2_entry_js"
	],
	"./ion-button_2.entry.js": [
		22938,
		"common",
		"node_modules_ionic_core_dist_esm_ion-button_2_entry_js"
	],
	"./ion-card_5.entry.js": [
		51379,
		"common",
		"node_modules_ionic_core_dist_esm_ion-card_5_entry_js"
	],
	"./ion-checkbox.entry.js": [
		97552,
		"common",
		"node_modules_ionic_core_dist_esm_ion-checkbox_entry_js"
	],
	"./ion-chip.entry.js": [
		37218,
		"common",
		"node_modules_ionic_core_dist_esm_ion-chip_entry_js"
	],
	"./ion-col_3.entry.js": [
		97479,
		"node_modules_ionic_core_dist_esm_ion-col_3_entry_js"
	],
	"./ion-datetime_3.entry.js": [
		64134,
		"common",
		"node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js"
	],
	"./ion-fab_3.entry.js": [
		71439,
		"common",
		"node_modules_ionic_core_dist_esm_ion-fab_3_entry_js"
	],
	"./ion-img.entry.js": [
		76397,
		"node_modules_ionic_core_dist_esm_ion-img_entry_js"
	],
	"./ion-infinite-scroll_2.entry.js": [
		33296,
		"node_modules_ionic_core_dist_esm_ion-infinite-scroll_2_entry_js"
	],
	"./ion-input.entry.js": [
		12413,
		"common",
		"node_modules_ionic_core_dist_esm_ion-input_entry_js"
	],
	"./ion-item-option_3.entry.js": [
		39411,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item-option_3_entry_js"
	],
	"./ion-item_8.entry.js": [
		99133,
		"common",
		"node_modules_ionic_core_dist_esm_ion-item_8_entry_js"
	],
	"./ion-loading.entry.js": [
		79003,
		"common",
		"node_modules_ionic_core_dist_esm_ion-loading_entry_js"
	],
	"./ion-menu_3.entry.js": [
		96065,
		"common",
		"node_modules_ionic_core_dist_esm_ion-menu_3_entry_js"
	],
	"./ion-modal.entry.js": [
		86991,
		"common",
		"node_modules_ionic_core_dist_esm_ion-modal_entry_js"
	],
	"./ion-nav_2.entry.js": [
		82947,
		"common",
		"node_modules_ionic_core_dist_esm_ion-nav_2_entry_js"
	],
	"./ion-picker-column-internal.entry.js": [
		25919,
		"common",
		"node_modules_ionic_core_dist_esm_ion-picker-column-internal_entry_js"
	],
	"./ion-picker-internal.entry.js": [
		93109,
		"node_modules_ionic_core_dist_esm_ion-picker-internal_entry_js"
	],
	"./ion-popover.entry.js": [
		99459,
		"common",
		"node_modules_ionic_core_dist_esm_ion-popover_entry_js"
	],
	"./ion-progress-bar.entry.js": [
		20301,
		"common",
		"node_modules_ionic_core_dist_esm_ion-progress-bar_entry_js"
	],
	"./ion-radio_2.entry.js": [
		43799,
		"common",
		"node_modules_ionic_core_dist_esm_ion-radio_2_entry_js"
	],
	"./ion-range.entry.js": [
		12140,
		"common",
		"node_modules_ionic_core_dist_esm_ion-range_entry_js"
	],
	"./ion-refresher_2.entry.js": [
		86197,
		"common",
		"node_modules_ionic_core_dist_esm_ion-refresher_2_entry_js"
	],
	"./ion-reorder_2.entry.js": [
		41975,
		"common",
		"node_modules_ionic_core_dist_esm_ion-reorder_2_entry_js"
	],
	"./ion-ripple-effect.entry.js": [
		58387,
		"node_modules_ionic_core_dist_esm_ion-ripple-effect_entry_js"
	],
	"./ion-route_4.entry.js": [
		98659,
		"common",
		"node_modules_ionic_core_dist_esm_ion-route_4_entry_js"
	],
	"./ion-searchbar.entry.js": [
		26404,
		"common",
		"node_modules_ionic_core_dist_esm_ion-searchbar_entry_js"
	],
	"./ion-segment_2.entry.js": [
		85253,
		"common",
		"node_modules_ionic_core_dist_esm_ion-segment_2_entry_js"
	],
	"./ion-select_3.entry.js": [
		92619,
		"common",
		"node_modules_ionic_core_dist_esm_ion-select_3_entry_js"
	],
	"./ion-slide_2.entry.js": [
		82871,
		"node_modules_ionic_core_dist_esm_ion-slide_2_entry_js"
	],
	"./ion-spinner.entry.js": [
		17668,
		"common",
		"node_modules_ionic_core_dist_esm_ion-spinner_entry_js"
	],
	"./ion-split-pane.entry.js": [
		55342,
		"node_modules_ionic_core_dist_esm_ion-split-pane_entry_js"
	],
	"./ion-tab-bar_2.entry.js": [
		174,
		"common",
		"node_modules_ionic_core_dist_esm_ion-tab-bar_2_entry_js"
	],
	"./ion-tab_2.entry.js": [
		86185,
		"common",
		"node_modules_ionic_core_dist_esm_ion-tab_2_entry_js"
	],
	"./ion-text.entry.js": [
		97337,
		"common",
		"node_modules_ionic_core_dist_esm_ion-text_entry_js"
	],
	"./ion-textarea.entry.js": [
		4833,
		"common",
		"node_modules_ionic_core_dist_esm_ion-textarea_entry_js"
	],
	"./ion-toast.entry.js": [
		9468,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toast_entry_js"
	],
	"./ion-toggle.entry.js": [
		25705,
		"common",
		"node_modules_ionic_core_dist_esm_ion-toggle_entry_js"
	],
	"./ion-virtual-scroll.entry.js": [
		87463,
		"node_modules_ionic_core_dist_esm_ion-virtual-scroll_entry_js"
	]
};
function webpackAsyncContext(req) {
	if(!__webpack_require__.o(map, req)) {
		return Promise.resolve().then(() => {
			var e = new Error("Cannot find module '" + req + "'");
			e.code = 'MODULE_NOT_FOUND';
			throw e;
		});
	}

	var ids = map[req], id = ids[0];
	return Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {
		return __webpack_require__(id);
	});
}
webpackAsyncContext.keys = () => (Object.keys(map));
webpackAsyncContext.id = 50863;
module.exports = webpackAsyncContext;

/***/ }),

/***/ 75158:
/*!***************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/app.component.html ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-app>\n  <app-side-menu></app-side-menu>\n  <ion-router-outlet id=\"main-content\" main></ion-router-outlet>\n</ion-app>");

/***/ }),

/***/ 93147:
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/TaskCard/task-card-popover/task-card-popover.component.html ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("\r\n<ion-grid>\r\n  <!--Edit-->\r\n  <ion-row>\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnEditTaskClick()\"\r\n                  color=\"dark\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"create-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'task-card-popover.btn-edit' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Stats-->\r\n  <ion-row [hidden]=\"!viewModel.showBtnStats\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnShowStatsClick()\"\r\n                  color=\"dark\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"bar-chart-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'task-card-popover.btn-stats' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Postpone-->\r\n  <!--ion-row [hidden]=\"!viewModel.showPostponeBtn\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnPostponeClick()\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"arrow-redo-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'task-card-popover.btn-postpone' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row-->\r\n  <!--Note-->\r\n  <ion-row [hidden]=\"!viewModel.showBtnNote\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnAddNoteClick()\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"pencil-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'task-card-popover.btn-add-note' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Void Result-->\r\n  <ion-row [hidden]=\"!viewModel.showBtnVoid\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnVoidResultClick()\"\r\n                  color=\"danger\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"trash-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'task-card-popover.btn-void-result' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Resume Timer-->\r\n  <ion-row [hidden]=\"!viewModel.showBtnResumeTimer\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnResumeTimerClick()\"\r\n                  color=\"success\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"play-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'task-card-popover.btn-resume-timer' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>\r\n");

/***/ }),

/***/ 62523:
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/TaskCard/task-card/task-card.component.html ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<!--Clickable/Expandable Card Header-->\r\n<ion-grid>\r\n  <ion-row class=\"full-width\">\r\n    <!--Task position for testing only-->\r\n    <!--ion-col size=\"1\"\r\n              class=\"content-center\">\r\n      <ion-label color=\"dark\">{{ currentTask.AbsolutePosition }}</ion-label>\r\n    </ion-col-->\r\n    <!--Reorder-->\r\n    <ion-col [hidden]=\"!viewModel.enableDragAndDrop\"\r\n              size=\"2\"\r\n              id=\"stepDragAndDrop\">\r\n      <ion-reorder class=\"content-center vertical-center\">\r\n        <ion-icon name=\"swap-vertical-outline\" class=\"color-black zoom\"></ion-icon>\r\n      </ion-reorder>\r\n    </ion-col>\r\n    <!--Task Name-->\r\n    <ion-col class=\"content-center-left margin-left\">\r\n      <ion-text color=\"dark\">{{ viewModel.currentTask.Name }}</ion-text>\r\n    </ion-col>\r\n    <!--Task Result-->\r\n    <ion-col *ngIf=\"viewModel.showTaskResult\">\r\n      <!--Task Score (Displayed if done)-->\r\n      <ion-icon *ngIf=\"viewModel.showCheckedBox\"\r\n                name=\"checkbox\" \r\n                class=\"zoom color-black\"></ion-icon>\r\n      <ion-label *ngIf=\"viewModel.showText\"\r\n                color=\"dark\"\r\n                style=\"margin:auto;\" \r\n                class=\"font-medium\">{{ viewModel.taskResult }}</ion-label>\r\n      <!--Task Skipped (Displayed if skipped)-->\r\n      <ion-icon *ngIf=\"viewModel.showBrokenHeart\"\r\n                class=\"content-center zoom color-black\"\r\n                name=\"close-outline\"></ion-icon>\r\n    </ion-col>\r\n    <!--Task Main Buttons-->\r\n    <ion-col [hidden]=\"!viewModel.showMainTaskButtons\"\r\n              class=\"content-center-right\"\r\n              id=\"stepActionButtons\">\r\n      <!--Start timer-->\r\n      <ion-button *ngIf=\"viewModel.showBtnStart\"\r\n                  (click)=\"btnStartClick($event)\"\r\n                  color=\"success\"\r\n                  id=\"stepStartTimer\">\r\n        <ion-icon name=\"play-outline\" color=\"light\"></ion-icon>\r\n      </ion-button>\r\n      <!--Cancel timer-->\r\n      <ion-button *ngIf=\"viewModel.showBtnCancelTimer\"\r\n                  (click)=\"btnCancelTimerClick($event)\"\r\n                  color=\"dark\">\r\n        <ion-icon name=\"close-outline\" color=\"light\"></ion-icon>\r\n      </ion-button>\r\n      <!--Pause timer-->\r\n      <ion-button *ngIf=\"viewModel.showBtnPause\"\r\n                  (click)=\"btnPauseClick($event)\"\r\n                  color=\"dark\">\r\n        <ion-icon name=\"pause-outline\" color=\"light\"></ion-icon>\r\n      </ion-button>\r\n      <!--Unpause-->\r\n      <ion-button *ngIf=\"viewModel.showBtnResume\"\r\n                  (click)=\"btnUnpauseClick($event)\"\r\n                  color=\"success\">\r\n        <ion-icon name=\"play-outline\" color=\"light\"></ion-icon>\r\n      </ion-button>\r\n      <!--Enter Time-->\r\n      <ion-button *ngIf=\"viewModel.showBtnEnterTime\"\r\n                  (click)=\"btnEnterTimeClick();\"\r\n                  color=\"success\"\r\n                  id=\"stepEnterResult\">\r\n        <ion-icon name=\"time-outline\" color=\"light\"></ion-icon>\r\n      </ion-button>\r\n      <!--Enter Value-->\r\n      <ion-button *ngIf=\"viewModel.showBtnEnterValue\"\r\n                  (click)=\"btnEnterValueClick($event)\"\r\n                  color=\"success\"\r\n                  class=\"pre-wrap\">\r\n        <ion-icon name=\"create-outline\" class=\"color-white\"></ion-icon>\r\n      </ion-button>\r\n      <!--Enter Duration-->\r\n      <ion-button *ngIf=\"viewModel.showBtnEnterDuration\"\r\n                  (click)=\"btnEnterDurationClick($event)\"\r\n                  color=\"success\"\r\n                  class=\"pre-wrap\">\r\n        <ion-icon name=\"hourglass-outline\" class=\"color-white\"></ion-icon>\r\n      </ion-button>\r\n      <!--Done-->\r\n      <ion-button *ngIf=\"viewModel.showBtnDone\"\r\n                  (click)=\"btnDoneClick($event)\"\r\n                  color=\"success\">\r\n        <ion-icon name=\"checkbox-outline\" class=\"color-white\"></ion-icon>\r\n      </ion-button>\r\n      <!--Postpone-->\r\n      <ion-button *ngIf=\"viewModel.showPostponeBtn\"\r\n                  (click)=\"btnPostponeClick($event)\"\r\n                  color=\"primary\"\r\n                  id=\"stepPostpone\">\r\n          <ion-icon name=\"arrow-redo-outline\"\r\n                    class=\"color-white\"></ion-icon>            \r\n      </ion-button>\r\n      <!--Skip-->\r\n      <ion-button *ngIf=\"viewModel.showBtnSkip\"\r\n                  (click)=\"btnSkipClick($event)\"\r\n                  color=\"primary\"\r\n                  id=\"stepSkip\">\r\n        <ion-icon name=\"close-outline\"\r\n                  class=\"color-white\"></ion-icon>\r\n      </ion-button>\r\n      <!--Delete-->\r\n      <ion-button *ngIf=\"viewModel.showBtnDelete\"\r\n                  (click)=\"btnDeleteClick($event)\"\r\n                  color=\"danger\"\r\n                  id=\"stepTrash\">\r\n        <ion-icon name=\"trash-outline\"\r\n                  class=\"color-white\"></ion-icon>\r\n      </ion-button>\r\n    </ion-col>\r\n    <!--Menu Small-->\r\n    <ion-col [hidden]=\"!viewModel.showTaskResult\"\r\n              size=\"1\"\r\n              (click)=\"onCardClick($event)\"\r\n              tappable>\r\n      <ion-icon name=\"ellipsis-vertical-outline\"\r\n                color=\"medium\"></ion-icon>\r\n    </ion-col>\r\n    <!--Menu Big-->\r\n    <ion-col [hidden]=\"viewModel.showTaskResult\"\r\n              size=\"1\"\r\n              (click)=\"onCardClick($event)\"\r\n              tappable\r\n              id=\"stepCardMenu\">\r\n      <ion-icon name=\"ellipsis-vertical-outline\"\r\n                color=\"medium\"></ion-icon>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Current Timer-->\r\n  <ion-row [hidden]=\"viewModel.hideTimer\"\r\n           class=\"bordered-large\">\r\n    <ion-col>\r\n      <app-timer #htmlTimer\r\n                [currentTaskId]=\"viewModel.currentTask.CalendarTaskId\"></app-timer>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Note-->\r\n  <ion-row *ngIf=\"viewModel.showNote\" class=\"bordered\">\r\n    <!--ion-col size=\"2\"\r\n            class=\"content-center\">\r\n      <ion-button size=\"small\"\r\n                  color=\"light\">\r\n        <ion-icon name=\"pencil-outline\"></ion-icon>\r\n      </ion-button>\r\n    </ion-col-->\r\n    <ion-col>\r\n      <ion-text>{{ 'task-card.lbl-note' | translate }} : {{ viewModel.currentNote }}</ion-text>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Stats-->\r\n  <!--ion-row *ngFor=\"let taskStats of viewModel.taskStats\"\r\n          [hidden]=\"viewModel.hideStats\"\r\n          class=\"bordered\">\r\n    <ion-col>\r\n      <app-task-scores [taskStats]=\"taskStats\"\r\n                        [calendarTaskId]=\"currentTask.CalendarTaskId\"\r\n                        [loadEvent]=\"viewModel.eventLoadStats.asObservable()\"></app-task-scores>\r\n    </ion-col>\r\n  </ion-row-->\r\n</ion-grid>");

/***/ }),

/***/ 33183:
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/TaskCard/task-scores/task-scores.component.html ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<!--Stats Name-->\r\n<ion-row>\r\n  <ion-col size=\"2\"></ion-col>\r\n  <ion-col class=\"content-center\"\r\n           size=\"8\">\r\n    <ion-label color=\"dark\">\r\n      <h2>{{ taskStats.Name }}</h2>\r\n    </ion-label>\r\n  </ion-col>\r\n  <ion-col size=\"2\">\r\n    <ion-button size=\"small\"\r\n                color=\"dark\"\r\n                (click)=\"btnCloseStatsClick()\">\r\n      <ion-icon name=\"close-outline\"\r\n                color=\"light\"></ion-icon>\r\n    </ion-button>\r\n  </ion-col>\r\n</ion-row>\r\n\r\n<!--Chart vs Details-->\r\n<ion-row [hidden]=\"!showCharVsDetails\">\r\n  <ion-col>\r\n    <ion-segment (ionChange)=\"chartChanged($event)\"\r\n                 value=\"Chart\">\r\n      <ion-segment-button value=\"Chart\">\r\n        <ion-label class=\"text-wrap\">{{ 'task-scores.segment-chart' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n      <ion-segment-button value=\"Details\">\r\n        <ion-label class=\"text-wrap\">{{ 'task-scores.segment-details' | translate }}</ion-label>\r\n      </ion-segment-button>\r\n    </ion-segment>\r\n  </ion-col>\r\n</ion-row>\r\n\r\n<!--Chart-->\r\n<ion-row [hidden]=\"!showChart\">\r\n  <ion-col>\r\n    <canvas #lineChart></canvas>\r\n  </ion-col>\r\n</ion-row>\r\n\r\n<!--Result Details-->\r\n<ng-container *ngFor=\"let minusWeek of cardsMinusWeeksArray\">\r\n  <ion-row [hidden]=\"!showDetails\">\r\n    <ion-col class=\"container\">\r\n      <div *ngFor=\"let minusDays of minusDaysArray\"\r\n           class=\"bordered content-center column minicard\">\r\n        <ion-label color=\"dark\"\r\n                   class=\"font-xsmall\">\r\n          {{ dateService.GetmmddFromMinusDays(minusDays + minusWeek * 7, dateService.currentWorkDate) }}\r\n        </ion-label>\r\n        <!--Skipped (Broken Heart)-->\r\n        <ion-icon *ngIf=\"showSkipped(minusDays + minusWeek * 7)\" \r\n                  name=\"close-outline\" \r\n                  class=\"font-large\"></ion-icon>\r\n        <!--Checkbox-->\r\n        <ion-icon *ngIf=\"showCheckbox(minusDays + minusWeek * 7)\" \r\n                  name=\"checkbox\" \r\n                  class=\"font-large\"\r\n                  color=\"dark\"></ion-icon>\r\n        <!--Duration Results-->\r\n        <ion-label *ngIf=\"showDuration(minusDays + minusWeek * 7)\"\r\n                   color=\"dark\"\r\n                   class=\"font-small\">{{ getPreviousDayDuration(minusDays + minusWeek * 7) }}</ion-label>\r\n        <!--Decimal Results-->\r\n        <ion-label *ngIf=\"showDecimal(minusDays + minusWeek * 7)\" \r\n                  color=\"dark\"\r\n                   class=\"font-small\">{{ getPreviousDayResult(minusDays + minusWeek * 7) }}</ion-label>\r\n        <!--Time Results-->\r\n        <ion-label *ngIf=\"showTime(minusDays + minusWeek * 7)\" \r\n                   color=\"dark\"\r\n                   class=\"font-small\">{{ getPreviousDayResult(minusDays + minusWeek * 7) }}</ion-label>\r\n      </div>\r\n    </ion-col>\r\n  </ion-row>\r\n</ng-container>\r\n\r\n\r\n<!--Choose Stats Range-->\r\n<ion-row class=\"space-evenly\"> \r\n  <ion-col class=\"content-center\"\r\n           size=\"2\">\r\n    <ion-button size=\"small\"\r\n                (click)=\"btnStatsClick(7 * 1)\">{{ 'task-scores.btn-one-week' | translate }}</ion-button>\r\n  </ion-col>\r\n  <ion-col class=\"content-center\" \r\n           size=\"2\">\r\n    <ion-button size=\"small\"\r\n                (click)=\"btnStatsClick(7 * 4)\">{{ 'task-scores.btn-one-month' | translate }}</ion-button>\r\n  </ion-col>\r\n  <ion-col class=\"content-center\" \r\n           size=\"2\">\r\n    <ion-button size=\"small\"\r\n                (click)=\"btnStatsClick(7 * 4 * 3)\">{{ 'task-scores.btn-three-months' | translate }}</ion-button>\r\n  </ion-col>\r\n  <ion-col class=\"content-center\" \r\n           size=\"2\"\r\n           [hidden]=\"!show1AButton\">\r\n    <ion-button size=\"small\"\r\n                (click)=\"btnStatsClick(365)\">{{ 'task-scores.btn-one-year' | translate }}</ion-button>\r\n  </ion-col>\r\n</ion-row>\r\n<!--Other numbers-->\r\n<ion-row [hidden]=\"!showMax\">\r\n  <ion-col>\r\n    <ion-label color=\"dark\">{{ 'task-scores.lbl-max' | translate }} : {{ txtMaximum }}</ion-label>\r\n  </ion-col>\r\n</ion-row>\r\n<ion-row [hidden]=\"!showAverage\">\r\n  <ion-col>\r\n    <ion-label color=\"dark\">{{ 'task-scores.lbl-avg' | translate }} : {{ txtAverage }}</ion-label>\r\n  </ion-col>\r\n</ion-row>\r\n<ion-row [hidden]=\"!showTotal\">\r\n  <ion-col>\r\n    <ion-label color=\"dark\">{{ 'task-scores.lbl-total' | translate }} : {{ txtTotal }}</ion-label>\r\n  </ion-col>\r\n</ion-row>\r\n<ion-row [hidden]=\"!showCompletionRate\">\r\n  <ion-col>\r\n    <ion-label color=\"dark\">{{ 'task-scores.lbl-completion-rate' | translate }} : {{ txtCompletionRate }}</ion-label>\r\n  </ion-col>\r\n</ion-row>");

/***/ }),

/***/ 81126:
/*!*******************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/TaskCard/timer/timer.component.html ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-label class=\"font-xxlarge\" \r\n           color=\"dark\">{{ currentTimerObject.currentTimerSeconds | formatTimer }}</ion-label>");

/***/ }),

/***/ 85974:
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/debug-log/debug-log.component.html ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card>\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"6\">\r\n          <h2>{{ 'debug-log.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <ion-card-content>\r\n    <ion-list>\r\n      <ion-item *ngFor=\"let line of currentLogs\">\r\n        <ion-text>{{ line }}</ion-text>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 64679:
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/group-card/group-card.component.html ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card color=\"dark\"\r\n          [hidden]=\"!currentGroup.isVisible\">\r\n  <!--Group Header-->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row (click)=\"toggleGroup()\" tappable>\r\n        <!--Toggle-->\r\n        <ion-col size=\"3\"\r\n                 id=\"stepGroupArrow\">\r\n          <ion-icon name=\"caret-down-outline\"\r\n                    [hidden]=\"currentGroup.isExpanded\"\r\n                    class=\"font-large\"></ion-icon>\r\n          <ion-icon name=\"caret-up-outline\"\r\n                    [hidden]=\"!currentGroup.isExpanded\"\r\n                    class=\"font-large\"></ion-icon>\r\n        </ion-col>\r\n        <!--Group Title-->\r\n        <ion-col size=\"6\">\r\n          <ion-title class=\"text-center\">\r\n            <ion-label color=\"light\" class=\"font-large\">{{ currentGroup.Name }}</ion-label>\r\n          </ion-title>\r\n        </ion-col>\r\n        <!--Progress-->\r\n        <ion-col size=\"2\">\r\n          <ion-label class=\"font-small\" color=\"light\" class=\"font-large\">{{ currentGroup.ProgressText }}</ion-label>\r\n        </ion-col>\r\n        <!--Action Menu-->\r\n        <ion-col size=\"1\"\r\n                 id=\"stepEditGroup\">\r\n          <ion-icon name=\"ellipsis-vertical-outline\"\r\n                    (click)=\"groupMenuClick($event)\" tappable></ion-icon>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n  <!--Group Content-->\r\n  <ion-card-content [hidden]=\"!currentGroup.isExpanded\" \r\n                    class=\"no-padding\">\r\n    <ion-reorder-group disabled=\"{{disableDragAndDrop}}\"\r\n                       (ionItemReorder)=\"doReorder($event)\"\r\n                       #reorderGroup>\r\n      <!--Task Cards-->\r\n      <ion-item *ngFor=\"let task of currentGroup.Tasks\"\r\n                [hidden]=\"!task.IsShown\"\r\n                lines=\"none\"\r\n                color=\"dark\"\r\n                class=\"scroll margin-5 min-height-30 overflow-visible background-dark\">\r\n        <app-task-card [currentTask]=\"task\"\r\n                        class=\"full-size header-border background-white content-center\"\r\n                        #taskcard></app-task-card>\r\n      </ion-item>\r\n    </ion-reorder-group>\r\n  </ion-card-content>\r\n</ion-card>\r\n");

/***/ }),

/***/ 98370:
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/group-create/group-create.component.html ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height\"\r\n          color=\"light\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col>\r\n          <h2>{{ 'group-create.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n        <!--Save-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"btnSaveClick()\"\r\n                      color=\"success\">\r\n            <ion-icon name=\"save-outline\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n    \r\n  <!-- Scrollable Body -->\r\n  <ion-card-content>\r\n    <ion-list class=\"background-light\">\r\n      <!--Name-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-group-name' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Name-->\r\n          <ion-row class=\"content-center\">\r\n            <ion-col size=\"4\">\r\n              <ion-input fullWidth \r\n                         fieldSize=\"large\" \r\n                         [(ngModel)]=\"currentGroup.Name\" \r\n                         maxlength=\"200\"\r\n                         minlength=\"1\"\r\n                         required=\"true\">\r\n              </ion-input>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Default task type -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-task-type-default' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Default Task Type Radio-->\r\n          <ion-row>\r\n            <ion-col class=\"grey-box\">\r\n              <ion-radio-group (ionChange)=\"taskTypeChanged($event)\"\r\n                              [(ngModel)]=\"taskTypeValue\"\r\n                              class=\"hidden-overflow\">\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap small-font\">{{ 'group-create.lbl-recurring' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\"  value=\"Recurring\"></ion-radio>\r\n                </ion-item>\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap small-font\">{{ 'group-create.lbl-once' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\" value=\"Once\"></ion-radio>\r\n                </ion-item>\r\n              </ion-radio-group>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Position -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-position' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--First-->\r\n          <ion-row *ngIf=\"selectedAfterGroup == null\">\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col >\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-first' | translate }}</ion-label>\r\n            </ion-col>\r\n            <!-- Edit Button -->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"btnEditPositionClick()\"\r\n                          size=\"small\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--After First-->\r\n          <ion-row *ngIf=\"selectedAfterGroup != null\">\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col>\r\n              <ion-label class=\"no-overflow font-medium\">{{ 'group-create.lbl-after' | translate }} : {{ selectedAfterGroup.Name }}</ion-label>\r\n            </ion-col>\r\n            <!-- Edit Button -->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"btnEditPositionClick()\"\r\n                          size=\"small\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Task Selected-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid class=\"percent-width\">\r\n          <!--Select All-->\r\n          <ion-row>\r\n            <ion-col size=\"3\"></ion-col>\r\n            <ion-col size=\"9\" class=\"content-center-left\">\r\n              <ion-item class=\"full-width margin-left\"\r\n                        lines=\"none\">\r\n                  <ion-label class=\"no-margin-vertical\">{{ 'group-create.lbl-select-all' | translate }}</ion-label>\r\n                  <ion-checkbox slot=\"start\" \r\n                                [(ngModel)]=\"selectAllChecked\"\r\n                                class=\"no-margin-vertical content-center\"\r\n                                (click)=\"checkAllClick()\"></ion-checkbox>\r\n                </ion-item>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Select List-->\r\n          <ion-row>\r\n            <ion-col size=\"3\">\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-tasks' | translate }}</ion-label>\r\n            </ion-col>\r\n            <ion-col size=\"9\">\r\n              <ion-list class=\"max-height-fixed percent-width bordered\">\r\n                <ion-item *ngFor=\"let task of selectableTasks\"\r\n                          class=\"full-width\"\r\n                          lines=\"none\">\r\n                  <ion-label class=\"no-margin-vertical\">{{ task.Name }}</ion-label>\r\n                  <ion-checkbox slot=\"start\" \r\n                                [(ngModel)]=\"task.isChecked\"\r\n                                class=\"no-margin-vertical content-center\"></ion-checkbox>\r\n                </ion-item>\r\n              </ion-list>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-card-content>\r\n</ion-card>\r\n");

/***/ }),

/***/ 267:
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/group-edit/group-edit.component.html ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height\"\r\n          color=\"light\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col>\r\n          <h2>{{ 'group-edit.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n        <!--Save-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"btnSaveClick()\"\r\n                      color=\"success\">\r\n            <ion-icon name=\"save-outline\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n    \r\n  <!-- Scrollable Body -->\r\n  <ion-card-content>\r\n    <ion-list class=\"background-light\">\r\n      <!--Name-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-group-name' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Name-->\r\n          <ion-row class=\"content-center\">\r\n            <ion-col size=\"6\">\r\n              <ion-input fullWidth \r\n                          fieldSize=\"large\" \r\n                          [(ngModel)]=\"currentGroup.Name\" \r\n                          maxlength=\"200\"\r\n                          minlength=\"1\"\r\n                          required=\"true\">\r\n              </ion-input>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Default task type -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-task-type-default' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Default Task Type Radio-->\r\n          <ion-row>\r\n            <ion-col class=\"grey-box\">\r\n              <ion-radio-group (ionChange)=\"taskTypeChanged($event)\"\r\n                              [(ngModel)]=\"taskTypeValue\"\r\n                              class=\"hidden-overflow\">\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap small-font\">{{ 'group-create.lbl-recurring' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\"  value=\"Recurring\"></ion-radio>\r\n                </ion-item>\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap small-font\">{{ 'group-create.lbl-once' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\" value=\"Once\"></ion-radio>\r\n                </ion-item>\r\n              </ion-radio-group>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Position -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-position' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--First-->\r\n          <ion-row *ngIf=\"selectedAfterGroup == null\">\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col >\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-first' | translate }}</ion-label>\r\n            </ion-col>\r\n            <!-- Edit Button -->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"btnEditPositionClick()\"\r\n                          size=\"small\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--After First-->\r\n          <ion-row *ngIf=\"selectedAfterGroup != null\">\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col>\r\n              <ion-label class=\"no-overflow font-medium\">{{ 'group-create.lbl-after' | translate }} : {{ selectedAfterGroup.Name }}</ion-label>\r\n            </ion-col>\r\n            <!-- Edit Button -->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"btnEditPositionClick()\"\r\n                          size=\"small\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Task Selected-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid class=\"percent-width\">\r\n          <!--Select All-->\r\n          <ion-row>\r\n            <ion-col size=\"3\"></ion-col>\r\n            <ion-col size=\"9\" class=\"content-center-left\">\r\n              <ion-item class=\"full-width margin-left\"\r\n                        lines=\"none\">\r\n                  <ion-label class=\"no-margin-vertical\">{{ 'group-create.lbl-select-all' | translate }}</ion-label>\r\n                  <ion-checkbox slot=\"start\" \r\n                                [(ngModel)]=\"selectAllChecked\"\r\n                                class=\"no-margin-vertical content-center\"\r\n                                (click)=\"checkAllClick()\"></ion-checkbox>\r\n                </ion-item>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Select List-->\r\n          <ion-row>\r\n            <ion-col size=\"3\">\r\n              <ion-label class=\"font-medium\">{{ 'group-create.lbl-tasks' | translate }}</ion-label>\r\n            </ion-col>\r\n            <ion-col size=\"9\">\r\n              <ion-list class=\"max-height-fixed percent-width bordered\">\r\n                <ion-item *ngFor=\"let task of selectableTasks\"\r\n                          class=\"full-width\"\r\n                          lines=\"none\">\r\n                  <ion-label class=\"no-margin-vertical\">{{ task.Name }}</ion-label>\r\n                  <ion-checkbox slot=\"start\" \r\n                                [(ngModel)]=\"task.isChecked\"\r\n                                class=\"no-margin-vertical content-center\"></ion-checkbox>\r\n                </ion-item>\r\n              </ion-list>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Delete Button -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-button (click)=\"btnDeleteClick()\"\r\n                          color=\"danger\"\r\n                          size=\"small\">\r\n                <div class=\"content-center-evenly full-size\">\r\n                  <ion-icon name=\"trash-outline\"\r\n                            color=\"light\"></ion-icon>\r\n                  <ion-label class=\"color-white\">{{ 'edit-task.btn-delete' | translate }}</ion-label>\r\n                </div>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-card-content>\r\n</ion-card>\r\n");

/***/ }),

/***/ 23033:
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/group-list/group-list.component.html ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height modal-card\"\r\n          color=\"light\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col>\r\n          <h2>{{ 'group-list.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n        <!--Add Group \"+\" Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button class=\"add-task-button\" \r\n                      (click)=\"addGroupButtonClick()\" \r\n                      color=\"dark\">+</ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n    \r\n  <!-- Scrollable Body -->\r\n  <ion-card-content class=\"bordered scrollable full-height\">\r\n    <ion-card *ngFor=\"let group of calendarTaskService.allGroups\"\r\n              [hidden]=\"group.Void === true\"\r\n              color=\"dark\"\r\n              class=\"content-center\"\r\n              (click)=\"btnGroupHeaderClick(group)\" tappable>\r\n      <ion-card-header>\r\n        <ion-label>\r\n          <ion-title class=\"text-center color-light\">{{ group.Name }} ({{ group.Tasks.length }})</ion-title>\r\n        </ion-label>\r\n      </ion-card-header>\r\n    </ion-card>\r\n  </ion-card-content>\r\n</ion-card>\r\n");

/***/ }),

/***/ 15617:
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/group-popover/group-popover.component.html ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("\r\n<ion-grid>\r\n  <!--Create Task-->\r\n  <ion-row>\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnCreateTaskClick()\"\r\n                  color=\"dark\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"add-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'group-popover.btn-add-task' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Edit Group-->\r\n  <ion-row>\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnEditGroupClick()\"\r\n                  color=\"dark\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"create-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'group-popover.btn-edit-group' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Skip All-->\r\n  <ion-row [hidden]=\"!skipAllBtnShown\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnSkipAllClick()\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"close-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'group-popover.btn-skip-all' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Postpone All-->\r\n  <ion-row [hidden]=\"!postponeAllBtnShown\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnPostponeAllClick()\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"arrow-redo-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'group-popover.btn-postpone-all' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>\r\n");

/***/ }),

/***/ 71081:
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/login/login.component.html ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-grid class=\"content-center\">\r\n  <ion-row>\r\n    <ion-col>\r\n      <ion-card [hidden]=\"!showLogin\" color=\"light\">\r\n        <ion-card-header class=\"content-center\">\r\n          <h2>{{ 'login.lbl-title' | translate }}</h2>\r\n        </ion-card-header>\r\n      \r\n        <ion-card-content>\r\n          <firebase-ui\r\n            (signInSuccessWithAuthResult)=\"successCallback($event)\"\r\n            (signInFailure)=\"errorCallback($event)\"></firebase-ui>\r\n        </ion-card-content>\r\n      </ion-card>\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>\r\n");

/***/ }),

/***/ 31947:
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/note-list/note-list.component.html ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height\"\r\n          color=\"light\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header color=\"light\">\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col>\r\n          <h2>{{ 'note-list.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n        <!--Potential future \"+\" Button-->\r\n        <ion-col size=\"3\">\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Filters-->\r\n      <ion-row class=\"bordered background-white\">\r\n        <ion-col>\r\n          <ion-grid>\r\n            <!--Title-->\r\n            <!--ion-row>\r\n              <ion-col>\r\n                <h2>{{ 'note-list.lbl-filters' | translate }}</h2>\r\n              </ion-col>\r\n            </ion-row-->\r\n            <ion-row>\r\n              <!--Start Date label-->\r\n              <ion-col size=\"3\">\r\n                <ion-label>{{ 'note-list.lbl-start-date' | translate }}</ion-label>\r\n              </ion-col>\r\n              <!--Start Date Button-->\r\n              <ion-col>\r\n                <ion-button size=\"small\"\r\n                            class=\"no-margin-vertical\">{{ startDateText }}</ion-button>\r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row>\r\n              <!--End Date label-->\r\n              <ion-col size=\"3\">\r\n                <ion-label>{{ 'note-list.lbl-end-date' | translate }}</ion-label>\r\n              </ion-col>\r\n              <!--End Date Button-->\r\n              <ion-col>\r\n                <ion-button size=\"small\"\r\n                            class=\"no-margin-vertical\">{{ endDateText }}</ion-button>\r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row>\r\n              <!--Keyword label-->\r\n              <ion-col size=\"3\">\r\n                <ion-label>{{ 'note-list.lbl-keyword' | translate }}</ion-label>\r\n              </ion-col>\r\n              <!--Keyword textbox-->\r\n              <ion-col>\r\n                <ion-input class=\"no-margin-vertical bordered percent-width\"\r\n                           [(ngModel)]=\"keywordSearch\"\r\n                           (ionChange)=\"keywordChanged()\"></ion-input>\r\n              </ion-col>\r\n            </ion-row>\r\n            <!--Task Filters-->\r\n            <ion-row>\r\n              <ion-col size=\"3\">\r\n                <ion-label>{{ 'note-list.lbl-tasks' | translate }}</ion-label>\r\n              </ion-col>\r\n              <ion-col>\r\n                <ion-list class=\"max-height-fixed percent-width bordered\">\r\n                  <ion-item *ngFor=\"let taskFilter of taskFilters\"\r\n                            class=\"full-width\"\r\n                            lines=\"none\">\r\n                    <ion-label class=\"no-margin-vertical\">{{ taskFilter.Name }}</ion-label>\r\n                    <ion-checkbox slot=\"start\" \r\n                                  [(ngModel)]=\"taskFilter.isChecked\"\r\n                                  class=\"no-margin-vertical content-center\"\r\n                                  (ionChange)=\"checkboxChanged()\"></ion-checkbox>\r\n                  </ion-item>\r\n                </ion-list>\r\n              </ion-col>\r\n            </ion-row>\r\n          </ion-grid>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n    \r\n  <!-- Scrollable Body -->\r\n  <ion-card-content class=\"bordered scrollable full-height background-white\">\r\n    <!--History Card-->\r\n    <ion-grid *ngFor=\"let note of filteredNotes\"\r\n              class=\"bordered note-padding\">\r\n      <!--Line1-->\r\n      <ion-row>\r\n        <!--Task Name-->\r\n        <ion-col size=\"4\">\r\n          <ion-label>{{ note.taskName }}</ion-label>\r\n        </ion-col>\r\n        <!--Date-->\r\n        <ion-col size=\"4\">\r\n          <ion-label>{{ note.dateText }}</ion-label>\r\n        </ion-col>\r\n        <!--Empty column-->\r\n        <ion-col size=\"1\"></ion-col>\r\n        <!--Task Result-->\r\n        <ion-col class=\"bordered\">\r\n          <ion-icon *ngIf=\"note.showCheckedBox\"\r\n                    name=\"checkbox\" \r\n                    class=\"zoom\"></ion-icon>\r\n          <ion-label *ngIf=\"note.showText\"\r\n                    style=\"margin:auto;\" \r\n                    class=\"font-small\">{{ note.result }}</ion-label>\r\n          <!--Task Skipped (Displayed if skipped)-->\r\n          <ion-icon *ngIf=\"note.showBrokenHeart\"\r\n                    class=\"content-center zoom\"\r\n                    name=\"close-outline\"></ion-icon>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Comment-->\r\n      <ion-row>\r\n        <ion-col size=\"10\"\r\n                 class=\"content-center-left bordered\"\r\n                 (click)=\"textClick(note)\" tappable>\r\n          <ion-text class=\"text-align-left\">{{ note.text }}</ion-text>\r\n        </ion-col>\r\n        <ion-col size=\"1\"\r\n                 class=\"bordered\"\r\n                 (click)=\"btnDeleteCommentClick(note)\" tappable>\r\n          <ion-icon name=\"trash-outline\"></ion-icon>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Buttons-->\r\n      <ion-row *ngIf=\"false\"\r\n               class=\"bordered\">\r\n        <!--Edit-->\r\n        <ion-col>\r\n          <ion-button size=\"small\"\r\n                      color=\"dark\">{{ 'note-list.btn-edit' | translate }}</ion-button>\r\n        </ion-col>\r\n        <!--Delete-->\r\n        <ion-col>\r\n          <ion-button size=\"small\"\r\n                      color=\"danger\">{{ 'note-list.btn-delete' | translate }}</ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 18204:
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/privacy/privacy.component.html ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"6\">\r\n          <h2>{{ 'privacy.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <ion-card-content>\r\n    <ion-grid>\r\n      <!--Data What is collected-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'privacy.lbl-question-what-collect' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-answer-email' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-answer-tasks' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-answer-errors' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Data What is shared-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'privacy.lbl-question-what-share' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-answer-what-share' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Data Where-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'privacy.lbl-question-where' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-answer-where' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Data Protection-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'privacy.lbl-question-protected' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-answer-protected' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Data Access-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'privacy.lbl-question-access' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-answer-access' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Accept-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'privacy.lbl-question-accept' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-answer-accept' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Last Update-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'privacy.lbl-last-update' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 36979:
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/send-feedback/send-feedback.component.html ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card>\r\n  <!--Title-->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\"\r\n                 class=\"content-center\">\r\n          <ion-button (click)=\"btnCancelClick()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"6\"\r\n                 class=\"content-center\">\r\n          <h2 class=\"text-wrap text-center\">{{ 'send-feedback.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <ion-card-content>\r\n    <ion-grid>\r\n      <!--Feedback Type-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-segment (ionChange)=\"feedbackTypeChanged($event)\"\r\n                      value=\"feedback\">\r\n            <ion-segment-button value=\"feedback\">\r\n              <ion-label class=\"text-wrap\">{{ 'send-feedback.radio-feedback' | translate }}</ion-label>\r\n            </ion-segment-button>\r\n            <ion-segment-button value=\"bug\">\r\n              <ion-label class=\"text-wrap\">{{ 'send-feedback.radio-bug' | translate }}</ion-label>\r\n            </ion-segment-button>\r\n            <ion-segment-button value=\"support\">\r\n              <ion-label class=\"text-wrap\">{{ 'send-feedback.radio-support' | translate }}</ion-label>\r\n            </ion-segment-button>\r\n          </ion-segment>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Bugs-->\r\n      <ion-row [hidden]=\"!showBugsTab\" \r\n               class=\"grey-box padding-5\">\r\n        <ion-col>\r\n          <ion-grid>\r\n            <!--Bug explanation-->\r\n            <ion-row>\r\n              <ion-col>\r\n                <ion-label>{{ 'send-feedback.lbl-bug-explanation' | translate }}</ion-label>\r\n              </ion-col>\r\n            </ion-row>\r\n            <!--Bug report title-->\r\n            <ion-row>\r\n              <ion-col>\r\n                <ion-grid class=\"grey-box\">\r\n                  <!--Title-->\r\n                  <ion-row>\r\n                    <ion-col>\r\n                      <ion-input placeholder=\"Enter your title here\"\r\n                                 [(ngModel)]=\"bugReport.Title\"\r\n                                 required=\"true\"\r\n                                 autofocus=\"true\"\r\n                                 maxlength=\"200\"></ion-input>\r\n                    </ion-col>\r\n                  </ion-row>\r\n                  <!--Description-->\r\n                  <ion-row>\r\n                    <ion-col>\r\n                      <ion-input placeholder=\"Enter your description here\"\r\n                                 [(ngModel)]=\"bugReport.Description\"\r\n                                 maxlength=\"20000\"></ion-input>\r\n                    </ion-col>\r\n                  </ion-row>\r\n                </ion-grid>\r\n              </ion-col>\r\n            </ion-row>\r\n            <!--ion-row>\r\n              <ion-col class=\"content-center\">\r\n                <ion-button>{{ 'send-feedback.upload-screenshot' | translate }}</ion-button>\r\n              </ion-col>\r\n            </ion-row-->\r\n            <ion-row>\r\n              <ion-col class=\"content-center\">\r\n                <ion-button (click)=\"btnSendClick()\">{{ 'send-feedback.btn-send' | translate }}</ion-button>\r\n              </ion-col>\r\n            </ion-row>\r\n          </ion-grid>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Survey-->\r\n      <ion-row [hidden]=\"!showSurveyTab\"\r\n               class=\"grey-box padding-5\">\r\n        <ion-col>\r\n          <ion-grid>\r\n            <!--Survey explanation-->\r\n            <ion-row>\r\n              <ion-col>\r\n                <ion-label>{{ 'send-feedback.lbl-survey' | translate }}</ion-label>\r\n              </ion-col>\r\n            </ion-row>\r\n            <!--Survey link-->\r\n            <ion-row>\r\n              <ion-col class=\"content-center\">\r\n                <ion-button (click)=\"btnSurveyClick()\">{{ 'send-feedback.btn-survey' | translate }}</ion-button>\r\n              </ion-col>\r\n            </ion-row>\r\n          </ion-grid>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Support-->\r\n      <ion-row [hidden]=\"!showSupportTab\"\r\n               class=\"grey-box padding-5\">\r\n        <ion-col>\r\n          <ion-grid>\r\n            <!--Emails-->\r\n            <ion-row>\r\n              <ion-col>\r\n                <ion-label>{{ 'send-feedback.lbl-support' | translate }}</ion-label>\r\n                <!--ion-label>Click the button below to start a chat conversation for support! Thank you for your patience, support is not 24/7, but we will get back to you as soon as possible.</ion-label-->\r\n              </ion-col>\r\n            </ion-row>\r\n            <!--Survey link-->\r\n            <ion-row>\r\n              <ion-col class=\"content-center\">\r\n                <ion-button (click)=\"btnSupportClick()\">{{ 'send-feedback.btn-support' | translate }}</ion-button>\r\n              </ion-col>\r\n            </ion-row>\r\n          </ion-grid>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 27919:
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/side-menu/side-menu.component.html ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-menu contentId=\"main-content\" \r\n          side=\"start\">\r\n  <!--Header-->\r\n  <ion-header>\r\n    <ion-toolbar color=\"dark\">\r\n      <ion-grid>\r\n        <ion-row class=\"content-center\">\r\n          <ion-col size=\"3\">\r\n            <!--ion-img [src]=\"assets/img/round.png\"></ion-img-->\r\n          </ion-col>\r\n          <!--Title-->\r\n          <ion-col size=\"6\" class=\"content-center\">\r\n              <ion-title>\r\n                <ion-label color=\"light\">{{ 'menu.lbl-title' | translate }}</ion-label>\r\n              </ion-title>\r\n          </ion-col>\r\n          <!--Close menu button-->\r\n          <ion-col size=\"3\">\r\n            <ion-button (click)=\"btnCloseMenuClick()\"\r\n                        color=\"primary\">\r\n              <ion-icon name=\"close\"\r\n                        color=\"light\"></ion-icon>\r\n            </ion-button>\r\n          </ion-col>\r\n        </ion-row>\r\n      </ion-grid>\r\n    </ion-toolbar>\r\n  </ion-header>\r\n\r\n  <!--Body-->\r\n  <ion-content>\r\n    <ion-list>\r\n      <!--Reload from server-->\r\n      <ion-item [hidden]=\"!showRefresh || !showDevMode\"\r\n                (click)=\"btnReloadFromServerClick()\"\r\n                tappable\r\n                lines=\"none\">\r\n        <ion-icon name=\"cloud-download-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-reload-from-server' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Send data to server-->\r\n      <ion-item [hidden]=\"!showRefresh || !showDevMode\"\r\n                (click)=\"btnSendDataToServerClick()\"\r\n                tappable\r\n                lines=\"none\">\r\n        <ion-icon name=\"cloud-upload-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-send-to-server' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Resume event-->\r\n      <!--ion-item [hidden]=\"!showRefresh || !showDevMode\"\r\n                (click)=\"btnResumeClick()\"\r\n                lines=\"none\">\r\n        <ion-icon name=\"cloud-download-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>Resume</ion-label>\r\n      </ion-item-->\r\n      <!--User Settings-->\r\n      <ion-item (click)=\"btnUserSettingsClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"settings-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-user-settings' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Task Groups-->\r\n      <ion-item (click)=\"btnTaskGroupsClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"layers-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-groups' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Notes-->\r\n      <ion-item (click)=\"btnNoteClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"pencil-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-notes' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Achievements-->\r\n      <!--ion-item lines=\"none\">\r\n        <ion-icon name=\"trophy-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-achievements' | translate }}</ion-label>\r\n      </ion-item-->\r\n      <!--Select new tasks-->\r\n      <ion-item (click)=\"btnSelectNewTasksClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"library-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-select-new-tasks' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Check for update-->\r\n      <ion-item *ngIf=\"showCheckForUpdateBtn\"\r\n                (click)=\"btnCheckForUpdateClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"cloud-download-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-check-for-update' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Send Feedback-->\r\n      <ion-item (click)=\"btnBugReportClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"chatbubble-ellipses-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-send-feedback' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--View changelog-->\r\n      <ion-item *ngIf=\"showViewChangelogBtn\"\r\n            (click)=\"btnChangeLogClick()\"\r\n            lines=\"none\"\r\n            tappable>\r\n        <ion-icon name=\"list-outline\" \r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-view-changelog' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Walkthrough-->\r\n      <ion-item (click)=\"btnWalkthroughClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"school-outline\" \r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-walkthrough' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Privacy-->\r\n      <ion-item (click)=\"btnPrivacyClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"cloud-upload-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-privacy' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Terms and conditions-->\r\n      <ion-item (click)=\"btnTermsClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"document-text-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-terms-and-conditions' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Delete local database-->\r\n      <ion-item [hidden]=\"!showDevMode\"\r\n                (click)=\"btnResetLocalDatabase()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"trash-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-reset-local-database' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Calendar-->\r\n      <!--ion-item *ngIf=\"showDevMode\"\r\n                (click)=\"btnCalendarClick()\"\r\n                lines=\"none\">\r\n        <ion-icon name=\"calendar-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-calendar' | translate }}</ion-label>\r\n      </ion-item-->\r\n      <!--Show Unsynced Data-->\r\n      <ion-item *ngIf=\"showDevMode\"\r\n                (click)=\"btnShowUnsyncedData()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"sync-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-show-unsynced-data' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Show Debug Logs-->\r\n      <ion-item [hidden]=\"!showDevMode\"\r\n                (click)=\"btnShowDebugLogs()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"document-text-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-show-logs' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Road Map-->\r\n      <!--ion-item lines=\"none\">\r\n        <ion-icon name=\"map-outline\"\r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-road-map' | translate }}</ion-label>\r\n      </ion-item-->\r\n      <!--Logout-->\r\n      <ion-item (click)=\"btnLogoutClick()\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-icon name=\"exit-outline\" \r\n                  slot=\"start\"></ion-icon>\r\n        <ion-label>{{ 'menu.btn-logout' | translate }}</ion-label>\r\n      </ion-item>\r\n      <!--Version-->\r\n      <ion-item class=\"content-center\" \r\n                lines=\"none\"\r\n                tappable>\r\n          <ion-label>{{ 'menu.lbl-version' | translate }} : {{ appVersionText }}</ion-label>\r\n      </ion-item>\r\n      <!--Files To Transfer-->\r\n      <ion-item *ngIf=\"showDevMode\"\r\n                class=\"content-center\"\r\n                lines=\"none\"\r\n                tappable>\r\n        <ion-label>Dev mode</ion-label>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-content>\r\n</ion-menu>");

/***/ }),

/***/ 11265:
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/skips-popover/skips-popover.component.html ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("\r\n<ion-grid>\r\n  <ion-row>\r\n    <ion-col>\r\n      <ion-text>{{ 'skips-popover.msg-top' | translate: {x: daysInARow} }}</ion-text>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Skip-->\r\n  <ion-row>\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnYesClick()\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"cancel-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'skips-popover.btn-yes' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Postpone-->\r\n  <ion-row>\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnPostponeClick()\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"arrow-redo-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'skips-popover.btn-postpone' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Delete-->\r\n  <ion-row>\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnDeleteClick()\"\r\n                  color=\"danger\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"trash-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'skips-popover.btn-delete' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n  <!--Enable notifications-->\r\n  <!--ion-row [hidden]=\"currentTask.NotificationId > 0\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnEnableNotificationsClick()\"\r\n                  color=\"dark\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"notifications-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'skips-popover.btn-enable-notifications' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row-->\r\n  <!--Cancel (Do nothing)-->\r\n  <ion-row>\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnCancelClick()\"\r\n                  color=\"dark\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"cancel-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'skips-popover.btn-cancel' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>\r\n");

/***/ }),

/***/ 50740:
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/task-create/task-create.component.html ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height\"\r\n          color=\"light\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"6\">\r\n          <ion-label color=\"dark\">\r\n            <ion-title>{{ 'create-task.lbl-title' | translate }}</ion-title>\r\n          </ion-label>\r\n        </ion-col>\r\n        <!--Save Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"btnSaveClick()\"\r\n                      color=\"success\">\r\n            <ion-icon name=\"save-outline\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <!-- Scrollable Body -->\r\n  <ion-card-content>\r\n    <ion-list>\r\n      <!--Name-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'create-task.lbl-task-name' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-input fullWidth \r\n                         fieldSize=\"large\" \r\n                         [(ngModel)]=\"currentTask.Name\" \r\n                         maxlength=\"200\"\r\n                         required=\"true\"\r\n                         #taskName>\r\n              </ion-input>              \r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Scheduling -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'create-task.lbl-schedule' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Recurring vs Once-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-segment (ionChange)=\"recurringChanged($event, null)\"\r\n                           [(ngModel)]=\"recurringValue\">\r\n                <ion-segment-button value=\"Recurring\">\r\n                  <ion-label class=\"text-wrap\">{{ 'create-task.radio-recurring' | translate }}</ion-label>\r\n                </ion-segment-button>\r\n                <ion-segment-button value=\"Once\">\r\n                  <ion-label class=\"text-wrap\">{{ 'create-task.radio-once' | translate }}</ion-label>\r\n                </ion-segment-button>\r\n              </ion-segment>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Single Date vs Until Done-->\r\n          <ion-row [hidden]=\"!showSingleDay\">\r\n            <ion-col class=\"grey-box\">\r\n              <ion-radio-group (ionChange)=\"singleDateChanged($event)\"\r\n                               value=\"UntilDone\">\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap\">{{ 'create-task.radio-until-done' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\"  value=\"UntilDone\"></ion-radio>\r\n                </ion-item>\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap\">{{ 'create-task.radio-chosen-day' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\" value=\"ChosenDayOnly\"></ion-radio>\r\n                </ion-item>\r\n              </ion-radio-group>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Assigned Date-->\r\n          <ion-row [hidden]=\"!showAssignedDate\"\r\n                   class=\"grey-box\">\r\n            <ion-col>\r\n              <ion-grid>\r\n                <!--Title + Date Value-->\r\n                <ion-row>\r\n                  <ion-col>\r\n                    <ng-container class=\"content-center\">\r\n                      <ion-label>{{ 'create-task.lbl-task-date' | translate }} : {{ currentAssignedDateString }}</ion-label>\r\n                    </ng-container>\r\n                  </ion-col>\r\n                </ion-row>\r\n                <!--Edit date button-->\r\n                <ion-row [hidden]=\"!showAssignedDate\">\r\n                  <ion-col class=\"content-center\">\r\n                    <ion-button (click)=\"btnAssignedDateClick()\">                \r\n                      <div class=\"content-center-evenly full-size\">\r\n                        <ion-icon name=\"create-outline\"\r\n                                  color=\"light\"></ion-icon>\r\n                        <ion-label class=\"color-white\">{{ 'edit-task.btn-edit-group' | translate }}</ion-label>\r\n                      </div>\r\n                    </ion-button>\r\n                    <!--Set value to tomorrow-->\r\n                    <ion-button [hidden]=\"!showSetToTomorrow\"\r\n                                (click)=\"btnSetToTomorrow()\">{{ 'edit-task.btn-set-to-tomorrow' | translate }}</ion-button>\r\n                  </ion-col>\r\n                </ion-row>\r\n              </ion-grid>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!-- Required Days -->\r\n          <ion-row [hidden]=\"!showRequiredDays\"\r\n                   class=\"grey-box\">\r\n            <ion-col>\r\n              <ion-grid>\r\n                <ion-row>\r\n                  <ion-col>\r\n                    <ion-label>{{ 'create-task.lbl-required-days' | translate }}</ion-label>\r\n                  </ion-col>\r\n                </ion-row> \r\n                <ion-row [hidden]=\"!showRequiredDays\" \r\n                          class=\"margin-bottom\">\r\n                  <ion-col *ngFor=\"let day of daysOfWeek\" \r\n                            class=\"column\">\r\n                    <ion-label class=\"no-margin-vertical\">{{ day | formatDayOfWeekAbbrPipe }}</ion-label>\r\n                    <ion-checkbox (ionChange)=\"cbDayOfWeek($event, day)\" \r\n                                  [checked]=\"true\"\r\n                                  class=\"no-margin\"></ion-checkbox>\r\n                  </ion-col>\r\n                </ion-row>\r\n              </ion-grid>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!-- Every x week -->\r\n          <!--ion-row [hidden]=\"!showRequiredDays\"\r\n                   class=\"grey-box\">\r\n            <ion-col>\r\n              <ion-grid>\r\n                <ion-row>\r\n                  <ion-col size=\"2\"></ion-col>\r\n                  <ion-col>\r\n                    <ion-label>Every </ion-label>\r\n                  </ion-col>\r\n                  <ion-col>\r\n                    <ion-button>1</ion-button>\r\n                  </ion-col>\r\n                  <ion-col>\r\n                    <ion-button>Week</ion-button>\r\n                  </ion-col>\r\n                  <ion-col size=\"2\"></ion-col>\r\n                </ion-row> \r\n              </ion-grid>\r\n            </ion-col>\r\n          </ion-row-->\r\n          <!--Start Date-->\r\n          <!--ion-row [hidden]=\"showAssignedDate\"\r\n                   class=\"grey-box\">\r\n            <ion-col>\r\n              <ion-grid>\r\n                <ion-row>\r\n                  <Date Value>\r\n                  <ion-col size=\"9\">\r\n                    <ion-label>{{ 'create-task.lbl-task-start-date' | translate }} : {{ currentAssignedDateString }}</ion-label>\r\n                  </ion-col>\r\n                  <Edit Button>\r\n                  <ion-col class=\"content-center\">\r\n                    <ion-button (click)=\"btnAssignedDateClick()\">                \r\n                      <ion-icon name=\"create-outline\"\r\n                                color=\"light\"></ion-icon>\r\n                    </ion-button>\r\n                  </ion-col>\r\n                </ion-row>\r\n              </ion-grid>\r\n            </ion-col>\r\n          </ion-row-->\r\n          <!--Keep appearing if skipped-->\r\n          <!--ion-row [hidden]=\"showAssignedDate\"\r\n                   class=\"grey-box\">\r\n            <ion-col size=\"9\">\r\n              <ion-label>Keep appearing if skipped</ion-label>\r\n            </ion-col>\r\n            <ion-col>\r\n              <ion-toggle></ion-toggle>\r\n            </ion-col>\r\n          </ion-row-->\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Result Type -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'create-task.lbl-result-type' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col>\r\n              <ion-label>{{ selectedResultTypeCaption }}</ion-label>\r\n            </ion-col>\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"selectResultType()\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"\r\n                          size=\"small\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Group-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-label>{{ 'create-task.lbl-group' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Current Group-->\r\n          <ion-row>\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col>\r\n              <ion-label *ngIf=\"selectedGroup != null\"\r\n                         class=\"text-wrap\">{{ selectedGroup.Name }}</ion-label>\r\n            </ion-col>\r\n            <!--Edit Group-->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"selectGroup()\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"\r\n                          size=\"small\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Position -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-label>{{ 'create-task.lbl-position' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--First-->\r\n          <ion-row *ngIf=\"selectedAfterTask == null\">\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col>\r\n              <ion-label>{{ 'edit-task.lbl-first' | translate }}</ion-label>\r\n            </ion-col>\r\n            <!--Edit Button-->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"selectPosition()\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--After First-->\r\n          <ion-row *ngIf=\"selectedAfterTask != null\">\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col size=\"8\">\r\n              <ion-label class=\"text-wrap\">{{ 'edit-task.lbl-after' | translate }} : {{ selectedAfterTask.Name }}</ion-label>\r\n            </ion-col>\r\n            <!--Edit Button-->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"selectPosition()\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Notifications-->\r\n      <ion-item lines=\"none\"\r\n                class=\"black-box\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'user-settings.lbl-notifications' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Inactivity Notification-->\r\n          <ion-row>\r\n            <!--Description-->\r\n            <ion-col size=\"9\">\r\n              <ion-text class=\"small-font margin-left\">{{ 'user-settings.lbl-inactivity-reminder-description' | translate }}</ion-text>\r\n            </ion-col>\r\n            <!--Toggle-->\r\n            <ion-col size=\"3\">\r\n              <ion-toggle [(ngModel)]=\"notificationEnabled\"\r\n                          class=\"hidden-overflow\">\r\n              </ion-toggle>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Hour-->\r\n          <ion-row [hidden]=\"!notificationEnabled\">\r\n            <ion-col>\r\n              <ion-button (click)=\"btnNotificationEnterTimeClick()\">{{ notificationTimeValue }}</ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 46251:
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/task-edit/task-edit.component.html ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height\"\r\n          color=\"light\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"6\">\r\n          <ion-label color=\"dark\">\r\n            <ion-title>\r\n              {{ 'edit-task.lbl-title' | translate }}\r\n            </ion-title>\r\n          </ion-label>\r\n        </ion-col>\r\n        <!--Save Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"btnSaveClick()\"\r\n                      color=\"success\">\r\n            <ion-icon name=\"save-outline\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <!-- Scrollable Body -->\r\n  <ion-card-content>\r\n    <ion-list>\r\n      <!--Task Name-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'edit-task.lbl-task-name' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-input fullWidth \r\n                         fieldSize=\"large\" \r\n                         [(ngModel)]=\"currentTask.Name\" \r\n                         maxlength=\"200\"\r\n                         required=\"true\">\r\n              </ion-input>              \r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Scheduling -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'edit-task.lbl-schedule' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Recurring vs Once-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-segment value=\"{{recurringValue}}\"\r\n                           (ionChange)=\"recurringChanged($event)\">\r\n                <ion-segment-button value=\"Recurring\">\r\n                  <ion-label class=\"text-wrap\">{{ 'create-task.radio-recurring' | translate }}</ion-label>\r\n                </ion-segment-button>\r\n                <ion-segment-button value=\"Once\">\r\n                  <ion-label class=\"text-wrap\">{{ 'create-task.radio-once' | translate }}</ion-label>\r\n                </ion-segment-button>\r\n              </ion-segment>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Single Date vs Until Done-->\r\n          <ion-row [hidden]=\"!showSingleDay\">\r\n            <ion-col class=\"grey-box\">\r\n              <ion-radio-group (ionChange)=\"singleDateChanged($event)\"\r\n                               [(ngModel)]=\"untilDoneCurrentValue\">\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap\">{{ 'create-task.radio-until-done' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\"  value=\"UntilDone\"></ion-radio>\r\n                </ion-item>\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap\">{{ 'create-task.radio-chosen-day' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\" value=\"ChosenDayOnly\"></ion-radio>\r\n                </ion-item>\r\n              </ion-radio-group>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Assigned Date-->\r\n          <ion-row [hidden]=\"!showAssignedDate\"\r\n                   class=\"grey-box\">\r\n            <ion-col>\r\n              <ion-grid>\r\n                <!--Title + Date Value-->\r\n                <ion-row>\r\n                  <ion-col>\r\n                    <ng-container class=\"content-center\">\r\n                      <ion-label>{{ 'create-task.lbl-task-date' | translate }} : {{ currentAssignedDateString }}</ion-label>\r\n                    </ng-container>\r\n                  </ion-col>\r\n                </ion-row>\r\n                <!--Edit date button-->\r\n                <ion-row [hidden]=\"!showAssignedDate\">\r\n                  <ion-col class=\"content-center\">\r\n                    <ion-button (click)=\"btnAssignedDateClick()\">                \r\n                      <div class=\"content-center-evenly full-size\">\r\n                        <ion-icon name=\"create-outline\"\r\n                                  color=\"light\"></ion-icon>\r\n                        <ion-label class=\"color-white\">{{ 'edit-task.btn-edit-group' | translate }}</ion-label>\r\n                      </div>\r\n                    </ion-button>\r\n                  </ion-col>\r\n                </ion-row>\r\n              </ion-grid>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!-- Required Days -->\r\n          <ion-row [hidden]=\"!showRequiredDays\"\r\n                   class=\"grey-box\">\r\n            <ion-col>\r\n              <ion-grid>\r\n                <ion-row>\r\n                  <ion-col>\r\n                    <ion-label>{{ 'edit-task.lbl-required-days' | translate }}</ion-label>\r\n                  </ion-col>\r\n                </ion-row> \r\n                <ion-row [hidden]=\"!showRequiredDays\" \r\n                          class=\"margin-bottom\">\r\n                  <ion-col *ngFor=\"let day of daysOfWeek\" \r\n                            class=\"column\">\r\n                    <ion-label class=\"no-margin-vertical\">{{ day | formatDayOfWeekAbbrPipe }}</ion-label>\r\n                    <ion-checkbox (ionChange)=\"cbDayOfWeek($event, day)\" \r\n                                  [checked]=\"getCbDayOfWeekValue(day)\"\r\n                                  class=\"no-margin\"></ion-checkbox>\r\n                  </ion-col>\r\n                </ion-row>\r\n              </ion-grid>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Result Type -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'edit-task.lbl-result-type' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col>\r\n              <ion-label>{{ selectedResultTypeCaption }}</ion-label>\r\n            </ion-col>\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"selectResultType()\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"\r\n                          size=\"small\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Group-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-label>{{ 'create-task.lbl-group' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Current Group-->\r\n          <ion-row>\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col>\r\n              <ion-label *ngIf=\"selectedGroup != null\"\r\n                         class=\"text-wrap\">{{ selectedGroup.Name }}</ion-label>\r\n            </ion-col>\r\n            <!--Edit Group-->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"selectGroup()\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"\r\n                          size=\"small\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Position -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-label>{{ 'create-task.lbl-position' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--First-->\r\n          <ion-row *ngIf=\"selectedAfterTask == null\">\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col>\r\n              <ion-label>{{ 'edit-task.lbl-first' | translate }}</ion-label>\r\n            </ion-col>\r\n            <!--Edit Button-->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"selectPosition()\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--After First-->\r\n          <ion-row *ngIf=\"selectedAfterTask != null\">\r\n            <ion-col size=\"2\"></ion-col>\r\n            <ion-col size=\"8\">\r\n              <ion-label class=\"text-wrap\">{{ 'edit-task.lbl-after' | translate }} : {{ selectedAfterTask.Name }}</ion-label>\r\n            </ion-col>\r\n            <!--Edit Button-->\r\n            <ion-col size=\"2\">\r\n              <ion-button (click)=\"selectPosition()\">\r\n                <ion-icon name=\"create-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Notifications-->\r\n      <ion-item lines=\"none\"\r\n                class=\"black-box\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'user-settings.lbl-notifications' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Inactivity Notification-->\r\n          <ion-row>\r\n            <!--Description-->\r\n            <ion-col size=\"9\">\r\n              <ion-text class=\"small-font margin-left\">{{ 'user-settings.lbl-inactivity-reminder-description' | translate }}</ion-text>\r\n            </ion-col>\r\n            <!--Toggle-->\r\n            <ion-col size=\"3\">\r\n              <ion-toggle [(ngModel)]=\"notificationEnabled\"\r\n                          class=\"hidden-overflow\">\r\n              </ion-toggle>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Hour-->\r\n          <ion-row [hidden]=\"!notificationEnabled\">\r\n            <ion-col>\r\n              <ion-button (click)=\"btnNotificationEnterTimeClick()\">{{ notificationTimeValue }}</ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!-- Delete Button -->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-button (click)=\"btnDeleteClick()\"\r\n                          color=\"danger\">\r\n                <div class=\"content-center-evenly full-size\">\r\n                  <ion-icon name=\"trash-outline\"\r\n                            color=\"light\"></ion-icon>\r\n                  <ion-label class=\"color-white\">{{ 'edit-task.btn-delete' | translate }}</ion-label>\r\n                </div>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 146:
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/task-list-popover/task-list-popover.component.html ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("\r\n<ion-grid>\r\n  <!--Skip All-->\r\n  <ion-row [hidden]=\"!skipAllBtnShown\">\r\n    <ion-col class=\"content-center\">\r\n      <ion-button (click)=\"btnSkipAllClick()\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  class=\"flex-item\">\r\n        <div class=\"content-center-evenly full-size\">\r\n          <ion-icon name=\"close-outline\"\r\n                    class=\"color-white\"></ion-icon>\r\n          <ion-label class=\"color-white\">{{ 'group-popover.btn-skip-all' | translate }}</ion-label>\r\n        </div>\r\n      </ion-button>\r\n    </ion-col>\r\n  </ion-row>\r\n</ion-grid>\r\n");

/***/ }),

/***/ 98543:
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/task-list/task-list.component.html ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<!--Fixed Header-->\r\n<ion-header>\r\n  <ion-toolbar color=\"primary\">\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Menu-->\r\n        <ion-col size=\"3\"\r\n                 id=\"stepMenu\">\r\n          <ion-menu-button autoHide=\"false\" color=\"dark\"></ion-menu-button>\r\n        </ion-col>\r\n        <!--Previous Day Button-->\r\n        <ion-col size=\"1\"\r\n                 id=\"stepChangeDate\">\r\n          <ion-button (click)=\"loadPreviousDay()\" \r\n                      class=\"unzoom\"\r\n                      color=\"light\">\r\n            <ion-icon name=\"arrow-back-outline\" color=\"dark\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"4\"\r\n                 (click)=\"btnCurrentDateClick()\"\r\n                 id=\"stepSelectDate\"\r\n                 tappable>\r\n          <ion-title class=\"text-center\">\r\n            <ion-label color=\"light\">{{ currentDateTitle }}</ion-label>\r\n          </ion-title>\r\n        </ion-col>\r\n        <!--Next Day Button-->\r\n        <ion-col size=\"1\">\r\n          <ion-button (click)=\"loadNextDay()\" \r\n                      class=\"unzoom\"\r\n                      color=\"light\"> \r\n            <ion-icon name=\"arrow-forward-outline\" color=\"dark\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Add Task Button-->\r\n        <ion-col size=\"3\"\r\n                 id=\"stepNewTask\">\r\n          <ion-button class=\"add-task-button\" \r\n                      (click)=\"addTaskButtonClick()\" \r\n                      color=\"dark\">+</ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Progress Bar Text-->\r\n      <ion-row [hidden]=\"showSettings\">\r\n        <ion-col class=\"no-padding\">\r\n          <ion-label class=\"font-small\" color=\"light\">{{ taskService.currentProgressText }}</ion-label>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Progress Bar-->\r\n      <ion-row [hidden]=\"showSettings\"\r\n               class=\"margin-bottom-5\">\r\n        <!--Sync Icon-->\r\n        <ion-col size=\"1\">\r\n          <ion-icon name=\"repeat-outline\"\r\n                    [ngClass]=\"colorString\"\r\n                    [hidden]=\"!devMode\"></ion-icon>\r\n        </ion-col>\r\n        <!--Progress Bar-->\r\n        <ion-col>\r\n          <ion-progress-bar [value]=\"taskService.currentProgressValue\"\r\n                            color=\"light\"></ion-progress-bar>\r\n        </ion-col>\r\n        <!--Popover-->\r\n        <ion-col size=\"1\" id=\"stepPopoverMenu\">\r\n          <ion-icon name=\"ellipsis-vertical-outline\"\r\n                    color=\"dark\"\r\n                    (click)=\"popoverMenuClick($event)\"\r\n                    tappable></ion-icon>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<!--Scrollable Body-->\r\n<ion-content color=\"medium\">\r\n  <!--Group List-->\r\n  <app-group-card *ngFor=\"let group of taskService.allGroups\"\r\n                  [currentGroup]=\"group\"></app-group-card>\r\n</ion-content>\r\n\r\n<!--PRIORITIZE VS EXECUTE (Experiment)-->\r\n<ion-footer>\r\n  <ion-segment [(ngModel)]=\"currentPrioritizeVsExecute\"\r\n               (ionChange)=\"prioritize($event)\"\r\n               id=\"stepPrioritizeExecute\">\r\n    <ion-segment-button value=\"Prioritize\">\r\n      <ion-grid class=\"content-center\">\r\n        <ion-row>\r\n          <ion-col>\r\n            <ion-icon name=\"swap-vertical-outline\" color=\"primary\" class=\"font-large margin-5\"></ion-icon>\r\n          </ion-col>\r\n          <ion-col>\r\n            <ion-label color=\"primary\" class=\"text-wrap font-large\">Prioritize</ion-label>\r\n          </ion-col>\r\n        </ion-row>\r\n      </ion-grid>\r\n    </ion-segment-button>\r\n    <ion-segment-button value=\"Execute\" class=\"content-center\">\r\n      <ion-grid class=\"content-center\">\r\n        <ion-row>\r\n          <ion-col>\r\n            <ion-icon name=\"checkbox-outline\" color=\"success\" class=\"font-large margin-5\"></ion-icon>\r\n          </ion-col>\r\n          <ion-col>\r\n            <ion-label color=\"success\" class=\"text-wrap font-large\">Execute</ion-label>\r\n          </ion-col>\r\n        </ion-row>\r\n      </ion-grid>\r\n    </ion-segment-button>\r\n  </ion-segment>\r\n</ion-footer>");

/***/ }),

/***/ 26763:
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/task-selection-card/task-selection-card.component.html ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card (click)=\"cardClick()\" tappable>\r\n  <ion-grid>\r\n    <ion-row> \r\n      <!-- CheckBox to select task -->\r\n      <ion-col size=\"2\" class=\"content-center\">\r\n        <ion-checkbox [ngModel]=\"taskSelected\"\r\n                      (ionChange)=\"checkChanged()\"></ion-checkbox>\r\n      </ion-col>\r\n      <!-- Task Name -->\r\n      <ion-col class=\"content-center\"\r\n               size=\"10\">       \r\n        <h3 class=\"text-center\">{{ currentTask.Name }}</h3>\r\n      </ion-col>\r\n    </ion-row>\r\n    <ion-row> \r\n      <!-- Description -->\r\n      <ion-col class=\"content-center\"\r\n               size=\"10\"\r\n               offset=\"2\"\r\n               [hidden]=\"!showDescription\">       \r\n        <ion-text>{{ currentTask.Description }}</ion-text>\r\n      </ion-col>\r\n    </ion-row>\r\n  </ion-grid>\r\n</ion-card>");

/***/ }),

/***/ 68336:
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/task-selection/task-selection.component.html ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card color=\"light\"\r\n          class=\"full-height\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"6\">\r\n          <h2>{{ 'task-selection.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n        <!--Save Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"btnSaveClick()\"\r\n                      color=\"success\">\r\n            <ion-icon name=\"save-outline\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row class=\"padding-5\">\r\n        <ion-col>\r\n          <ion-text>\r\n            {{ 'task-selection.lbl-sub-title-msg' | translate }}\r\n          </ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <!-- Body -->\r\n  <ion-card-content>\r\n    <!--Task List-->\r\n    <ion-grid>\r\n      <ion-row class=\"grey-box background-white\">\r\n        <ion-col>\r\n          <ion-grid>\r\n            <ion-row>\r\n              <ion-col class=\"content-center\">\r\n                <h2>Daily tasks</h2>\r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row>\r\n              <ion-col>\r\n                <ion-list class=\"max-width\">\r\n                  <ng-container *ngFor=\"let task of selectableTasksDaily\">\r\n                    <app-task-selection-card [currentTask]=\"task\"\r\n                                             (checkChangedEvent)=\"taskSelected($event)\"></app-task-selection-card>\r\n                  </ng-container>\r\n                </ion-list>\r\n              </ion-col>\r\n            </ion-row>\r\n          </ion-grid>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row class=\"grey-box background-white\">\r\n        <ion-col>\r\n          <ion-grid>\r\n            <ion-row>\r\n              <ion-col class=\"content-center\">\r\n                <h2>Special tasks</h2>\r\n              </ion-col>\r\n            </ion-row>\r\n            <ion-row>\r\n              <ion-col>\r\n                <ion-list class=\"max-width\">\r\n                  <ng-container *ngFor=\"let task of selectableTasksSpecial\">\r\n                    <app-task-selection-card [currentTask]=\"task\"\r\n                                             (checkChangedEvent)=\"taskSelected($event)\"></app-task-selection-card>\r\n                  </ng-container>\r\n                </ion-list>\r\n              </ion-col>\r\n            </ion-row>\r\n          </ion-grid>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 47757:
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/terms/terms.component.html ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"6\">\r\n          <h2>{{ 'terms.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <ion-card-content>\r\n    <ion-grid>\r\n      <!--Intellectual Property-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'terms.lbl-intellectual-property-title' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'terms.lbl-intellectual-property-txt' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Fees-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'terms.lbl-fees-title' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'terms.lbl-fees-txt' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Third Parties-->\r\n      <!--ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'terms.lbl-third-party-title' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'terms.lbl-third-party-text' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row-->\r\n      <!--Data Usage-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'terms.lbl-data-usage-title' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'terms.lbl-data-usage-txt' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Updates-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'terms.lbl-updates-title' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'terms.lbl-updates-txt' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Changes to these terms and conditions-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <h3>{{ 'terms.lbl-changes-title' | translate }}</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'terms.lbl-changes-txt' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n      <!--Contact Us-->\r\n      <!--ion-row>\r\n        <ion-col>\r\n          <h3>Contact Us</h3>\r\n        </ion-col>\r\n      </ion-row>\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>If you have any questions or suggestions about my Terms and Conditions, do not hesitate to contact me at [App contact information].</ion-text>\r\n        </ion-col>\r\n      </ion-row-->\r\n      <!--Last Update-->\r\n      <ion-row>\r\n        <ion-col>\r\n          <ion-text>{{ 'terms.lbl-last-update' | translate }}</ion-text>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 29337:
/*!**************************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/user-settings/user-settings.component.html ***!
  \**************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card class=\"full-height\"\r\n          color=\"light\">\r\n  <!-- Fixed Header -->\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <!--Back Button-->\r\n        <ion-col size=\"3\">\r\n          <ion-button (click)=\"closePopup()\">\r\n            <ion-icon name=\"arrow-back\"\r\n                      color=\"light\"></ion-icon>\r\n          </ion-button>\r\n        </ion-col>\r\n        <!--Title-->\r\n        <ion-col size=\"6\">\r\n          <ion-label color=\"dark\">\r\n            <ion-title>{{ 'user-settings.lbl-title' | translate }}</ion-title>\r\n          </ion-label>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <!-- Scrollable Body -->\r\n  <ion-card-content>\r\n    <ion-list>\r\n      <!-- Language -->\r\n      <!-- TEMPORARILY REMOVED -->\r\n      <!--ion-item lines=\"none\"\r\n                class=\"black-box\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <h2>{{ 'menu.lbl-language' | translate }}</h2>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-select [(ngModel)]=\"currentLanguage\"\r\n                          (ionChange)=\"languageChanged($event)\"\r\n                          class=\"dropdown\">\r\n                <ion-select-option [value]=\"0\">{{ 'menu.select-english' | translate }}</ion-select-option>\r\n                <ion-select-option [value]=\"1\">{{ 'menu.select-french' | translate }}</ion-select-option>\r\n              </ion-select>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>     \r\n      </ion-item-->\r\n      <!--Privacy-->\r\n      <ion-item lines=\"none\"\r\n                class=\"black-box\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <h2>{{ 'menu.lbl-privacy' | translate }}</h2>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Choose Privacy-->\r\n          <ion-row>\r\n            <ion-col class=\"grey-box\">\r\n              <ion-radio-group (ionChange)=\"privacyChanged($event)\"\r\n                               [(ngModel)]=\"syncCurrentValue\"\r\n                               class=\"hidden-overflow\">\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap small-font\">{{ 'user-settings.privacy-no-sync' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\"  value=\"NoSync\"></ion-radio>\r\n                </ion-item>\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap small-font\">{{ 'user-settings.privacy-sync' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\" value=\"Sync\"></ion-radio>\r\n                </ion-item>\r\n              </ion-radio-group>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Download my data-->\r\n          <ion-row class=\"grey-box\">\r\n            <ion-col size=\"9\"\r\n                     class=\"align-left\">\r\n              <ion-label class=\"text-wrap small-font padding-5 align-left\">{{ 'user-settings.download-data-btn' | translate }}</ion-label>\r\n            </ion-col>\r\n            <ion-col size=\"3\">\r\n              <ion-button (click)=\"btnDownloadMyDataClick()\"\r\n                          color=\"dark\">\r\n                <ion-icon name=\"cloud-download-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Delete my data-->\r\n          <ion-row class=\"grey-box\">\r\n            <ion-col size=\"9\">\r\n              <ion-label class=\"text-wrap small-font padding-5\">{{ 'user-settings.delete-my-data' | translate }}</ion-label>\r\n            </ion-col>\r\n            <ion-col size=\"3\">\r\n              <ion-button (click)=\"btnDeleteMyDataClick()\"\r\n                          color=\"danger\">\r\n                <ion-icon name=\"trash-outline\"\r\n                          color=\"light\"></ion-icon>\r\n              </ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Auto skip after 2 days, wait for feature to be requested-->\r\n      <!--ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col size=\"9\">\r\n              <ion-label class=\"text-wrap small-font\">{{ 'user-settings.auto-skip-after-2-days' | translate }}</ion-label>\r\n            </ion-col>\r\n            <ion-col size=\"3\">\r\n              <ion-toggle [(ngModel)]=\"autoSkipEnabled\"\r\n                          (ionChange)=\"autoSkipChanged($event)\"\r\n                          class=\"hidden-overflow\">\r\n              </ion-toggle>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item-->\r\n      <!--Choose End of day time-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <h2>{{ 'menu.label-end-of-day' | translate }}</h2>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col size=\"3\"></ion-col>\r\n            <ion-col size=\"6\">\r\n              <ion-button (click)=\"btnEnterTimeClick()\"\r\n                          color=\"primary\">{{ endOfDayTime }}</ion-button>\r\n            </ion-col>\r\n            <ion-col size=\"3\">\r\n              <ion-button (click)=\"btnHelpClick()\">?</ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Keep vertical-->\r\n      <ion-item class=\"black-box\"\r\n                lines=\"none\">\r\n        <ion-grid>\r\n          <!--Title-->\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-label>{{ 'user-settings.title-keep-portrait' | translate }}</ion-label>\r\n            </ion-col>\r\n          </ion-row>\r\n          <!--Toggle-->\r\n          <ion-row>\r\n            <!--Description-->\r\n            <ion-col size=\"9\">\r\n              <ion-text class=\"small-font margin-left\">{{ 'user-settings.lbl-keep-portrait' | translate }}</ion-text>\r\n            </ion-col>\r\n            <!--Toggle-->\r\n            <ion-col size=\"3\">\r\n              <ion-toggle [(ngModel)]=\"keepPortraitEnabled\"\r\n                          (ionChange)=\"keepPortraitChanged($event)\"\r\n                          class=\"hidden-overflow\">\r\n              </ion-toggle>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-card-content>\r\n</ion-card>\r\n");

/***/ }),

/***/ 53192:
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@ngtools/webpack/src/loaders/direct-resource.js!./src/app/components/welcome/welcome.component.html ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<ion-card color=\"light\">\r\n  <ion-card-header>\r\n    <ion-grid>\r\n      <ion-row>\r\n        <ion-col>\r\n          <!--Title-->\r\n          <h2>{{ 'welcome.lbl-title' | translate }}</h2>\r\n        </ion-col>\r\n      </ion-row>\r\n    </ion-grid>\r\n  </ion-card-header>\r\n\r\n  <!-- Scrollable Body -->\r\n  <ion-card-content>\r\n    <ion-list>\r\n      <!--Choose Language-->\r\n      <!-- TEMPORARILY REMOVED -->\r\n      <!--ion-item lines=\"none\"\r\n                class=\"black-box\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <h2>{{ 'welcome.lbl-choose-language' | translate }}</h2>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col class=\"content-center\">\r\n              <ion-select [(ngModel)]=\"currentLanguage\"\r\n                          (ionChange)=\"languageChanged($event)\"\r\n                          class=\"dropdown\">\r\n                <ion-select-option [value]=\"0\">{{ 'menu.select-english' | translate }}</ion-select-option>\r\n                <ion-select-option [value]=\"1\">{{ 'menu.select-french' | translate }}</ion-select-option>\r\n              </ion-select>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item-->\r\n      <!--Choose Privacy-->\r\n      <ion-item lines=\"none\"\r\n                class=\"black-box\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <h2>{{ 'welcome.lbl-choose-privacy' | translate }}</h2>\r\n            </ion-col>\r\n          </ion-row>\r\n          <ion-row>\r\n            <ion-col class=\"grey-box\">\r\n              <ion-radio-group (ionChange)=\"privacyChanged($event)\"\r\n                              [(ngModel)]=\"syncCurrentValue\">\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap\">{{ 'user-settings.privacy-no-sync' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\"  value=\"NoSync\"></ion-radio>\r\n                </ion-item>\r\n                <ion-item lines=\"none\">\r\n                  <ion-label class=\"text-wrap\">{{ 'user-settings.privacy-sync' | translate }}</ion-label>\r\n                  <ion-radio slot=\"start\" value=\"Sync\"></ion-radio>\r\n                </ion-item>\r\n              </ion-radio-group>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n      <!--Next button-->\r\n      <ion-item lines=\"none\"\r\n                color=\"light\">\r\n        <ion-grid>\r\n          <ion-row>\r\n            <ion-col>\r\n              <ion-button (click)=\"btnNextClick()\">{{ 'welcome.btn-next' | translate }}</ion-button>\r\n            </ion-col>\r\n          </ion-row>\r\n        </ion-grid>\r\n      </ion-item>\r\n    </ion-list>\r\n  </ion-card-content>\r\n</ion-card>");

/***/ }),

/***/ 46700:
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./af": 32139,
	"./af.js": 32139,
	"./ar": 22600,
	"./ar-dz": 81001,
	"./ar-dz.js": 81001,
	"./ar-kw": 99842,
	"./ar-kw.js": 99842,
	"./ar-ly": 9826,
	"./ar-ly.js": 9826,
	"./ar-ma": 15452,
	"./ar-ma.js": 15452,
	"./ar-sa": 11802,
	"./ar-sa.js": 11802,
	"./ar-tn": 4094,
	"./ar-tn.js": 4094,
	"./ar.js": 22600,
	"./az": 96375,
	"./az.js": 96375,
	"./be": 2086,
	"./be.js": 2086,
	"./bg": 85236,
	"./bg.js": 85236,
	"./bm": 81704,
	"./bm.js": 81704,
	"./bn": 94506,
	"./bn-bd": 34466,
	"./bn-bd.js": 34466,
	"./bn.js": 94506,
	"./bo": 47891,
	"./bo.js": 47891,
	"./br": 93348,
	"./br.js": 93348,
	"./bs": 84848,
	"./bs.js": 84848,
	"./ca": 35928,
	"./ca.js": 35928,
	"./cs": 31839,
	"./cs.js": 31839,
	"./cv": 59151,
	"./cv.js": 59151,
	"./cy": 35761,
	"./cy.js": 35761,
	"./da": 56686,
	"./da.js": 56686,
	"./de": 85177,
	"./de-at": 2311,
	"./de-at.js": 2311,
	"./de-ch": 54407,
	"./de-ch.js": 54407,
	"./de.js": 85177,
	"./dv": 79729,
	"./dv.js": 79729,
	"./el": 60430,
	"./el.js": 60430,
	"./en-au": 28430,
	"./en-au.js": 28430,
	"./en-ca": 61139,
	"./en-ca.js": 61139,
	"./en-gb": 56747,
	"./en-gb.js": 56747,
	"./en-ie": 79466,
	"./en-ie.js": 79466,
	"./en-il": 52121,
	"./en-il.js": 52121,
	"./en-in": 41167,
	"./en-in.js": 41167,
	"./en-nz": 62030,
	"./en-nz.js": 62030,
	"./en-sg": 43646,
	"./en-sg.js": 43646,
	"./eo": 73126,
	"./eo.js": 73126,
	"./es": 38819,
	"./es-do": 69293,
	"./es-do.js": 69293,
	"./es-mx": 65304,
	"./es-mx.js": 65304,
	"./es-us": 66068,
	"./es-us.js": 66068,
	"./es.js": 38819,
	"./et": 23291,
	"./et.js": 23291,
	"./eu": 1400,
	"./eu.js": 1400,
	"./fa": 70043,
	"./fa.js": 70043,
	"./fi": 16138,
	"./fi.js": 16138,
	"./fil": 11466,
	"./fil.js": 11466,
	"./fo": 76803,
	"./fo.js": 76803,
	"./fr": 65523,
	"./fr-ca": 697,
	"./fr-ca.js": 697,
	"./fr-ch": 69001,
	"./fr-ch.js": 69001,
	"./fr.js": 65523,
	"./fy": 21116,
	"./fy.js": 21116,
	"./ga": 66151,
	"./ga.js": 66151,
	"./gd": 93094,
	"./gd.js": 93094,
	"./gl": 11279,
	"./gl.js": 11279,
	"./gom-deva": 64458,
	"./gom-deva.js": 64458,
	"./gom-latn": 66320,
	"./gom-latn.js": 66320,
	"./gu": 78658,
	"./gu.js": 78658,
	"./he": 52153,
	"./he.js": 52153,
	"./hi": 98732,
	"./hi.js": 98732,
	"./hr": 84960,
	"./hr.js": 84960,
	"./hu": 76339,
	"./hu.js": 76339,
	"./hy-am": 11862,
	"./hy-am.js": 11862,
	"./id": 71068,
	"./id.js": 71068,
	"./is": 61260,
	"./is.js": 61260,
	"./it": 1007,
	"./it-ch": 78063,
	"./it-ch.js": 78063,
	"./it.js": 1007,
	"./ja": 6854,
	"./ja.js": 6854,
	"./jv": 92390,
	"./jv.js": 92390,
	"./ka": 35958,
	"./ka.js": 35958,
	"./kk": 67216,
	"./kk.js": 67216,
	"./km": 61061,
	"./km.js": 61061,
	"./kn": 24060,
	"./kn.js": 24060,
	"./ko": 55216,
	"./ko.js": 55216,
	"./ku": 50894,
	"./ku.js": 50894,
	"./ky": 609,
	"./ky.js": 609,
	"./lb": 3591,
	"./lb.js": 3591,
	"./lo": 38381,
	"./lo.js": 38381,
	"./lt": 56118,
	"./lt.js": 56118,
	"./lv": 67889,
	"./lv.js": 67889,
	"./me": 94274,
	"./me.js": 94274,
	"./mi": 39226,
	"./mi.js": 39226,
	"./mk": 528,
	"./mk.js": 528,
	"./ml": 27938,
	"./ml.js": 27938,
	"./mn": 35456,
	"./mn.js": 35456,
	"./mr": 94393,
	"./mr.js": 94393,
	"./ms": 93647,
	"./ms-my": 33049,
	"./ms-my.js": 33049,
	"./ms.js": 93647,
	"./mt": 26097,
	"./mt.js": 26097,
	"./my": 66277,
	"./my.js": 66277,
	"./nb": 67245,
	"./nb.js": 67245,
	"./ne": 3988,
	"./ne.js": 3988,
	"./nl": 42557,
	"./nl-be": 20478,
	"./nl-be.js": 20478,
	"./nl.js": 42557,
	"./nn": 9046,
	"./nn.js": 9046,
	"./oc-lnc": 83131,
	"./oc-lnc.js": 83131,
	"./pa-in": 51731,
	"./pa-in.js": 51731,
	"./pl": 8409,
	"./pl.js": 8409,
	"./pt": 41178,
	"./pt-br": 56558,
	"./pt-br.js": 56558,
	"./pt.js": 41178,
	"./ro": 84138,
	"./ro.js": 84138,
	"./ru": 73380,
	"./ru.js": 73380,
	"./sd": 42889,
	"./sd.js": 42889,
	"./se": 22774,
	"./se.js": 22774,
	"./si": 53776,
	"./si.js": 53776,
	"./sk": 9597,
	"./sk.js": 9597,
	"./sl": 93871,
	"./sl.js": 93871,
	"./sq": 44228,
	"./sq.js": 44228,
	"./sr": 40774,
	"./sr-cyrl": 61928,
	"./sr-cyrl.js": 61928,
	"./sr.js": 40774,
	"./ss": 83176,
	"./ss.js": 83176,
	"./sv": 52422,
	"./sv.js": 52422,
	"./sw": 71621,
	"./sw.js": 71621,
	"./ta": 5731,
	"./ta.js": 5731,
	"./te": 18025,
	"./te.js": 18025,
	"./tet": 53934,
	"./tet.js": 53934,
	"./tg": 99958,
	"./tg.js": 99958,
	"./th": 84251,
	"./th.js": 84251,
	"./tk": 65494,
	"./tk.js": 65494,
	"./tl-ph": 38568,
	"./tl-ph.js": 38568,
	"./tlh": 73158,
	"./tlh.js": 73158,
	"./tr": 49574,
	"./tr.js": 49574,
	"./tzl": 64311,
	"./tzl.js": 64311,
	"./tzm": 99990,
	"./tzm-latn": 42380,
	"./tzm-latn.js": 42380,
	"./tzm.js": 99990,
	"./ug-cn": 52356,
	"./ug-cn.js": 52356,
	"./uk": 54934,
	"./uk.js": 54934,
	"./ur": 84515,
	"./ur.js": 84515,
	"./uz": 40058,
	"./uz-latn": 41875,
	"./uz-latn.js": 41875,
	"./uz.js": 40058,
	"./vi": 13325,
	"./vi.js": 13325,
	"./x-pseudo": 39208,
	"./x-pseudo.js": 39208,
	"./yo": 18742,
	"./yo.js": 18742,
	"./zh-cn": 42378,
	"./zh-cn.js": 42378,
	"./zh-hk": 21074,
	"./zh-hk.js": 21074,
	"./zh-mo": 74671,
	"./zh-mo.js": 74671,
	"./zh-tw": 20259,
	"./zh-tw.js": 20259
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 46700;

/***/ }),

/***/ 30836:
/*!************************************!*\
  !*** ./src/app/app.component.scss ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-menu ion-content {\n  --background: var(--ion-item-background, var(--ion-background-color, #fff));\n}\n\nion-menu.md ion-content {\n  --padding-start: 8px;\n  --padding-end: 8px;\n  --padding-top: 20px;\n  --padding-bottom: 20px;\n}\n\nion-menu.md ion-list {\n  padding: 20px 0;\n}\n\nion-menu.md ion-note {\n  margin-bottom: 30px;\n}\n\nion-menu.md ion-list-header,\nion-menu.md ion-note {\n  padding-left: 10px;\n}\n\nion-menu.md ion-list#inbox-list {\n  border-bottom: 1px solid var(--ion-color-step-150, #d7d8da);\n}\n\nion-menu.md ion-list#inbox-list ion-list-header {\n  font-size: 22px;\n  font-weight: 600;\n  min-height: 20px;\n}\n\nion-menu.md ion-list#labels-list ion-list-header {\n  font-size: 16px;\n  margin-bottom: 18px;\n  color: #757575;\n  min-height: 26px;\n}\n\nion-menu.md ion-item {\n  --padding-start: 10px;\n  --padding-end: 10px;\n  border-radius: 4px;\n}\n\nion-menu.md ion-item.selected {\n  --background: rgba(var(--ion-color-primary-rgb), 0.14);\n}\n\nion-menu.md ion-item.selected ion-icon {\n  color: var(--ion-color-primary);\n}\n\nion-menu.md ion-item ion-icon {\n  color: #616e7e;\n}\n\nion-menu.md ion-item ion-label {\n  font-weight: 500;\n}\n\nion-menu.ios ion-content {\n  --padding-bottom: 20px;\n}\n\nion-menu.ios ion-list {\n  padding: 20px 0 0 0;\n}\n\nion-menu.ios ion-note {\n  line-height: 24px;\n  margin-bottom: 20px;\n}\n\nion-menu.ios ion-item {\n  --padding-start: 16px;\n  --padding-end: 16px;\n  --min-height: 50px;\n}\n\nion-menu.ios ion-item.selected ion-icon {\n  color: var(--ion-color-primary);\n}\n\nion-menu.ios ion-item ion-icon {\n  font-size: 24px;\n  color: #73849a;\n}\n\nion-menu.ios ion-list#labels-list ion-list-header {\n  margin-bottom: 8px;\n}\n\nion-menu.ios ion-list-header,\nion-menu.ios ion-note {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n\nion-menu.ios ion-note {\n  margin-bottom: 8px;\n}\n\nion-note {\n  display: inline-block;\n  font-size: 16px;\n  color: var(--ion-color-medium-shade);\n}\n\nion-item.selected {\n  --color: var(--ion-color-primary);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLDJFQUFBO0FBQ0Y7O0FBRUE7RUFDRSxvQkFBQTtFQUNBLGtCQUFBO0VBQ0EsbUJBQUE7RUFDQSxzQkFBQTtBQUNGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUVBO0VBQ0UsbUJBQUE7QUFDRjs7QUFFQTs7RUFFRSxrQkFBQTtBQUNGOztBQUVBO0VBQ0UsMkRBQUE7QUFDRjs7QUFFQTtFQUNFLGVBQUE7RUFDQSxnQkFBQTtFQUVBLGdCQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBRUEsbUJBQUE7RUFFQSxjQUFBO0VBRUEsZ0JBQUE7QUFIRjs7QUFNQTtFQUNFLHFCQUFBO0VBQ0EsbUJBQUE7RUFDQSxrQkFBQTtBQUhGOztBQU1BO0VBQ0Usc0RBQUE7QUFIRjs7QUFNQTtFQUNFLCtCQUFBO0FBSEY7O0FBTUE7RUFDRSxjQUFBO0FBSEY7O0FBTUE7RUFDRSxnQkFBQTtBQUhGOztBQU1BO0VBQ0Usc0JBQUE7QUFIRjs7QUFNQTtFQUNFLG1CQUFBO0FBSEY7O0FBTUE7RUFDRSxpQkFBQTtFQUNBLG1CQUFBO0FBSEY7O0FBTUE7RUFDRSxxQkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFIRjs7QUFNQTtFQUNFLCtCQUFBO0FBSEY7O0FBTUE7RUFDRSxlQUFBO0VBQ0EsY0FBQTtBQUhGOztBQU1BO0VBQ0Usa0JBQUE7QUFIRjs7QUFNQTs7RUFFRSxrQkFBQTtFQUNBLG1CQUFBO0FBSEY7O0FBTUE7RUFDRSxrQkFBQTtBQUhGOztBQU1BO0VBQ0UscUJBQUE7RUFDQSxlQUFBO0VBRUEsb0NBQUE7QUFKRjs7QUFPQTtFQUNFLGlDQUFBO0FBSkYiLCJmaWxlIjoiYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLW1lbnUgaW9uLWNvbnRlbnQge1xuICAtLWJhY2tncm91bmQ6IHZhcigtLWlvbi1pdGVtLWJhY2tncm91bmQsIHZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKSk7XG59XG5cbmlvbi1tZW51Lm1kIGlvbi1jb250ZW50IHtcbiAgLS1wYWRkaW5nLXN0YXJ0OiA4cHg7XG4gIC0tcGFkZGluZy1lbmQ6IDhweDtcbiAgLS1wYWRkaW5nLXRvcDogMjBweDtcbiAgLS1wYWRkaW5nLWJvdHRvbTogMjBweDtcbn1cblxuaW9uLW1lbnUubWQgaW9uLWxpc3Qge1xuICBwYWRkaW5nOiAyMHB4IDA7XG59XG5cbmlvbi1tZW51Lm1kIGlvbi1ub3RlIHtcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcbn1cblxuaW9uLW1lbnUubWQgaW9uLWxpc3QtaGVhZGVyLFxuaW9uLW1lbnUubWQgaW9uLW5vdGUge1xuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG59XG5cbmlvbi1tZW51Lm1kIGlvbi1saXN0I2luYm94LWxpc3Qge1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0taW9uLWNvbG9yLXN0ZXAtMTUwLCAjZDdkOGRhKTtcbn1cblxuaW9uLW1lbnUubWQgaW9uLWxpc3QjaW5ib3gtbGlzdCBpb24tbGlzdC1oZWFkZXIge1xuICBmb250LXNpemU6IDIycHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG5cbiAgbWluLWhlaWdodDogMjBweDtcbn1cblxuaW9uLW1lbnUubWQgaW9uLWxpc3QjbGFiZWxzLWxpc3QgaW9uLWxpc3QtaGVhZGVyIHtcbiAgZm9udC1zaXplOiAxNnB4O1xuXG4gIG1hcmdpbi1ib3R0b206IDE4cHg7XG5cbiAgY29sb3I6ICM3NTc1NzU7XG5cbiAgbWluLWhlaWdodDogMjZweDtcbn1cblxuaW9uLW1lbnUubWQgaW9uLWl0ZW0ge1xuICAtLXBhZGRpbmctc3RhcnQ6IDEwcHg7XG4gIC0tcGFkZGluZy1lbmQ6IDEwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuaW9uLW1lbnUubWQgaW9uLWl0ZW0uc2VsZWN0ZWQge1xuICAtLWJhY2tncm91bmQ6IHJnYmEodmFyKC0taW9uLWNvbG9yLXByaW1hcnktcmdiKSwgMC4xNCk7XG59XG5cbmlvbi1tZW51Lm1kIGlvbi1pdGVtLnNlbGVjdGVkIGlvbi1pY29uIHtcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1wcmltYXJ5KTtcbn1cblxuaW9uLW1lbnUubWQgaW9uLWl0ZW0gaW9uLWljb24ge1xuICBjb2xvcjogIzYxNmU3ZTtcbn1cblxuaW9uLW1lbnUubWQgaW9uLWl0ZW0gaW9uLWxhYmVsIHtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbn1cblxuaW9uLW1lbnUuaW9zIGlvbi1jb250ZW50IHtcbiAgLS1wYWRkaW5nLWJvdHRvbTogMjBweDtcbn1cblxuaW9uLW1lbnUuaW9zIGlvbi1saXN0IHtcbiAgcGFkZGluZzogMjBweCAwIDAgMDtcbn1cblxuaW9uLW1lbnUuaW9zIGlvbi1ub3RlIHtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG5cbmlvbi1tZW51LmlvcyBpb24taXRlbSB7XG4gIC0tcGFkZGluZy1zdGFydDogMTZweDtcbiAgLS1wYWRkaW5nLWVuZDogMTZweDtcbiAgLS1taW4taGVpZ2h0OiA1MHB4O1xufVxuXG5pb24tbWVudS5pb3MgaW9uLWl0ZW0uc2VsZWN0ZWQgaW9uLWljb24ge1xuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLXByaW1hcnkpO1xufVxuXG5pb24tbWVudS5pb3MgaW9uLWl0ZW0gaW9uLWljb24ge1xuICBmb250LXNpemU6IDI0cHg7XG4gIGNvbG9yOiAjNzM4NDlhO1xufVxuXG5pb24tbWVudS5pb3MgaW9uLWxpc3QjbGFiZWxzLWxpc3QgaW9uLWxpc3QtaGVhZGVyIHtcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xufVxuXG5pb24tbWVudS5pb3MgaW9uLWxpc3QtaGVhZGVyLFxuaW9uLW1lbnUuaW9zIGlvbi1ub3RlIHtcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICBwYWRkaW5nLXJpZ2h0OiAxNnB4O1xufVxuXG5pb24tbWVudS5pb3MgaW9uLW5vdGUge1xuICBtYXJnaW4tYm90dG9tOiA4cHg7XG59XG5cbmlvbi1ub3RlIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmb250LXNpemU6IDE2cHg7XG5cbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1tZWRpdW0tc2hhZGUpO1xufVxuXG5pb24taXRlbS5zZWxlY3RlZCB7XG4gIC0tY29sb3I6IHZhcigtLWlvbi1jb2xvci1wcmltYXJ5KTtcbn0iXX0= */";

/***/ }),

/***/ 46414:
/*!****************************************************************************************!*\
  !*** ./src/app/components/TaskCard/task-card-popover/task-card-popover.component.scss ***!
  \****************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".flex-item {\n  width: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stY2FyZC1wb3BvdmVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0UsV0FBQTtBQUFGIiwiZmlsZSI6InRhc2stY2FyZC1wb3BvdmVyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5mbGV4LWl0ZW0ge1xyXG4gIHdpZHRoOjEwMCU7XHJcbn1cclxuIl19 */";

/***/ }),

/***/ 955:
/*!************************************************************************!*\
  !*** ./src/app/components/TaskCard/task-card/task-card.component.scss ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-modal .modal-wrapper {\n  height: 70%;\n  width: 60%;\n}\n\nion-button {\n  min-height: 32px;\n}\n\n.bordered-large {\n  border-color: black;\n  border-width: 4px;\n  border-style: solid;\n  padding: 2px;\n  margin: 2px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stY2FyZC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFSTtFQUNJLFdBQUE7RUFDQSxVQUFBO0FBRFI7O0FBS0E7RUFDRSxnQkFBQTtBQUZGOztBQUtBO0VBQ0UsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUFGRiIsImZpbGUiOiJ0YXNrLWNhcmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW9uLW1vZGFsIHtcclxuICAgIC5tb2RhbC13cmFwcGVyIHtcclxuICAgICAgICBoZWlnaHQ6IDcwJTtcclxuICAgICAgICB3aWR0aDogNjAlO1xyXG4gICAgfVxyXG59XHJcblxyXG5pb24tYnV0dG9uIHtcclxuICBtaW4taGVpZ2h0OiAzMnB4O1xyXG59XHJcblxyXG4uYm9yZGVyZWQtbGFyZ2Uge1xyXG4gIGJvcmRlci1jb2xvcjogYmxhY2s7XHJcbiAgYm9yZGVyLXdpZHRoOiA0cHg7XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICBwYWRkaW5nOiAycHg7XHJcbiAgbWFyZ2luOiAycHg7XHJcbn1cclxuIl19 */";

/***/ }),

/***/ 90931:
/*!****************************************************************************!*\
  !*** ./src/app/components/TaskCard/task-scores/task-scores.component.scss ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".content-center {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.space-evenly {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n}\n\n.bordered {\n  border-color: black;\n  border-width: 1px;\n  border-style: solid;\n  padding: 2px;\n  margin: 2px;\n}\n\n.zoom {\n  zoom: 1.7;\n}\n\n.no-padding-left-right {\n  padding-left: 0px;\n  padding-right: 0px;\n}\n\n.column {\n  flex-direction: column;\n}\n\n.container {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n}\n\n.minicard {\n  min-width: 40px;\n}\n\ncanvas {\n  width: 100% !important;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stc2NvcmVzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7QUFBRjs7QUFHQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDZCQUFBO0FBQUY7O0FBR0E7RUFDRSxtQkFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtBQUFGOztBQUdBO0VBQ0UsU0FBQTtBQUFGOztBQUdBO0VBQ0UsaUJBQUE7RUFDQSxrQkFBQTtBQUFGOztBQUdBO0VBQ0Usc0JBQUE7QUFBRjs7QUFHQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLDZCQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0FBQUY7O0FBR0E7RUFDSSxzQkFBQTtBQUFKIiwiZmlsZSI6InRhc2stc2NvcmVzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETzogUmVtb3ZlIGR1cGxpY2F0ZSBjb2RlXHJcbi5jb250ZW50LWNlbnRlciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcblxyXG4uc3BhY2UtZXZlbmx5IHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XHJcbn1cclxuXHJcbi5ib3JkZXJlZCB7XHJcbiAgYm9yZGVyLWNvbG9yOiBibGFjaztcclxuICBib3JkZXItd2lkdGg6IDFweDtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gIHBhZGRpbmc6IDJweDtcclxuICBtYXJnaW46IDJweDtcclxufVxyXG5cclxuLnpvb20ge1xyXG4gIHpvb206IDEuNztcclxufVxyXG5cclxuLm5vLXBhZGRpbmctbGVmdC1yaWdodCB7XHJcbiAgcGFkZGluZy1sZWZ0OiAwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMHB4O1xyXG59XHJcblxyXG4uY29sdW1uIHtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG59XHJcblxyXG4uY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XHJcbn1cclxuXHJcbi5taW5pY2FyZCB7XHJcbiAgbWluLXdpZHRoOiA0MHB4O1xyXG59XHJcblxyXG5jYW52YXMge1xyXG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxufSJdfQ== */";

/***/ }),

/***/ 28228:
/*!****************************************************************!*\
  !*** ./src/app/components/TaskCard/timer/timer.component.scss ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".font-xxlarge {\n  font-size: xx-large;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRpbWVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsbUJBQUE7QUFDRiIsImZpbGUiOiJ0aW1lci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5mb250LXh4bGFyZ2Uge1xyXG4gIGZvbnQtc2l6ZTogeHgtbGFyZ2U7XHJcbn1cclxuIl19 */";

/***/ }),

/***/ 99263:
/*!***************************************************************!*\
  !*** ./src/app/components/debug-log/debug-log.component.scss ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-card {\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-grid {\n  padding: 1px;\n}\n\nion-checkbox {\n  margin-left: 10px;\n}\n\n.margin-bottom {\n  margin-bottom: 8px;\n}\n\n.column {\n  flex-direction: column;\n  display: flex;\n  align-items: left;\n  justify-content: center;\n}\n\n.danger {\n  background-color: red !important;\n}\n\n.dropdown {\n  width: 100% !important;\n  max-width: 100% !important;\n}\n\n.no-overflow {\n  overflow: visible;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-content {\n  --background: transparent;\n}\n\nion-text {\n  max-width: 100%;\n  -webkit-user-select: text;\n  user-select: text;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlYnVnLWxvZy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLHVCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLGlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7RUFDQSxhQUFBO0VBQ0EsaUJBQUE7RUFDQSx1QkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0NBQUE7QUFDRjs7QUFFQTtFQUNFLHNCQUFBO0VBQ0EsMEJBQUE7QUFDRjs7QUFFQTtFQUNFLGlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLHNCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQ0FBQTtFQUNBLGdDQUFBO0FBQ0Y7O0FBRUE7RUFDRSx5QkFBQTtBQUNGOztBQUVBO0VBQ0UsZUFBQTtFQUNBLHlCQUFBO0VBR0EsaUJBQUE7QUFDRiIsImZpbGUiOiJkZWJ1Zy1sb2cuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuXHJcbmlvbi1jYXJkLWNvbnRlbnQge1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG5pb24tY29sIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG5pb24tY2FyZC1oZWFkZXIge1xyXG4gIHBhZGRpbmc6IDFweDtcclxufVxyXG5cclxuaW9uLWNhcmQge1xyXG4gIGJvcmRlci1jb2xvcjogZGFya2dyZWVuO1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbn1cclxuXHJcbmlvbi1ncmlkIHtcclxuICBwYWRkaW5nOiAxcHg7XHJcbn1cclxuXHJcbmlvbi1jaGVja2JveCB7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbn1cclxuXHJcbi5tYXJnaW4tYm90dG9tIHtcclxuICBtYXJnaW4tYm90dG9tOiA4cHg7XHJcbn1cclxuXHJcbi5jb2x1bW4ge1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogbGVmdDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuLmRhbmdlciB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5kcm9wZG93biB7XHJcbiAgd2lkdGg6MTAwJSAhaW1wb3J0YW50O1xyXG4gIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ubm8tb3ZlcmZsb3cge1xyXG4gIG92ZXJmbG93OiB2aXNpYmxlIDtcclxufVxyXG5cclxuLmZ1bGwtaGVpZ2h0IHtcclxuICBoZWlnaHQ6MTAwJTtcclxufVxyXG5cclxuaDIge1xyXG4gIGNvbG9yOmJsYWNrO1xyXG4gIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbn1cclxuXHJcbmlvbi1sYWJlbCB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbn1cclxuXHJcbmlvbi1yb3cge1xyXG4gIHBhZGRpbmctdG9wOjRweDtcclxuICBwYWRkaW5nLWJvdHRvbTogNHB4O1xyXG59XHJcblxyXG5pb24tc2VsZWN0IHtcclxuICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xyXG59XHJcblxyXG4udGV4dC13cmFwIHtcclxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXAgIWltcG9ydGFudDtcclxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQgIWltcG9ydGFudDtcclxufVxyXG5cclxuaW9uLWNvbnRlbnR7XHJcbiAgLS1iYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxufVxyXG5cclxuaW9uLXRleHQge1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICAtd2Via2l0LXVzZXItc2VsZWN0OiB0ZXh0O1xyXG4gIC1tb3otdXNlci1zZWxlY3Q6IHRleHQ7XHJcbiAgLW1zLXVzZXItc2VsZWN0OiB0ZXh0O1xyXG4gIHVzZXItc2VsZWN0OiB0ZXh0O1xyXG59XHJcbiJdfQ== */";

/***/ }),

/***/ 54034:
/*!*****************************************************************!*\
  !*** ./src/app/components/group-card/group-card.component.scss ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nion-card {\n  border-color: #1b1b1b !important;\n  border-style: solid;\n  border-width: 1px;\n  padding: 5px;\n}\n\n.unzoom {\n  zoom: 0.8;\n}\n\nion-footer {\n  min-height: 30px !important;\n}\n\nion-icon {\n  color: white;\n}\n\nion-item {\n  --min-height: 20px;\n}\n\nion-title {\n  color: black;\n  font-size: medium;\n}\n\nion-card-header {\n  padding: 0px;\n}\n\nion-progress-bar {\n  --buffer-background: var(--ion-color-dark);\n}\n\nion-item {\n  --min-height: 16px;\n  --padding-start: 0px;\n  --inner-padding-start: 0px;\n  --padding-end: 0px;\n  --inner-padding-end: 0px;\n}\n\n.background-white {\n  background-color: white;\n}\n\n.header-border {\n  border-color: black;\n  border-width: 2px;\n  border-style: solid;\n  border-top-right-radius: 5px;\n  border-top-left-radius: 5px;\n  border-bottom-right-radius: 5px;\n  border-bottom-left-radius: 5px;\n}\n\nion-button {\n  min-height: 32px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3VwLWNhcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0NBQUE7RUFDQSxtQkFBQTtFQUNBLGlCQUFBO0VBQ0EsWUFBQTtBQUNGOztBQUVBO0VBQ0UsU0FBQTtBQUNGOztBQUVBO0VBQ0UsMkJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0EsaUJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLDBDQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLG9CQUFBO0VBQ0EsMEJBQUE7RUFDQSxrQkFBQTtFQUNBLHdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSx1QkFBQTtBQUNGOztBQUVBO0VBQ0UsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0EsNEJBQUE7RUFDQSwyQkFBQTtFQUNBLCtCQUFBO0VBQ0EsOEJBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0FBQ0YiLCJmaWxlIjoiZ3JvdXAtY2FyZC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jb2wge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuaW9uLWNhcmQge1xyXG4gIGJvcmRlci1jb2xvcjogIzFiMWIxYiAhaW1wb3J0YW50O1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XHJcbiAgcGFkZGluZzogNXB4O1xyXG59XHJcblxyXG4udW56b29tIHtcclxuICB6b29tOiAwLjg7XHJcbn1cclxuXHJcbmlvbi1mb290ZXIge1xyXG4gIG1pbi1oZWlnaHQ6IDMwcHggIWltcG9ydGFudDtcclxufVxyXG5cclxuaW9uLWljb24ge1xyXG4gIGNvbG9yOiB3aGl0ZTtcclxufVxyXG5cclxuaW9uLWl0ZW0ge1xyXG4gIC0tbWluLWhlaWdodDogMjBweDtcclxufVxyXG5cclxuaW9uLXRpdGxlIHtcclxuICBjb2xvcjogYmxhY2s7XHJcbiAgZm9udC1zaXplOiBtZWRpdW07XHJcbn1cclxuXHJcbmlvbi1jYXJkLWhlYWRlciB7XHJcbiAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG5pb24tcHJvZ3Jlc3MtYmFyIHtcclxuICAtLWJ1ZmZlci1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3ItZGFyayk7XHJcbn1cclxuXHJcbmlvbi1pdGVtIHtcclxuICAtLW1pbi1oZWlnaHQ6IDE2cHg7XHJcbiAgLS1wYWRkaW5nLXN0YXJ0OiAwcHg7XHJcbiAgLS1pbm5lci1wYWRkaW5nLXN0YXJ0OiAwcHg7XHJcbiAgLS1wYWRkaW5nLWVuZDogMHB4O1xyXG4gIC0taW5uZXItcGFkZGluZy1lbmQ6IDBweDtcclxufVxyXG5cclxuLmJhY2tncm91bmQtd2hpdGUge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG4uaGVhZGVyLWJvcmRlciB7XHJcbiAgYm9yZGVyLWNvbG9yOiBibGFjaztcclxuICBib3JkZXItd2lkdGg6IDJweDtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA1cHg7XHJcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNXB4O1xyXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA1cHg7XHJcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNXB4O1xyXG59XHJcblxyXG5pb24tYnV0dG9uIHtcclxuICBtaW4taGVpZ2h0OiAzMnB4O1xyXG59XHJcbiJdfQ== */";

/***/ }),

/***/ 49578:
/*!*********************************************************************!*\
  !*** ./src/app/components/group-create/group-create.component.scss ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n  margin: 4px !important;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-card {\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-grid {\n  padding: 1px;\n}\n\nion-checkbox {\n  margin-left: 10px;\n}\n\n.bordered {\n  border-color: lightgray;\n  border-width: 1px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 2px;\n  margin: 2px;\n}\n\n.bordered-content {\n  border-color: black;\n  border-width: 1px;\n  border-style: solid;\n  padding: 2px;\n}\n\n.zoom {\n  zoom: 1.3;\n}\n\nion-button > ion-label {\n  color: white !important;\n}\n\n.header-border {\n  border-color: #1b1b1b;\n  border-width: 2px;\n  border-style: solid;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-content {\n  --background: transparent;\n}\n\n.max-height {\n  max-height: 100%;\n}\n\n.scrollable {\n  overflow-y: scroll;\n}\n\n.no-overflow {\n  overflow-y: hidden;\n}\n\n.max-height-inherit {\n  height: inherit !important;\n}\n\n.max-height-fixed {\n  max-height: 300px;\n  overflow-y: scroll;\n}\n\nion-item {\n  --min-height: 20px;\n}\n\n.percent-width {\n  width: 100%;\n}\n\n.note-padding {\n  padding: 4px;\n  margin: 4px;\n}\n\n.background-light {\n  background: var(--ion-color-light);\n}\n\nion-item {\n  padding: 10px;\n  background-color: white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3VwLWNyZWF0ZS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLGdCQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0VBQ0EsWUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsdUJBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsaUJBQUE7QUFDRjs7QUFFQTtFQUNFLHVCQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUFDRjs7QUFFQTtFQUNFLG1CQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFNBQUE7QUFDRjs7QUFFQTtFQUNFLHVCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxxQkFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7QUFDRjs7QUFFQTtFQUNFLGdDQUFBO0VBQ0EsZ0NBQUE7QUFDRjs7QUFFQTtFQUNFLHlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0FBQ0Y7O0FBRUE7RUFDRSwwQkFBQTtBQUNGOztBQUVBO0VBQ0UsaUJBQUE7RUFDQSxrQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxXQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQ0FBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLHVCQUFBO0FBQ0YiLCJmaWxlIjoiZ3JvdXAtY3JlYXRlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNhcmQge1xyXG4gIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG59XHJcblxyXG5pb24tY2FyZC1jb250ZW50IHtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBtYXJnaW46IDRweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5pb24tY29sIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG5pb24tY2FyZC1oZWFkZXIge1xyXG4gIHBhZGRpbmc6IDFweDtcclxufVxyXG5cclxuaW9uLWNhcmQge1xyXG4gIGJvcmRlci1jb2xvcjogZGFya2dyZWVuO1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbn1cclxuXHJcbmlvbi1ncmlkIHtcclxuICBwYWRkaW5nOiAxcHg7XHJcbn1cclxuXHJcbmlvbi1jaGVja2JveCB7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbn1cclxuXHJcbi5ib3JkZXJlZCB7XHJcbiAgYm9yZGVyLWNvbG9yOiBsaWdodGdyYXk7XHJcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgcGFkZGluZzogMnB4O1xyXG4gIG1hcmdpbjogMnB4O1xyXG59XHJcblxyXG4uYm9yZGVyZWQtY29udGVudCB7XHJcbiAgYm9yZGVyLWNvbG9yOiBibGFjaztcclxuICBib3JkZXItd2lkdGg6IDFweDtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gIHBhZGRpbmc6IDJweDtcclxufVxyXG5cclxuLnpvb20ge1xyXG4gIHpvb206IDEuMztcclxufVxyXG5cclxuaW9uLWJ1dHRvbiA+IGlvbi1sYWJlbCB7XHJcbiAgY29sb3I6d2hpdGUgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmhlYWRlci1ib3JkZXIge1xyXG4gIGJvcmRlci1jb2xvcjogIzFiMWIxYjtcclxuICBib3JkZXItd2lkdGg6IDJweDtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG59XHJcblxyXG4uZnVsbC1oZWlnaHQge1xyXG4gIGhlaWdodDoxMDAlO1xyXG59XHJcblxyXG5oMiB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxufVxyXG5cclxuaW9uLWxhYmVsIHtcclxuICBjb2xvcjpibGFjaztcclxufVxyXG5cclxuaW9uLXJvdyB7XHJcbiAgcGFkZGluZy10b3A6NHB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiA0cHg7XHJcbn1cclxuXHJcbmlvbi1zZWxlY3Qge1xyXG4gIG1pbi13aWR0aDogbWF4LWNvbnRlbnQ7XHJcbn1cclxuXHJcbi50ZXh0LXdyYXAge1xyXG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcCAhaW1wb3J0YW50O1xyXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5pb24tY29udGVudHtcclxuICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG59XHJcblxyXG4ubWF4LWhlaWdodCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxufVxyXG5cclxuLnNjcm9sbGFibGUge1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxufVxyXG5cclxuLm5vLW92ZXJmbG93IHtcclxuICBvdmVyZmxvdy15OiBoaWRkZW47XHJcbn1cclxuXHJcbi5tYXgtaGVpZ2h0LWluaGVyaXQge1xyXG4gIGhlaWdodDogaW5oZXJpdCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ubWF4LWhlaWdodC1maXhlZCB7XHJcbiAgbWF4LWhlaWdodDogMzAwcHg7XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG59XHJcblxyXG5pb24taXRlbSB7XHJcbiAgLS1taW4taGVpZ2h0OiAyMHB4O1xyXG59XHJcblxyXG4ucGVyY2VudC13aWR0aCB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5ub3RlLXBhZGRpbmcge1xyXG4gIHBhZGRpbmc6IDRweDtcclxuICBtYXJnaW46IDRweDtcclxufVxyXG5cclxuLmJhY2tncm91bmQtbGlnaHQge1xyXG4gIGJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1saWdodCk7XHJcbn1cclxuXHJcbmlvbi1pdGVtIHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG59Il19 */";

/***/ }),

/***/ 90971:
/*!*****************************************************************!*\
  !*** ./src/app/components/group-edit/group-edit.component.scss ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n  margin: 4px !important;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-grid {\n  padding: 1px;\n}\n\nion-checkbox {\n  margin-left: 10px;\n}\n\n.column {\n  flex-direction: column;\n  display: flex;\n  align-items: center;\n}\n\n.bordered {\n  border-color: lightgray;\n  border-width: 1px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 2px;\n  margin: 2px;\n}\n\n.bordered-content {\n  border-color: black;\n  border-width: 1px;\n  border-style: solid;\n  padding: 2px;\n}\n\n.zoom {\n  zoom: 1.3;\n}\n\nion-button > ion-label {\n  color: white !important;\n}\n\n.header-border {\n  border-color: #1b1b1b;\n  border-width: 2px;\n  border-style: solid;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-content {\n  --background: transparent;\n}\n\n.max-height {\n  max-height: 100%;\n}\n\n.scrollable {\n  overflow-y: scroll;\n}\n\n.no-overflow {\n  overflow-y: hidden;\n}\n\n.max-height-inherit {\n  height: inherit !important;\n}\n\n.max-height-fixed {\n  max-height: 300px;\n  overflow-y: scroll;\n}\n\nion-item {\n  --min-height: 20px;\n}\n\n.percent-width {\n  width: 100%;\n}\n\n.note-padding {\n  padding: 4px;\n  margin: 4px;\n}\n\n.background-light {\n  background: var(--ion-color-light);\n}\n\nion-item {\n  padding: 10px;\n  background-color: white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3VwLWVkaXQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxzQkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxpQkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLHVCQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUFDRjs7QUFFQTtFQUNFLG1CQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFNBQUE7QUFDRjs7QUFFQTtFQUNFLHVCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxxQkFBQTtFQUNBLGlCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7QUFDRjs7QUFFQTtFQUNFLGdDQUFBO0VBQ0EsZ0NBQUE7QUFDRjs7QUFFQTtFQUNFLHlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0FBQ0Y7O0FBRUE7RUFDRSwwQkFBQTtBQUNGOztBQUVBO0VBQ0UsaUJBQUE7RUFDQSxrQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxXQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQ0FBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLHVCQUFBO0FBQ0YiLCJmaWxlIjoiZ3JvdXAtZWRpdC5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jYXJkIHtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBib3JkZXItY29sb3I6IGRhcmtncmVlbjtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG59XHJcblxyXG5pb24tY2FyZC1jb250ZW50IHtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBtYXJnaW46IDRweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5pb24tY29sIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG5pb24tY2FyZC1oZWFkZXIge1xyXG4gIHBhZGRpbmc6IDFweDtcclxufVxyXG5cclxuaW9uLWdyaWQge1xyXG4gIHBhZGRpbmc6IDFweDtcclxufVxyXG5cclxuaW9uLWNoZWNrYm94IHtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxufVxyXG5cclxuLmNvbHVtbiB7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5ib3JkZXJlZCB7XHJcbiAgYm9yZGVyLWNvbG9yOiBsaWdodGdyYXk7XHJcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgcGFkZGluZzogMnB4O1xyXG4gIG1hcmdpbjogMnB4O1xyXG59XHJcblxyXG4uYm9yZGVyZWQtY29udGVudCB7XHJcbiAgYm9yZGVyLWNvbG9yOiBibGFjaztcclxuICBib3JkZXItd2lkdGg6IDFweDtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gIHBhZGRpbmc6IDJweDtcclxufVxyXG5cclxuLnpvb20ge1xyXG4gIHpvb206IDEuMztcclxufVxyXG5cclxuaW9uLWJ1dHRvbiA+IGlvbi1sYWJlbCB7XHJcbiAgY29sb3I6d2hpdGUgIWltcG9ydGFudDtcclxufVxyXG5cclxuLmhlYWRlci1ib3JkZXIge1xyXG4gIGJvcmRlci1jb2xvcjogIzFiMWIxYjtcclxuICBib3JkZXItd2lkdGg6IDJweDtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG59XHJcblxyXG4uZnVsbC1oZWlnaHQge1xyXG4gIGhlaWdodDoxMDAlO1xyXG59XHJcblxyXG5oMiB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxufVxyXG5cclxuaW9uLWxhYmVsIHtcclxuICBjb2xvcjpibGFjaztcclxufVxyXG5cclxuaW9uLXJvdyB7XHJcbiAgcGFkZGluZy10b3A6NHB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiA0cHg7XHJcbn1cclxuXHJcbmlvbi1zZWxlY3Qge1xyXG4gIG1pbi13aWR0aDogbWF4LWNvbnRlbnQ7XHJcbn1cclxuXHJcbi50ZXh0LXdyYXAge1xyXG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcCAhaW1wb3J0YW50O1xyXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5pb24tY29udGVudHtcclxuICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG59XHJcblxyXG4ubWF4LWhlaWdodCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxufVxyXG5cclxuLnNjcm9sbGFibGUge1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxufVxyXG5cclxuLm5vLW92ZXJmbG93IHtcclxuICBvdmVyZmxvdy15OiBoaWRkZW47XHJcbn1cclxuXHJcbi5tYXgtaGVpZ2h0LWluaGVyaXQge1xyXG4gIGhlaWdodDogaW5oZXJpdCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ubWF4LWhlaWdodC1maXhlZCB7XHJcbiAgbWF4LWhlaWdodDogMzAwcHg7XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG59XHJcblxyXG5pb24taXRlbSB7XHJcbiAgLS1taW4taGVpZ2h0OiAyMHB4O1xyXG59XHJcblxyXG4ucGVyY2VudC13aWR0aCB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5ub3RlLXBhZGRpbmcge1xyXG4gIHBhZGRpbmc6IDRweDtcclxuICBtYXJnaW46IDRweDtcclxufVxyXG5cclxuLmJhY2tncm91bmQtbGlnaHQge1xyXG4gIGJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1saWdodCk7XHJcbn1cclxuXHJcbmlvbi1pdGVtIHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG59Il19 */";

/***/ }),

/***/ 95193:
/*!*****************************************************************!*\
  !*** ./src/app/components/group-list/group-list.component.scss ***!
  \*****************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".modal-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n  padding: 1px !important;\n  margin: 4px !important;\n  margin-left: 16px !important;\n  margin-right: 16px !important;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-grid {\n  padding: 1px;\n}\n\nion-checkbox {\n  margin-left: 10px;\n}\n\n.bordered {\n  border-color: lightgray;\n  border-width: 1px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 2px;\n  margin: 2px;\n}\n\n.bordered-content {\n  border-color: black;\n  border-width: 1px;\n  border-style: solid;\n  padding: 2px;\n}\n\n.zoom {\n  zoom: 1.3;\n}\n\nion-button > ion-label {\n  color: white !important;\n}\n\n.header-border {\n  border-color: #1b1b1b;\n  border-width: 2px;\n  border-style: solid;\n}\n\n.full-height {\n  height: 100%;\n}\n\n.color-light {\n  color: var(--ion-color-light);\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-content {\n  --background: transparent;\n}\n\n.max-height {\n  max-height: 100%;\n}\n\n.scrollable {\n  overflow-y: scroll;\n}\n\n.no-overflow {\n  overflow-y: hidden;\n}\n\n.max-height-inherit {\n  height: inherit !important;\n}\n\n.max-height-fixed {\n  max-height: 100px;\n  overflow-y: scroll;\n}\n\nion-item {\n  --min-height: 20px;\n}\n\n.percent-width {\n  width: 100%;\n}\n\n.note-padding {\n  padding: 4px;\n  margin: 4px;\n}\n\nion-title {\n  color: black;\n  font-size: medium;\n}\n\nion-card {\n  min-height: 32px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdyb3VwLWxpc3QuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0VBQ0EsZ0JBQUE7RUFDQSx1QkFBQTtFQUNBLHNCQUFBO0VBQ0EsNEJBQUE7RUFDQSw2QkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxpQkFBQTtBQUNGOztBQUVBO0VBQ0UsdUJBQUE7RUFDQSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtBQUNGOztBQUdBO0VBQ0UsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtBQUFGOztBQUdBO0VBQ0UsU0FBQTtBQUFGOztBQUdBO0VBQ0UsdUJBQUE7QUFBRjs7QUFHQTtFQUNFLHFCQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtBQUFGOztBQUdBO0VBQ0UsWUFBQTtBQUFGOztBQUdBO0VBQ0UsNkJBQUE7QUFBRjs7QUFHQTtFQUNFLFlBQUE7QUFBRjs7QUFHQTtFQUNFLGdCQUFBO0VBQ0EsbUJBQUE7QUFBRjs7QUFHQTtFQUNFLHNCQUFBO0FBQUY7O0FBR0E7RUFDRSxnQ0FBQTtFQUNBLGdDQUFBO0FBQUY7O0FBR0E7RUFDRSx5QkFBQTtBQUFGOztBQUdBO0VBQ0UsZ0JBQUE7QUFBRjs7QUFHQTtFQUNFLGtCQUFBO0FBQUY7O0FBR0E7RUFDRSxrQkFBQTtBQUFGOztBQUdBO0VBQ0UsMEJBQUE7QUFBRjs7QUFHQTtFQUNFLGlCQUFBO0VBQ0Esa0JBQUE7QUFBRjs7QUFHQTtFQUNFLGtCQUFBO0FBQUY7O0FBR0E7RUFDRSxXQUFBO0FBQUY7O0FBR0E7RUFDRSxZQUFBO0VBQ0EsV0FBQTtBQUFGOztBQUdBO0VBQ0UsWUFBQTtFQUNBLGlCQUFBO0FBQUY7O0FBR0E7RUFDRSxnQkFBQTtBQUFGIiwiZmlsZSI6Imdyb3VwLWxpc3QuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubW9kYWwtY2FyZCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYm9yZGVyLWNvbG9yOiBkYXJrZ3JlZW47XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxufVxyXG5cclxuaW9uLWNhcmQtY29udGVudCB7XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG4gIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgcGFkZGluZzogMXB4ICFpbXBvcnRhbnQ7XHJcbiAgbWFyZ2luOiA0cHggIWltcG9ydGFudDtcclxuICBtYXJnaW4tbGVmdDogMTZweCAhaW1wb3J0YW50O1xyXG4gIG1hcmdpbi1yaWdodDoxNnB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmlvbi1jb2wge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBwYWRkaW5nOiAwcHg7XHJcbn1cclxuXHJcbmlvbi1jYXJkLWhlYWRlciB7XHJcbiAgcGFkZGluZzogMXB4O1xyXG59XHJcblxyXG5pb24tZ3JpZCB7XHJcbiAgcGFkZGluZzogMXB4O1xyXG59XHJcblxyXG5pb24tY2hlY2tib3gge1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59XHJcblxyXG4uYm9yZGVyZWQge1xyXG4gIGJvcmRlci1jb2xvcjogbGlnaHRncmF5O1xyXG4gIGJvcmRlci13aWR0aDogMXB4O1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIHBhZGRpbmc6IDJweDtcclxuICBtYXJnaW46IDJweDtcclxufVxyXG5cclxuXHJcbi5ib3JkZXJlZC1jb250ZW50IHtcclxuICBib3JkZXItY29sb3I6IGJsYWNrO1xyXG4gIGJvcmRlci13aWR0aDogMXB4O1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgcGFkZGluZzogMnB4O1xyXG59XHJcblxyXG4uem9vbSB7XHJcbiAgem9vbTogMS4zO1xyXG59XHJcblxyXG5pb24tYnV0dG9uID4gaW9uLWxhYmVsIHtcclxuICBjb2xvcjp3aGl0ZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uaGVhZGVyLWJvcmRlciB7XHJcbiAgYm9yZGVyLWNvbG9yOiAjMWIxYjFiO1xyXG4gIGJvcmRlci13aWR0aDogMnB4O1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbn1cclxuXHJcbi5mdWxsLWhlaWdodCB7XHJcbiAgaGVpZ2h0OjEwMCU7XHJcbn1cclxuXHJcbi5jb2xvci1saWdodCB7XHJcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1saWdodCk7XHJcbn1cclxuXHJcbmlvbi1sYWJlbCB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbn1cclxuXHJcbmlvbi1yb3cge1xyXG4gIHBhZGRpbmctdG9wOjRweDtcclxuICBwYWRkaW5nLWJvdHRvbTogNHB4O1xyXG59XHJcblxyXG5pb24tc2VsZWN0IHtcclxuICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xyXG59XHJcblxyXG4udGV4dC13cmFwIHtcclxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXAgIWltcG9ydGFudDtcclxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQgIWltcG9ydGFudDtcclxufVxyXG5cclxuaW9uLWNvbnRlbnR7XHJcbiAgLS1iYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxufVxyXG5cclxuLm1heC1oZWlnaHQge1xyXG4gIG1heC1oZWlnaHQ6IDEwMCU7XHJcbn1cclxuXHJcbi5zY3JvbGxhYmxlIHtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbn1cclxuXHJcbi5uby1vdmVyZmxvdyB7XHJcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xyXG59XHJcblxyXG4ubWF4LWhlaWdodC1pbmhlcml0IHtcclxuICBoZWlnaHQ6IGluaGVyaXQgIWltcG9ydGFudDtcclxufVxyXG5cclxuLm1heC1oZWlnaHQtZml4ZWQge1xyXG4gIG1heC1oZWlnaHQ6IDEwMHB4O1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxufVxyXG5cclxuaW9uLWl0ZW0ge1xyXG4gIC0tbWluLWhlaWdodDogMjBweDtcclxufVxyXG5cclxuLnBlcmNlbnQtd2lkdGgge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4ubm90ZS1wYWRkaW5nIHtcclxuICBwYWRkaW5nOiA0cHg7XHJcbiAgbWFyZ2luOiA0cHg7XHJcbn1cclxuXHJcbmlvbi10aXRsZSB7XHJcbiAgY29sb3I6IGJsYWNrO1xyXG4gIGZvbnQtc2l6ZTogbWVkaXVtO1xyXG59XHJcblxyXG5pb24tY2FyZCB7XHJcbiAgbWluLWhlaWdodDogMzJweDtcclxufSJdfQ== */";

/***/ }),

/***/ 17217:
/*!***********************************************************************!*\
  !*** ./src/app/components/group-popover/group-popover.component.scss ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJncm91cC1wb3BvdmVyLmNvbXBvbmVudC5zY3NzIn0= */";

/***/ }),

/***/ 93069:
/*!*******************************************************!*\
  !*** ./src/app/components/login/login.component.scss ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  border-color: darkgreen;\n  border-style: solid;\n  min-height: 361px;\n  min-width: 200px;\n  --background: transparent;\n}\n\nion-card-content {\n  flex-shrink: 0;\n}\n\nion-content {\n  --background: transparent;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSx5QkFBQTtBQUNGOztBQUVBO0VBQ0UsY0FBQTtBQUNGOztBQUVBO0VBQ0UseUJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUNGIiwiZmlsZSI6ImxvZ2luLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNhcmQge1xyXG4gIGJvcmRlci1jb2xvcjogZGFya2dyZWVuO1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgbWluLWhlaWdodDogMzYxcHg7XHJcbiAgbWluLXdpZHRoOiAyMDBweDtcclxuICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG59XHJcblxyXG5pb24tY2FyZC1jb250ZW50IHtcclxuICBmbGV4LXNocmluazogMDtcclxufVxyXG5cclxuaW9uLWNvbnRlbnQge1xyXG4gIC0tYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbn1cclxuXHJcbmgyIHtcclxuICBjb2xvcjpibGFjaztcclxuICBmb250LXNpemU6IGxhcmdlO1xyXG59XHJcbiJdfQ== */";

/***/ }),

/***/ 22424:
/*!***************************************************************!*\
  !*** ./src/app/components/note-list/note-list.component.scss ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n  padding: 1px !important;\n  margin: 4px !important;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-card {\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-grid {\n  padding: 1px;\n}\n\nion-checkbox {\n  margin-left: 10px;\n}\n\n.bordered {\n  border-color: lightgray;\n  border-width: 1px;\n  border-style: solid;\n  border-radius: 5px;\n  padding: 2px;\n  margin: 2px;\n}\n\n.bordered-content {\n  border-color: black;\n  border-width: 1px;\n  border-style: solid;\n  padding: 2px;\n}\n\n.zoom {\n  zoom: 1.3;\n}\n\nion-button > ion-label {\n  color: white !important;\n}\n\n.header-border {\n  border-color: #1b1b1b;\n  border-width: 2px;\n  border-style: solid;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-content {\n  --background: transparent;\n}\n\n.max-height {\n  max-height: 100%;\n}\n\n.scrollable {\n  overflow-y: scroll;\n}\n\n.no-overflow {\n  overflow-y: hidden;\n}\n\n.max-height-inherit {\n  height: inherit !important;\n}\n\n.max-height-fixed {\n  max-height: 100px;\n  overflow-y: scroll;\n}\n\nion-item {\n  --min-height: 20px;\n}\n\n.percent-width {\n  width: 100%;\n}\n\n.note-padding {\n  padding: 4px;\n  margin: 4px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdGUtbGlzdC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLGdCQUFBO0VBQ0EsdUJBQUE7RUFDQSxzQkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSx1QkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxpQkFBQTtBQUNGOztBQUVBO0VBQ0UsdUJBQUE7RUFDQSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtBQUNGOztBQUVBO0VBQ0UsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtBQUNGOztBQUVBO0VBQ0UsU0FBQTtBQUNGOztBQUVBO0VBQ0UsdUJBQUE7QUFDRjs7QUFFQTtFQUNFLHFCQUFBO0VBQ0EsaUJBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxzQkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0NBQUE7RUFDQSxnQ0FBQTtBQUNGOztBQUVBO0VBQ0UseUJBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7QUFDRjs7QUFFQTtFQUNFLDBCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxpQkFBQTtFQUNBLGtCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtBQUNGOztBQUVBO0VBQ0UsV0FBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLFdBQUE7QUFDRiIsImZpbGUiOiJub3RlLWxpc3QuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuXHJcbmlvbi1jYXJkLWNvbnRlbnQge1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG4gIHBhZGRpbmc6IDFweCAhaW1wb3J0YW50O1xyXG4gIG1hcmdpbjogNHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmlvbi1jb2wge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBwYWRkaW5nOiAwcHg7XHJcbn1cclxuXHJcbmlvbi1jYXJkLWhlYWRlciB7XHJcbiAgcGFkZGluZzogMXB4O1xyXG59XHJcblxyXG5pb24tY2FyZCB7XHJcbiAgYm9yZGVyLWNvbG9yOiBkYXJrZ3JlZW47XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxufVxyXG5cclxuaW9uLWdyaWQge1xyXG4gIHBhZGRpbmc6IDFweDtcclxufVxyXG5cclxuaW9uLWNoZWNrYm94IHtcclxuICBtYXJnaW4tbGVmdDogMTBweDtcclxufVxyXG5cclxuLmJvcmRlcmVkIHtcclxuICBib3JkZXItY29sb3I6IGxpZ2h0Z3JheTtcclxuICBib3JkZXItd2lkdGg6IDFweDtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICBwYWRkaW5nOiAycHg7XHJcbiAgbWFyZ2luOiAycHg7XHJcbn1cclxuXHJcbi5ib3JkZXJlZC1jb250ZW50IHtcclxuICBib3JkZXItY29sb3I6IGJsYWNrO1xyXG4gIGJvcmRlci13aWR0aDogMXB4O1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgcGFkZGluZzogMnB4O1xyXG59XHJcblxyXG4uem9vbSB7XHJcbiAgem9vbTogMS4zO1xyXG59XHJcblxyXG5pb24tYnV0dG9uID4gaW9uLWxhYmVsIHtcclxuICBjb2xvcjp3aGl0ZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uaGVhZGVyLWJvcmRlciB7XHJcbiAgYm9yZGVyLWNvbG9yOiAjMWIxYjFiO1xyXG4gIGJvcmRlci13aWR0aDogMnB4O1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbn1cclxuXHJcbi5mdWxsLWhlaWdodCB7XHJcbiAgaGVpZ2h0OjEwMCU7XHJcbn1cclxuXHJcbmgyIHtcclxuICBjb2xvcjpibGFjaztcclxuICBmb250LXNpemU6IGxhcmdlO1xyXG59XHJcblxyXG5pb24tbGFiZWwge1xyXG4gIGNvbG9yOmJsYWNrO1xyXG59XHJcblxyXG5pb24tcm93IHtcclxuICBwYWRkaW5nLXRvcDo0cHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDRweDtcclxufVxyXG5cclxuaW9uLXNlbGVjdCB7XHJcbiAgbWluLXdpZHRoOiBtYXgtY29udGVudDtcclxufVxyXG5cclxuLnRleHQtd3JhcCB7XHJcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwICFpbXBvcnRhbnQ7XHJcbiAgd29yZC13cmFwOiBicmVhay13b3JkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmlvbi1jb250ZW50e1xyXG4gIC0tYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbn1cclxuXHJcbi5tYXgtaGVpZ2h0IHtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG4uc2Nyb2xsYWJsZSB7XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG59XHJcblxyXG4ubm8tb3ZlcmZsb3cge1xyXG4gIG92ZXJmbG93LXk6IGhpZGRlbjtcclxufVxyXG5cclxuLm1heC1oZWlnaHQtaW5oZXJpdCB7XHJcbiAgaGVpZ2h0OiBpbmhlcml0ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5tYXgtaGVpZ2h0LWZpeGVkIHtcclxuICBtYXgtaGVpZ2h0OiAxMDBweDtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbn1cclxuXHJcbmlvbi1pdGVtIHtcclxuICAtLW1pbi1oZWlnaHQ6IDIwcHg7XHJcbn1cclxuXHJcbi5wZXJjZW50LXdpZHRoIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxuLm5vdGUtcGFkZGluZyB7XHJcbiAgcGFkZGluZzogNHB4O1xyXG4gIG1hcmdpbjogNHB4O1xyXG59XHJcbiJdfQ== */";

/***/ }),

/***/ 25376:
/*!***********************************************************!*\
  !*** ./src/app/components/privacy/privacy.component.scss ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-card {\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-grid {\n  padding: 1px;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nh3 {\n  color: black;\n  font-size: medium;\n  font-weight: bold;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\nion-content {\n  --background: transparent;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByaXZhY3kuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSx1QkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxpQkFBQTtFQUNBLGlCQUFBO0FBQ0Y7O0FBR0E7RUFDRSxZQUFBO0FBQUY7O0FBR0E7RUFDRSxnQkFBQTtFQUNBLG1CQUFBO0FBQUY7O0FBR0E7RUFDRSxzQkFBQTtBQUFGOztBQUdBO0VBQ0UseUJBQUE7QUFBRiIsImZpbGUiOiJwcml2YWN5LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNhcmQge1xyXG4gIG1heC1oZWlnaHQ6IDEwMCU7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG59XHJcblxyXG5pb24tY2FyZC1jb250ZW50IHtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxufVxyXG5cclxuaW9uLWNvbCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIHBhZGRpbmc6IDBweDtcclxufVxyXG5cclxuaW9uLWNhcmQtaGVhZGVyIHtcclxuICBwYWRkaW5nOiAxcHg7XHJcbn1cclxuXHJcbmlvbi1jYXJkIHtcclxuICBib3JkZXItY29sb3I6IGRhcmtncmVlbjtcclxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG59XHJcblxyXG5pb24tZ3JpZCB7XHJcbiAgcGFkZGluZzogMXB4O1xyXG59XHJcblxyXG4uZnVsbC1oZWlnaHQge1xyXG4gIGhlaWdodDoxMDAlO1xyXG59XHJcblxyXG5oMiB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxufVxyXG5cclxuaDMge1xyXG4gIGNvbG9yOmJsYWNrO1xyXG4gIGZvbnQtc2l6ZTogbWVkaXVtO1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG59XHJcblxyXG5cclxuaW9uLWxhYmVsIHtcclxuICBjb2xvcjpibGFjaztcclxufVxyXG5cclxuaW9uLXJvdyB7XHJcbiAgcGFkZGluZy10b3A6NHB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiA0cHg7XHJcbn1cclxuXHJcbmlvbi1zZWxlY3Qge1xyXG4gIG1pbi13aWR0aDogbWF4LWNvbnRlbnQ7XHJcbn1cclxuXHJcbmlvbi1jb250ZW50e1xyXG4gIC0tYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbn1cclxuIl19 */";

/***/ }),

/***/ 58595:
/*!***********************************************************************!*\
  !*** ./src/app/components/send-feedback/send-feedback.component.scss ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-content {\n  --background: transparent;\n}\n\nion-card {\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-card {\n  overflow-y: scroll;\n  max-width: 500px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlbmQtZmVlZGJhY2suY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQ0FBQTtFQUNBLGdDQUFBO0FBQ0Y7O0FBRUE7RUFDRSx5QkFBQTtBQUNGOztBQUVBO0VBQ0UsdUJBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSxnQkFBQTtBQUNGIiwiZmlsZSI6InNlbmQtZmVlZGJhY2suY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudGV4dC13cmFwIHtcclxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXAgIWltcG9ydGFudDtcclxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQgIWltcG9ydGFudDtcclxufVxyXG5cclxuaW9uLWNvbnRlbnR7XHJcbiAgLS1iYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxufVxyXG5cclxuaW9uLWNhcmQge1xyXG4gIGJvcmRlci1jb2xvcjogZGFya2dyZWVuO1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbn1cclxuXHJcbmlvbi1jYXJkIHtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbiAgbWF4LXdpZHRoOiA1MDBweDtcclxufVxyXG4iXX0= */";

/***/ }),

/***/ 24720:
/*!***************************************************************!*\
  !*** ./src/app/components/side-menu/side-menu.component.scss ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".menu-btn {\n  width: 80% !important;\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-item ion-icon {\n  margin-right: 15px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZGUtbWVudS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHFCQUFBO0VBQ0EsZ0NBQUE7RUFDQSxnQ0FBQTtBQUNGOztBQUdFO0VBQ0Usa0JBQUE7QUFBSiIsImZpbGUiOiJzaWRlLW1lbnUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubWVudS1idG4ge1xyXG4gIHdpZHRoOiA4MCUgIWltcG9ydGFudDtcclxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXAgIWltcG9ydGFudDtcclxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQgIWltcG9ydGFudDtcclxufVxyXG5cclxuaW9uLWl0ZW0ge1xyXG4gIGlvbi1pY29uIHtcclxuICAgIG1hcmdpbi1yaWdodDogMTVweDtcclxuICB9XHJcbn1cclxuXHJcbiJdfQ== */";

/***/ }),

/***/ 13805:
/*!***********************************************************************!*\
  !*** ./src/app/components/skips-popover/skips-popover.component.scss ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".flex-item {\n  width: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNraXBzLXBvcG92ZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDRSxXQUFBO0FBQUYiLCJmaWxlIjoic2tpcHMtcG9wb3Zlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4uZmxleC1pdGVtIHtcclxuICB3aWR0aDoxMDAlO1xyXG59XHJcbiJdfQ== */";

/***/ }),

/***/ 97477:
/*!*******************************************************************!*\
  !*** ./src/app/components/task-create/task-create.component.scss ***!
  \*******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-grid {\n  padding: 1px;\n}\n\nion-checkbox {\n  margin-left: 10px;\n}\n\n.margin-bottom {\n  margin-bottom: 8px;\n}\n\n.column {\n  flex-direction: column;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.dropdown {\n  width: 100% !important;\n  max-width: 100% !important;\n}\n\n.no-overflow {\n  overflow: visible;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-list {\n  background: var(--ion-color-light);\n}\n\n.small-font {\n  font-size: small;\n}\n\nion-item {\n  padding: 10px;\n  background-color: white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stY3JlYXRlLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLGlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7RUFDQSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7RUFDQSwwQkFBQTtBQUNGOztBQUVBO0VBQ0UsaUJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7QUFDRjs7QUFFQTtFQUNFLGdDQUFBO0VBQ0EsZ0NBQUE7QUFDRjs7QUFFQTtFQUNFLGtDQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLHVCQUFBO0FBQ0YiLCJmaWxlIjoidGFzay1jcmVhdGUuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYm9yZGVyLWNvbG9yOiBkYXJrZ3JlZW47XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxufVxyXG5cclxuaW9uLWNhcmQtY29udGVudCB7XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG4gIG1heC1oZWlnaHQ6IDEwMCU7XHJcbn1cclxuXHJcbmlvbi1jb2wge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBwYWRkaW5nOiAwcHg7XHJcbn1cclxuXHJcbmlvbi1jYXJkLWhlYWRlciB7XHJcbiAgcGFkZGluZzogMXB4O1xyXG59XHJcblxyXG5pb24tZ3JpZCB7XHJcbiAgcGFkZGluZzogMXB4O1xyXG59XHJcblxyXG5pb24tY2hlY2tib3gge1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG59XHJcblxyXG4ubWFyZ2luLWJvdHRvbSB7XHJcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xyXG59XHJcblxyXG4uY29sdW1uIHtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuLmRyb3Bkb3duIHtcclxuICB3aWR0aDoxMDAlICFpbXBvcnRhbnQ7XHJcbiAgbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5uby1vdmVyZmxvdyB7XHJcbiAgb3ZlcmZsb3c6IHZpc2libGUgO1xyXG59XHJcblxyXG4uZnVsbC1oZWlnaHQge1xyXG4gIGhlaWdodDoxMDAlO1xyXG59XHJcblxyXG5oMiB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxufVxyXG5cclxuaW9uLWxhYmVsIHtcclxuICBjb2xvcjpibGFjaztcclxufVxyXG5cclxuaW9uLXJvdyB7XHJcbiAgcGFkZGluZy10b3A6NHB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiA0cHg7XHJcbn1cclxuXHJcbmlvbi1zZWxlY3Qge1xyXG4gIG1pbi13aWR0aDogbWF4LWNvbnRlbnQ7XHJcbn1cclxuXHJcbi50ZXh0LXdyYXAge1xyXG4gIHdoaXRlLXNwYWNlOiBwcmUtd3JhcCAhaW1wb3J0YW50O1xyXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5pb24tbGlzdCB7XHJcbiAgYmFja2dyb3VuZDogdmFyKC0taW9uLWNvbG9yLWxpZ2h0KTtcclxufVxyXG5cclxuLnNtYWxsLWZvbnQge1xyXG4gIGZvbnQtc2l6ZTogc21hbGw7XHJcbn1cclxuXHJcbmlvbi1pdGVtIHtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG59Il19 */";

/***/ }),

/***/ 7877:
/*!***************************************************************!*\
  !*** ./src/app/components/task-edit/task-edit.component.scss ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-card {\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-grid {\n  padding: 1px;\n}\n\nion-checkbox {\n  margin-left: 10px;\n}\n\n.margin-bottom {\n  margin-bottom: 8px;\n}\n\n.column {\n  flex-direction: column;\n  display: flex;\n  align-items: left;\n  justify-content: center;\n}\n\n.danger {\n  background-color: red !important;\n}\n\n.dropdown {\n  width: 100% !important;\n  max-width: 100% !important;\n}\n\n.no-overflow {\n  overflow: visible;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-content {\n  --background: transparent;\n}\n\nion-list {\n  background: var(--ion-color-light);\n}\n\n.small-font {\n  font-size: small;\n}\n\nion-item {\n  padding: 10px;\n  background-color: white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stZWRpdC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLHVCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLGlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7RUFDQSxhQUFBO0VBQ0EsaUJBQUE7RUFDQSx1QkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0NBQUE7QUFDRjs7QUFFQTtFQUNFLHNCQUFBO0VBQ0EsMEJBQUE7QUFDRjs7QUFFQTtFQUNFLGlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLHNCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQ0FBQTtFQUNBLGdDQUFBO0FBQ0Y7O0FBRUE7RUFDRSx5QkFBQTtBQUNGOztBQUVBO0VBQ0Usa0NBQUE7QUFDRjs7QUFFQTtFQUNFLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxhQUFBO0VBQ0EsdUJBQUE7QUFDRiIsImZpbGUiOiJ0YXNrLWVkaXQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuXHJcbmlvbi1jYXJkLWNvbnRlbnQge1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG5pb24tY29sIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG5pb24tY2FyZC1oZWFkZXIge1xyXG4gIHBhZGRpbmc6IDFweDtcclxufVxyXG5cclxuaW9uLWNhcmQge1xyXG4gIGJvcmRlci1jb2xvcjogZGFya2dyZWVuO1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbn1cclxuXHJcbmlvbi1ncmlkIHtcclxuICBwYWRkaW5nOiAxcHg7XHJcbn1cclxuXHJcbmlvbi1jaGVja2JveCB7XHJcbiAgbWFyZ2luLWxlZnQ6IDEwcHg7XHJcbn1cclxuXHJcbi5tYXJnaW4tYm90dG9tIHtcclxuICBtYXJnaW4tYm90dG9tOiA4cHg7XHJcbn1cclxuXHJcbi5jb2x1bW4ge1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogbGVmdDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuLmRhbmdlciB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5kcm9wZG93biB7XHJcbiAgd2lkdGg6MTAwJSAhaW1wb3J0YW50O1xyXG4gIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4ubm8tb3ZlcmZsb3cge1xyXG4gIG92ZXJmbG93OiB2aXNpYmxlIDtcclxufVxyXG5cclxuLmZ1bGwtaGVpZ2h0IHtcclxuICBoZWlnaHQ6MTAwJTtcclxufVxyXG5cclxuaDIge1xyXG4gIGNvbG9yOmJsYWNrO1xyXG4gIGZvbnQtc2l6ZTogbGFyZ2U7XHJcbn1cclxuXHJcbmlvbi1sYWJlbCB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbn1cclxuXHJcbmlvbi1yb3cge1xyXG4gIHBhZGRpbmctdG9wOjRweDtcclxuICBwYWRkaW5nLWJvdHRvbTogNHB4O1xyXG59XHJcblxyXG5pb24tc2VsZWN0IHtcclxuICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xyXG59XHJcblxyXG4udGV4dC13cmFwIHtcclxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXAgIWltcG9ydGFudDtcclxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQgIWltcG9ydGFudDtcclxufVxyXG5cclxuaW9uLWNvbnRlbnR7XHJcbiAgLS1iYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxufVxyXG5cclxuaW9uLWxpc3Qge1xyXG4gIGJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1saWdodCk7XHJcbn1cclxuXHJcbi5zbWFsbC1mb250IHtcclxuICBmb250LXNpemU6IHNtYWxsO1xyXG59XHJcblxyXG5pb24taXRlbSB7XHJcbiAgcGFkZGluZzogMTBweDtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcclxufSJdfQ== */";

/***/ }),

/***/ 37161:
/*!*******************************************************************************!*\
  !*** ./src/app/components/task-list-popover/task-list-popover.component.scss ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".flex-item {\n  width: 100%;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stbGlzdC1wb3BvdmVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0UsV0FBQTtBQUFGIiwiZmlsZSI6InRhc2stbGlzdC1wb3BvdmVyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5mbGV4LWl0ZW0ge1xyXG4gIHdpZHRoOjEwMCU7XHJcbn1cclxuIl19 */";

/***/ }),

/***/ 86994:
/*!***************************************************************!*\
  !*** ./src/app/components/task-list/task-list.component.scss ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nion-card {\n  border-color: #1b1b1b !important;\n  border-style: solid;\n  border-width: 1px;\n}\n\nion-footer {\n  min-height: 30px !important;\n}\n\nion-icon {\n  color: white;\n}\n\nion-item {\n  --min-height: 20px;\n}\n\nion-title {\n  color: black;\n  font-size: medium;\n}\n\nion-card-header {\n  padding: 0px;\n}\n\nion-progress-bar {\n  --buffer-background: var(--ion-color-dark);\n}\n\nion-popover {\n  --width: 200px !important;\n}\n\n.small-font {\n  font-size: small;\n}\n\n.margin-bottom-5 {\n  margin-bottom: 5px;\n}\n\n.color-light {\n  color: var(--ion-color-light);\n}\n\nion-segment-button {\n  height: 40px;\n  min-height: 40px;\n}\n\nion-segment-button.segment-button-checked {\n  border-bottom: 2px solid;\n}\n\n.color-red {\n  color: red;\n}\n\n.color-green {\n  color: green;\n}\n\n.color-yellow {\n  color: orange !important;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stbGlzdC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQ0FBQTtFQUNBLG1CQUFBO0VBQ0EsaUJBQUE7QUFDRjs7QUFFQTtFQUNFLDJCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLGlCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSwwQ0FBQTtBQUNGOztBQUVBO0VBQ0MseUJBQUE7QUFDRDs7QUFFQTtFQUNFLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxrQkFBQTtBQUNGOztBQUVBO0VBQ0UsNkJBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0Usd0JBQUE7QUFDRjs7QUFFQTtFQUNFLFVBQUE7QUFDRjs7QUFFQTtFQUNFLFlBQUE7QUFDRjs7QUFFQTtFQUNFLHdCQUFBO0FBQ0YiLCJmaWxlIjoidGFzay1saXN0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaW9uLWNvbCB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcblxyXG5pb24tY2FyZCB7XHJcbiAgYm9yZGVyLWNvbG9yOiAjMWIxYjFiICFpbXBvcnRhbnQ7XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICBib3JkZXItd2lkdGg6IDFweDtcclxufVxyXG5cclxuaW9uLWZvb3RlciB7XHJcbiAgbWluLWhlaWdodDogMzBweCAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5pb24taWNvbiB7XHJcbiAgY29sb3I6IHdoaXRlO1xyXG59XHJcblxyXG5pb24taXRlbSB7XHJcbiAgLS1taW4taGVpZ2h0OiAyMHB4O1xyXG59XHJcblxyXG5pb24tdGl0bGUge1xyXG4gIGNvbG9yOiBibGFjaztcclxuICBmb250LXNpemU6IG1lZGl1bTtcclxufVxyXG5cclxuaW9uLWNhcmQtaGVhZGVyIHtcclxuICBwYWRkaW5nOiAwcHg7XHJcbn1cclxuXHJcbmlvbi1wcm9ncmVzcy1iYXIge1xyXG4gIC0tYnVmZmVyLWJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1kYXJrKTtcclxufVxyXG5cclxuaW9uLXBvcG92ZXIge1xyXG5cdC0td2lkdGg6IDIwMHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5zbWFsbC1mb250IHtcclxuICBmb250LXNpemU6IHNtYWxsO1xyXG59XHJcblxyXG4ubWFyZ2luLWJvdHRvbS01IHtcclxuICBtYXJnaW4tYm90dG9tOiA1cHg7XHJcbn1cclxuXHJcbi5jb2xvci1saWdodCB7XHJcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1saWdodCk7XHJcbn1cclxuXHJcbmlvbi1zZWdtZW50LWJ1dHRvbiB7XHJcbiAgaGVpZ2h0OiA0MHB4O1xyXG4gIG1pbi1oZWlnaHQ6IDQwcHg7XHJcbn1cclxuICBcclxuaW9uLXNlZ21lbnQtYnV0dG9uLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQge1xyXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZDtcclxufVxyXG5cclxuLmNvbG9yLXJlZCB7XHJcbiAgY29sb3I6IHJlZDtcclxufVxyXG5cclxuLmNvbG9yLWdyZWVuIHtcclxuICBjb2xvcjogZ3JlZW47XHJcbn1cclxuXHJcbi5jb2xvci15ZWxsb3cge1xyXG4gIGNvbG9yOiBvcmFuZ2UgIWltcG9ydGFudDtcclxufVxyXG4iXX0= */";

/***/ }),

/***/ 42631:
/*!***********************************************************************************!*\
  !*** ./src/app/components/task-selection-card/task-selection-card.component.scss ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".content-center {\n  vertical-align: middle;\n}\n\n.overflow-scroll {\n  overflow-y: scroll;\n}\n\nh3 {\n  font-size: large;\n  color: black;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stc2VsZWN0aW9uLWNhcmQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7RUFDRSxzQkFBQTtBQUFGOztBQUdBO0VBQ0Usa0JBQUE7QUFBRjs7QUFHQTtFQUNFLGdCQUFBO0VBQ0EsWUFBQTtBQUFGIiwiZmlsZSI6InRhc2stc2VsZWN0aW9uLWNhcmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLmNvbnRlbnQtY2VudGVyIHtcclxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG59XHJcblxyXG4ub3ZlcmZsb3ctc2Nyb2xsIHtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbn1cclxuXHJcbmgzIHtcclxuICBmb250LXNpemU6IGxhcmdlO1xyXG4gIGNvbG9yOiBibGFjaztcclxufVxyXG4iXX0= */";

/***/ }),

/***/ 67298:
/*!*************************************************************************!*\
  !*** ./src/app/components/task-selection/task-selection.component.scss ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = ".content-center {\n  vertical-align: middle;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n}\n\n.full-height {\n  height: 100%;\n}\n\nion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n  border-color: darkgreen;\n  border-style: solid;\n  padding: 10px;\n}\n\nion-content {\n  --background: transparent;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n  font-weight: bold;\n}\n\n.margin-top {\n  padding-top: 10px;\n}\n\n.margin-bottom {\n  padding-top: 10px !important;\n}\n\n.max-width {\n  width: 100%;\n}\n\n.padding-5 {\n  padding: 5px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhc2stc2VsZWN0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0Usc0JBQUE7QUFBRjs7QUFHQTtFQUNFLGtCQUFBO0VBQ0EsZ0JBQUE7QUFBRjs7QUFHQTtFQUNFLFlBQUE7QUFBRjs7QUFHQTtFQUNFLGdCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLGFBQUE7QUFBRjs7QUFHQTtFQUNFLHlCQUFBO0FBQUY7O0FBR0E7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7QUFBRjs7QUFHQTtFQUNFLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0FBQUY7O0FBR0E7RUFDRSxpQkFBQTtBQUFGOztBQUdBO0VBQ0UsNEJBQUE7QUFBRjs7QUFHQTtFQUNFLFdBQUE7QUFBRjs7QUFHQTtFQUNFLFlBQUE7QUFBRiIsImZpbGUiOiJ0YXNrLXNlbGVjdGlvbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4uY29udGVudC1jZW50ZXIge1xyXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbn1cclxuXHJcbmlvbi1jYXJkLWNvbnRlbnQge1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG4uZnVsbC1oZWlnaHQge1xyXG4gIGhlaWdodDoxMDAlO1xyXG59XHJcblxyXG5pb24tY2FyZCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYm9yZGVyLWNvbG9yOiBkYXJrZ3JlZW47XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG59XHJcblxyXG5pb24tY29udGVudHtcclxuICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG59XHJcblxyXG5pb24tY29sIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG5oMiB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbiAgZm9udC1zaXplOiBsYXJnZTtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuLm1hcmdpbi10b3Age1xyXG4gIHBhZGRpbmctdG9wOiAxMHB4O1xyXG59XHJcblxyXG4ubWFyZ2luLWJvdHRvbSB7XHJcbiAgcGFkZGluZy10b3A6IDEwcHggIWltcG9ydGFudDtcclxufVxyXG5cclxuLm1heC13aWR0aCB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbi5wYWRkaW5nLTUge1xyXG4gIHBhZGRpbmc6NXB4O1xyXG59XHJcbiJdfQ== */";

/***/ }),

/***/ 97754:
/*!*******************************************************!*\
  !*** ./src/app/components/terms/terms.component.scss ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-card {\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-grid {\n  padding: 1px;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nh3 {\n  color: black;\n  font-size: medium;\n  font-weight: bold;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\nion-content {\n  --background: transparent;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlcm1zLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHVCQUFBO0VBQ0EsWUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsdUJBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0EsaUJBQUE7RUFDQSxpQkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0Usc0JBQUE7QUFDRjs7QUFFQTtFQUNFLHlCQUFBO0FBQ0YiLCJmaWxlIjoidGVybXMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuXHJcbmlvbi1jYXJkLWNvbnRlbnQge1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG5pb24tY29sIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG5pb24tY2FyZC1oZWFkZXIge1xyXG4gIHBhZGRpbmc6IDFweDtcclxufVxyXG5cclxuaW9uLWNhcmQge1xyXG4gIGJvcmRlci1jb2xvcjogZGFya2dyZWVuO1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbn1cclxuXHJcbmlvbi1ncmlkIHtcclxuICBwYWRkaW5nOiAxcHg7XHJcbn1cclxuXHJcbi5mdWxsLWhlaWdodCB7XHJcbiAgaGVpZ2h0OjEwMCU7XHJcbn1cclxuXHJcbmgyIHtcclxuICBjb2xvcjpibGFjaztcclxuICBmb250LXNpemU6IGxhcmdlO1xyXG59XHJcblxyXG5oMyB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbiAgZm9udC1zaXplOiBtZWRpdW07XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbmlvbi1sYWJlbCB7XHJcbiAgY29sb3I6YmxhY2s7XHJcbn1cclxuXHJcbmlvbi1yb3cge1xyXG4gIHBhZGRpbmctdG9wOjRweDtcclxuICBwYWRkaW5nLWJvdHRvbTogNHB4O1xyXG59XHJcblxyXG5pb24tc2VsZWN0IHtcclxuICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xyXG59XHJcblxyXG5pb24tY29udGVudHtcclxuICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG59XHJcbiJdfQ== */";

/***/ }),

/***/ 59035:
/*!***********************************************************************!*\
  !*** ./src/app/components/user-settings/user-settings.component.scss ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nion-card-header {\n  padding: 1px;\n}\n\nion-card {\n  border-color: darkgreen;\n  border-style: solid;\n}\n\nion-grid {\n  padding: 1px;\n}\n\nbutton {\n  color: black !important;\n}\n\n.full-height {\n  height: 100%;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\nion-label {\n  color: black;\n}\n\nion-row {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\nion-select {\n  min-width: max-content;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-list {\n  background: var(--ion-color-light);\n}\n\n.padding-5 {\n  padding-left: 15px;\n  padding-right: 15px;\n}\n\nion-item {\n  padding: 10px;\n  background-color: white;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXItc2V0dGluZ3MuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSx1QkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSx1QkFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtBQUNGOztBQUVBO0VBQ0UsWUFBQTtFQUNBLGdCQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxnQkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUE7RUFDRSxzQkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0NBQUE7RUFDQSxnQ0FBQTtBQUNGOztBQUVBO0VBQ0Usa0NBQUE7QUFDRjs7QUFFQTtFQUNFLGtCQUFBO0VBQ0EsbUJBQUE7QUFDRjs7QUFFQTtFQUNFLGFBQUE7RUFDQSx1QkFBQTtBQUNGIiwiZmlsZSI6InVzZXItc2V0dGluZ3MuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJpb24tY2FyZCB7XHJcbiAgbWF4LWhlaWdodDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbn1cclxuXHJcbmlvbi1jYXJkLWNvbnRlbnQge1xyXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG5pb24tY29sIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcGFkZGluZzogMHB4O1xyXG59XHJcblxyXG5pb24tY2FyZC1oZWFkZXIge1xyXG4gIHBhZGRpbmc6IDFweDtcclxufVxyXG5cclxuaW9uLWNhcmQge1xyXG4gIGJvcmRlci1jb2xvcjogZGFya2dyZWVuO1xyXG4gIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbn1cclxuXHJcbmlvbi1ncmlkIHtcclxuICBwYWRkaW5nOiAxcHg7XHJcbn1cclxuXHJcbmJ1dHRvbiB7XHJcbiAgY29sb3I6IGJsYWNrICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5mdWxsLWhlaWdodCB7XHJcbiAgaGVpZ2h0OjEwMCU7XHJcbn1cclxuXHJcbmgyIHtcclxuICBjb2xvcjpibGFjaztcclxuICBmb250LXNpemU6IGxhcmdlO1xyXG59XHJcblxyXG5pb24tbGFiZWwge1xyXG4gIGNvbG9yOmJsYWNrO1xyXG59XHJcblxyXG5pb24tcm93IHtcclxuICBwYWRkaW5nLXRvcDo0cHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDRweDtcclxufVxyXG5cclxuaW9uLXNlbGVjdCB7XHJcbiAgbWluLXdpZHRoOiBtYXgtY29udGVudDtcclxufVxyXG5cclxuLnRleHQtd3JhcCB7XHJcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwICFpbXBvcnRhbnQ7XHJcbiAgd29yZC13cmFwOiBicmVhay13b3JkICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbmlvbi1saXN0IHtcclxuICBiYWNrZ3JvdW5kOiB2YXIoLS1pb24tY29sb3ItbGlnaHQpO1xyXG59XHJcblxyXG4ucGFkZGluZy01IHtcclxuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XHJcbiAgcGFkZGluZy1yaWdodDogMTVweDtcclxufVxyXG5cclxuaW9uLWl0ZW0ge1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbn0iXX0= */";

/***/ }),

/***/ 73907:
/*!***********************************************************!*\
  !*** ./src/app/components/welcome/welcome.component.scss ***!
  \***********************************************************/
/***/ ((module) => {

"use strict";
module.exports = "ion-card {\n  max-height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\nion-card-content {\n  overflow-y: scroll;\n  max-height: 100%;\n}\n\nion-col {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0px;\n}\n\nh2 {\n  color: black;\n  font-size: large;\n}\n\n.text-wrap {\n  white-space: pre-wrap !important;\n  word-wrap: break-word !important;\n}\n\nion-list {\n  background: var(--ion-color-light);\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlbGNvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxnQkFBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtBQUNGOztBQUVBO0VBQ0Usa0JBQUE7RUFDQSxnQkFBQTtBQUNGOztBQUVBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0FBQ0Y7O0FBRUE7RUFDRSxZQUFBO0VBQ0EsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLGdDQUFBO0VBQ0EsZ0NBQUE7QUFDRjs7QUFFQTtFQUNFLGtDQUFBO0FBQ0YiLCJmaWxlIjoid2VsY29tZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jYXJkIHtcclxuICBtYXgtaGVpZ2h0OiAxMDAlO1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxufVxyXG5cclxuaW9uLWNhcmQtY29udGVudCB7XHJcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG4gIG1heC1oZWlnaHQ6IDEwMCU7XHJcbn1cclxuXHJcbmlvbi1jb2wge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBwYWRkaW5nOiAwcHg7XHJcbn1cclxuXHJcbmgyIHtcclxuICBjb2xvcjpibGFjaztcclxuICBmb250LXNpemU6IGxhcmdlO1xyXG59XHJcblxyXG4udGV4dC13cmFwIHtcclxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXAgIWltcG9ydGFudDtcclxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQgIWltcG9ydGFudDtcclxufVxyXG5cclxuaW9uLWxpc3Qge1xyXG4gIGJhY2tncm91bmQ6IHZhcigtLWlvbi1jb2xvci1saWdodCk7XHJcbn1cclxuIl19 */";

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__(90271)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=main.js.map